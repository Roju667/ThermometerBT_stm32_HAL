
ThermometerBT_stm32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  0800a580  0800a580  0001a580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aec4  0800aec4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800aec4  0800aec4  0001aec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aecc  0800aecc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aecc  0800aecc  0001aecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aed0  0800aed0  0001aed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800aed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001dc  0800b0b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800b0b0  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afcc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003918  00000000  00000000  0003b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0003eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c86  00000000  00000000  00040f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001896d  00000000  00000000  0005abf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093282  00000000  00000000  00073563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001067e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fac  00000000  00000000  00106838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a564 	.word	0x0800a564

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a564 	.word	0x0800a564

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <JDY09_DisplayTerminal>:
 *
 * @return - void
 */

static void JDY09_DisplayTerminal(char *Msg)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	uint8_t Lenght = strlen(Msg);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff f93b 	bl	80001f4 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Lenght, JDY09_UART_TIMEOUET);
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <JDY09_DisplayTerminal+0x2c>)
 8000f8e:	f005 fa88 	bl	80064a2 <HAL_UART_Transmit>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000478 	.word	0x20000478

08000fa0 <JDY09_SendAndDisplayCmd>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[Command] - predefined command to send
 * @return - void
 */
static void JDY09_SendAndDisplayCmd(JDY09_t *jdy09, uint8_t *Command)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b095      	sub	sp, #84	; 0x54
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	uint8_t MsgRecieved[JDY09_RECIEVEBUFFERSIZE];

	//display send info on user display terminal
	JDY09_DisplayTerminal("Sending: ");
 8000faa:	481e      	ldr	r0, [pc, #120]	; (8001024 <JDY09_SendAndDisplayCmd+0x84>)
 8000fac:	f7ff ffe0 	bl	8000f70 <JDY09_DisplayTerminal>
	JDY09_DisplayTerminal((char*) Command);
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f7ff ffdd 	bl	8000f70 <JDY09_DisplayTerminal>

	//send data to JDY-09
	HAL_UART_Transmit(jdy09->huart, Command, strlen((char*) Command),
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681c      	ldr	r4, [r3, #0]
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f7ff f91a 	bl	80001f4 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f005 fa69 	bl	80064a2 <HAL_UART_Transmit>
	JDY09_UART_TIMEOUET);

	uint32_t responsetime = HAL_GetTick();
 8000fd0:	f001 fe62 	bl	8002c98 <HAL_GetTick>
 8000fd4:	64f8      	str	r0, [r7, #76]	; 0x4c
	//wait for response line


	while (jdy09->LinesRecieved == 0)
 8000fd6:	e00b      	b.n	8000ff0 <JDY09_SendAndDisplayCmd+0x50>
	{
		if (HAL_GetTick() - responsetime < JDY09_UART_TIMEOUET)
 8000fd8:	f001 fe5e 	bl	8002c98 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe6:	d303      	bcc.n	8000ff0 <JDY09_SendAndDisplayCmd+0x50>
		{
			// wait until timeout
		}
		else
		{
			JDY09_DisplayTerminal("No response, UART communication error\n\r");
 8000fe8:	480f      	ldr	r0, [pc, #60]	; (8001028 <JDY09_SendAndDisplayCmd+0x88>)
 8000fea:	f7ff ffc1 	bl	8000f70 <JDY09_DisplayTerminal>
 8000fee:	e016      	b.n	800101e <JDY09_SendAndDisplayCmd+0x7e>
	while (jdy09->LinesRecieved == 0)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0ed      	beq.n	8000fd8 <JDY09_SendAndDisplayCmd+0x38>
			return;
		}
	}

	//get message out of ring buffer
	JDY09_CheckPendingMessages(jdy09, MsgRecieved);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f922 	bl	800124c <JDY09_CheckPendingMessages>

	//display response
	JDY09_DisplayTerminal("Response: ");
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <JDY09_SendAndDisplayCmd+0x8c>)
 800100a:	f7ff ffb1 	bl	8000f70 <JDY09_DisplayTerminal>
	JDY09_DisplayTerminal((char*) MsgRecieved);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ffac 	bl	8000f70 <JDY09_DisplayTerminal>

	//clear message pending flag
	JDY09_ClearMsgPendingFlag(jdy09);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f909 	bl	8001230 <JDY09_ClearMsgPendingFlag>
}
 800101e:	3754      	adds	r7, #84	; 0x54
 8001020:	46bd      	mov	sp, r7
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	0800a580 	.word	0x0800a580
 8001028:	0800a58c 	.word	0x0800a58c
 800102c:	0800a5b4 	.word	0x0800a5b4

08001030 <JDY09_Init>:
 *
 * @return - void
 */
void JDY09_Init(JDY09_t *jdy09, UART_HandleTypeDef *huart,
		GPIO_TypeDef *StateGPIOPort, uint16_t StateGPIOPin)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	807b      	strh	r3, [r7, #2]

	// init msg
	JDY09_DisplayTerminal("JDY-09 Initializing... \n\r");
 800103e:	4822      	ldr	r0, [pc, #136]	; (80010c8 <JDY09_Init+0x98>)
 8001040:	f7ff ff96 	bl	8000f70 <JDY09_DisplayTerminal>

	// reset the ring buffer
	RB_Flush(&(jdy09->RingBuffer));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3346      	adds	r3, #70	; 0x46
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fdda 	bl	8001c02 <RB_Flush>

	// Assign uart
	jdy09->huart = huart;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	601a      	str	r2, [r3, #0]

	// Assign GPIO for State pin
	jdy09->StateGPIOPort = StateGPIOPort;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	jdy09->StatePinNumber = StateGPIOPin;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
	HAL_UART_Receive_IT(jdy09->huart, &(jdy09->RecieveBufferIT), 1);
#endif

	// if dma mode is used for receive
#if (JDY09_UART_RX_DMA == 1)
	HAL_UARTEx_ReceiveToIdle_DMA(jdy09->huart, jdy09->RecieveBufferDMA,
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3304      	adds	r3, #4
 800106c:	2240      	movs	r2, #64	; 0x40
 800106e:	4619      	mov	r1, r3
 8001070:	f005 faa9 	bl	80065c6 <HAL_UARTEx_ReceiveToIdle_DMA>
	JDY09_RECIEVEBUFFERSIZE);
	// to avoid callback from half message this has be disabled
	__HAL_DMA_DISABLE_IT(jdy09->huart->hdmarx, DMA_IT_HT);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0208 	bic.w	r2, r2, #8
 800108a:	601a      	str	r2, [r3, #0]
#endif

	// small delay before transmission
	HAL_Delay(100);
 800108c:	2064      	movs	r0, #100	; 0x64
 800108e:	f001 fe0f 	bl	8002cb0 <HAL_Delay>

	//during init - disconnect and display basic information
	JDY09_Disconnect(jdy09);
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f8ac 	bl	80011f0 <JDY09_Disconnect>

	//for some reason this msg will not work in DMA recieve mode
	//solution yet to find
	JDY09_SendCommand(jdy09, JDY09_CMD_GETVERSION);
 8001098:	2100      	movs	r1, #0
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 f816 	bl	80010cc <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETADRESS);
 80010a0:	2102      	movs	r1, #2
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f812 	bl	80010cc <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETBAUDRATE);
 80010a8:	2103      	movs	r1, #3
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 f80e 	bl	80010cc <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETNAME);
 80010b0:	2105      	movs	r1, #5
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f80a 	bl	80010cc <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETPASSWORD);
 80010b8:	2104      	movs	r1, #4
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 f806 	bl	80010cc <JDY09_SendCommand>
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	0800a5c0 	.word	0x0800a5c0

080010cc <JDY09_SendCommand>:
 * @param[Command] - predefined commands that are in .h file
 *
 * @return - void
 */
void JDY09_SendCommand(JDY09_t *jdy09, JDY09_CMD Command)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
	// check if there is no connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f002 fcbe 	bl	8003a68 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d138      	bne.n	8001164 <JDY09_SendCommand+0x98>
			== GPIO_PIN_RESET)
	{
		switch (Command)
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b06      	cmp	r3, #6
 80010f6:	d839      	bhi.n	800116c <JDY09_SendCommand+0xa0>
 80010f8:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <JDY09_SendCommand+0x34>)
 80010fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fe:	bf00      	nop
 8001100:	0800111d 	.word	0x0800111d
 8001104:	08001127 	.word	0x08001127
 8001108:	08001131 	.word	0x08001131
 800110c:	0800113b 	.word	0x0800113b
 8001110:	08001145 	.word	0x08001145
 8001114:	0800114f 	.word	0x0800114f
 8001118:	08001159 	.word	0x08001159
		{
		case JDY09_CMD_GETVERSION:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+VERSION\r\n");
 800111c:	4915      	ldr	r1, [pc, #84]	; (8001174 <JDY09_SendCommand+0xa8>)
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff3e 	bl	8000fa0 <JDY09_SendAndDisplayCmd>
			break;
 8001124:	e01d      	b.n	8001162 <JDY09_SendCommand+0x96>

		case JDY09_CMD_RESET:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+RESET\r\n");
 8001126:	4914      	ldr	r1, [pc, #80]	; (8001178 <JDY09_SendCommand+0xac>)
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff39 	bl	8000fa0 <JDY09_SendAndDisplayCmd>
			break;
 800112e:	e018      	b.n	8001162 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETADRESS:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+LADDR\r\n");
 8001130:	4912      	ldr	r1, [pc, #72]	; (800117c <JDY09_SendCommand+0xb0>)
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff34 	bl	8000fa0 <JDY09_SendAndDisplayCmd>
			break;
 8001138:	e013      	b.n	8001162 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETBAUDRATE:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+BAUD\r\n");
 800113a:	4911      	ldr	r1, [pc, #68]	; (8001180 <JDY09_SendCommand+0xb4>)
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff2f 	bl	8000fa0 <JDY09_SendAndDisplayCmd>
			break;
 8001142:	e00e      	b.n	8001162 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETPASSWORD:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+PIN\r\n");
 8001144:	490f      	ldr	r1, [pc, #60]	; (8001184 <JDY09_SendCommand+0xb8>)
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff2a 	bl	8000fa0 <JDY09_SendAndDisplayCmd>
			break;
 800114c:	e009      	b.n	8001162 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETNAME:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+NAME\r\n");
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <JDY09_SendCommand+0xbc>)
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff25 	bl	8000fa0 <JDY09_SendAndDisplayCmd>
			break;
 8001156:	e004      	b.n	8001162 <JDY09_SendCommand+0x96>

		case JDY09_CMD_SETDEFAULTSETTINGS:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+DEFAULT\r\n");
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <JDY09_SendCommand+0xc0>)
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff20 	bl	8000fa0 <JDY09_SendAndDisplayCmd>
			break;
 8001160:	bf00      	nop
		}
		return;
 8001162:	e003      	b.n	800116c <JDY09_SendCommand+0xa0>
	}

	// AT cmd error
	JDY09_DisplayTerminal("AT commands possible only in offline mode \n\r");
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <JDY09_SendCommand+0xc4>)
 8001166:	f7ff ff03 	bl	8000f70 <JDY09_DisplayTerminal>
 800116a:	e000      	b.n	800116e <JDY09_SendCommand+0xa2>
		return;
 800116c:	bf00      	nop

}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0800a5dc 	.word	0x0800a5dc
 8001178:	0800a5ec 	.word	0x0800a5ec
 800117c:	0800a5f8 	.word	0x0800a5f8
 8001180:	0800a604 	.word	0x0800a604
 8001184:	0800a610 	.word	0x0800a610
 8001188:	0800a61c 	.word	0x0800a61c
 800118c:	0800a628 	.word	0x0800a628
 8001190:	0800a638 	.word	0x0800a638

08001194 <JDY09_SendData>:
 * @param[Data] - data to send to device
 *
 * @return - void
 */
void JDY09_SendData(JDY09_t *jdy09, uint8_t *Data)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	// check if there is a connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f002 fc5b 	bl	8003a68 <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d110      	bne.n	80011da <JDY09_SendData+0x46>
			== GPIO_PIN_SET)
	{
		// send array of bytes to external device
		HAL_UART_Transmit(jdy09->huart, Data, strlen((char*) Data),
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681c      	ldr	r4, [r3, #0]
 80011bc:	6838      	ldr	r0, [r7, #0]
 80011be:	f7ff f819 	bl	80001f4 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	6839      	ldr	r1, [r7, #0]
 80011cc:	4620      	mov	r0, r4
 80011ce:	f005 f968 	bl	80064a2 <HAL_UART_Transmit>
		JDY09_UART_TIMEOUET);

		JDY09_DisplayTerminal(
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <JDY09_SendData+0x54>)
 80011d4:	f7ff fecc 	bl	8000f70 <JDY09_DisplayTerminal>
				"Data transfer from JDY-09 to external device completed \n\r");

		return;
 80011d8:	e002      	b.n	80011e0 <JDY09_SendData+0x4c>
	}

	// AT cmd error
	JDY09_DisplayTerminal("Send data possible only in online mode \n\r");
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <JDY09_SendData+0x58>)
 80011dc:	f7ff fec8 	bl	8000f70 <JDY09_DisplayTerminal>

}
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800a668 	.word	0x0800a668
 80011ec:	0800a6a4 	.word	0x0800a6a4

080011f0 <JDY09_Disconnect>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_Disconnect(JDY09_t *jdy09)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	//check connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8001204:	4619      	mov	r1, r3
 8001206:	4610      	mov	r0, r2
 8001208:	f002 fc2e 	bl	8003a68 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d104      	bne.n	800121c <JDY09_Disconnect+0x2c>
			== GPIO_PIN_SET)
	{
		// disconnect
		JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+DISC\r\n");
 8001212:	4905      	ldr	r1, [pc, #20]	; (8001228 <JDY09_Disconnect+0x38>)
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fec3 	bl	8000fa0 <JDY09_SendAndDisplayCmd>
		return;
 800121a:	e002      	b.n	8001222 <JDY09_Disconnect+0x32>
	}

	// AT cmd error
	JDY09_DisplayTerminal("Module already disconnected \n\r");
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <JDY09_Disconnect+0x3c>)
 800121e:	f7ff fea7 	bl	8000f70 <JDY09_DisplayTerminal>
}
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	0800a6d0 	.word	0x0800a6d0
 800122c:	0800a6dc 	.word	0x0800a6dc

08001230 <JDY09_ClearMsgPendingFlag>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_ClearMsgPendingFlag(JDY09_t *jdy09)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	jdy09->MessagePending = JDY09_NOMESSAGE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <JDY09_CheckPendingMessages>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[*MsgBuffer] - pointer to buffer where message has to be written
 * @return - status : massage pending 1/0
 */
uint8_t JDY09_CheckPendingMessages(JDY09_t *jdy09, uint8_t *MsgBuffer)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]

	// Check if there is message finished
	if (jdy09->LinesRecieved > 0)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d032      	beq.n	80012c8 <JDY09_CheckPendingMessages+0x7c>
	{

		uint8_t i = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
		uint8_t temp = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	73bb      	strb	r3, [r7, #14]
		do
		{
			// Move a sign to ring buffer
			RB_Read(&(jdy09->RingBuffer), &temp);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3346      	adds	r3, #70	; 0x46
 800126e:	f107 020e 	add.w	r2, r7, #14
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fc6b 	bl	8001b50 <RB_Read>
			if (temp == JDY09_LASTCHARACTER)
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	2b0a      	cmp	r3, #10
 800127e:	d10b      	bne.n	8001298 <JDY09_CheckPendingMessages+0x4c>
			{
				MsgBuffer[i] = JDY09_LASTCHARACTER;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	220a      	movs	r2, #10
 8001288:	701a      	strb	r2, [r3, #0]
				MsgBuffer[i + 1] = 0;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	3301      	adds	r3, #1
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	4413      	add	r3, r2
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
 8001296:	e004      	b.n	80012a2 <JDY09_CheckPendingMessages+0x56>
			}
			else
			{
				MsgBuffer[i] = temp;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4413      	add	r3, r2
 800129e:	7bba      	ldrb	r2, [r7, #14]
 80012a0:	701a      	strb	r2, [r3, #0]
			}
			i++;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	3301      	adds	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
			//rewrite signs until last character defined by user
		} while (temp != JDY09_LASTCHARACTER);
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	2b0a      	cmp	r3, #10
 80012ac:	d1dd      	bne.n	800126a <JDY09_CheckPendingMessages+0x1e>
		//decrement LinesRecieved
		jdy09->LinesRecieved--;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		//set up flag that message is ready to parse
		jdy09->MessagePending = JDY09_MESSAGEPENDING;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	}

	// return if flag status
	return jdy09->MessagePending;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <JDY09_RxCpltCallbackDMA>:
 * @return - void
 */
#if (JDY09_UART_RX_DMA == 1)
void JDY09_RxCpltCallbackDMA(JDY09_t *jdy09, UART_HandleTypeDef *huart,
		uint16_t size)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	4613      	mov	r3, r2
 80012e4:	80fb      	strh	r3, [r7, #6]

	//check if IRQ is coming from correct uart
	if (jdy09->huart->Instance == huart->Instance)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d143      	bne.n	800137c <JDY09_RxCpltCallbackDMA+0xa4>
	{

		uint8_t i;
		uint8_t newlines = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	75bb      	strb	r3, [r7, #22]
		//write message to ring buffer
		for (i = 0; i < size; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	e015      	b.n	800132a <JDY09_RxCpltCallbackDMA+0x52>
		{
			RB_Write((&(jdy09->RingBuffer)), jdy09->RecieveBufferDMA[i]);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	4619      	mov	r1, r3
 800130e:	f000 fc4c 	bl	8001baa <RB_Write>

			// when line is complete -> add 1 to received lines
			// only when last char is \n
			if (jdy09->RecieveBufferDMA[i] == JDY09_LASTCHARACTER)
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	791b      	ldrb	r3, [r3, #4]
 800131a:	2b0a      	cmp	r3, #10
 800131c:	d102      	bne.n	8001324 <JDY09_RxCpltCallbackDMA+0x4c>
			{
				newlines++;
 800131e:	7dbb      	ldrb	r3, [r7, #22]
 8001320:	3301      	adds	r3, #1
 8001322:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < size; i++)
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	3301      	adds	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	b29b      	uxth	r3, r3
 800132e:	88fa      	ldrh	r2, [r7, #6]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8e4      	bhi.n	80012fe <JDY09_RxCpltCallbackDMA+0x26>
			}
		}

		if (newlines == 0)
 8001334:	7dbb      	ldrb	r3, [r7, #22]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d108      	bne.n	800134c <JDY09_RxCpltCallbackDMA+0x74>
		{
			// if formt of data is not correct print msg
			JDY09_SendData(jdy09,
 800133a:	4912      	ldr	r1, [pc, #72]	; (8001384 <JDY09_RxCpltCallbackDMA+0xac>)
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7ff ff29 	bl	8001194 <JDY09_SendData>
					(uint8_t*) "Error, message has to be finished with +LF \n\r");

			//flush ringbuffer to not send later trash data
			RB_Flush(&(jdy09->RingBuffer));
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3346      	adds	r3, #70	; 0x46
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fc5b 	bl	8001c02 <RB_Flush>
		}

		// add new lines
		jdy09->LinesRecieved = +newlines;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	7dba      	ldrb	r2, [r7, #22]
 8001350:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca

		// start another IRQ for single sign
		HAL_UARTEx_ReceiveToIdle_DMA(jdy09->huart, jdy09->RecieveBufferDMA,
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3304      	adds	r3, #4
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	4619      	mov	r1, r3
 8001360:	f005 f931 	bl	80065c6 <HAL_UARTEx_ReceiveToIdle_DMA>
		JDY09_RECIEVEBUFFERSIZE);
		// to avoid callback from half message this has be disabled
		__HAL_DMA_DISABLE_IT(jdy09->huart->hdmarx, DMA_IT_HT);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0208 	bic.w	r2, r2, #8
 800137a:	601a      	str	r2, [r3, #0]
	}
}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	0800a7d0 	.word	0x0800a7d0

08001388 <JDY09_EXTICallback>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[GPIO_Pin] - pin number from EXTI
 * @return - void
 */
void JDY09_EXTICallback(JDY09_t *jdy09, uint16_t GPIO_Pin)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]

	//check if IRQ is coming from STATE pin
	if (jdy09->StatePinNumber == GPIO_Pin)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	429a      	cmp	r2, r3
 800139e:	d112      	bne.n	80013c6 <JDY09_EXTICallback+0x3e>
	{
		// if trigger is caused by rising edge then new connection is made
		if (HAL_GPIO_ReadPin(BT_STATE_GPIO_Port, BT_STATE_Pin) == GPIO_PIN_SET)
 80013a0:	2108      	movs	r1, #8
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <JDY09_EXTICallback+0x48>)
 80013a4:	f002 fb60 	bl	8003a68 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d103      	bne.n	80013b6 <JDY09_EXTICallback+0x2e>
		{
			JDY09_DisplayTerminal("Device connected \n\r");
 80013ae:	4809      	ldr	r0, [pc, #36]	; (80013d4 <JDY09_EXTICallback+0x4c>)
 80013b0:	f7ff fdde 	bl	8000f70 <JDY09_DisplayTerminal>
 80013b4:	e002      	b.n	80013bc <JDY09_EXTICallback+0x34>
		}
		else
		// if trigger is from falling edge then msg disconnect
		{
			JDY09_DisplayTerminal("Device disconnected \n\r");
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <JDY09_EXTICallback+0x50>)
 80013b8:	f7ff fdda 	bl	8000f70 <JDY09_DisplayTerminal>
		}

		// clear ring buffer if device is connected/disconnected
		RB_Flush(&(jdy09->RingBuffer));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3346      	adds	r3, #70	; 0x46
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fc1e 	bl	8001c02 <RB_Flush>
	}
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40020800 	.word	0x40020800
 80013d4:	0800a800 	.word	0x0800a800
 80013d8:	0800a814 	.word	0x0800a814

080013dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_DMA_Init+0x30>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <MX_DMA_Init+0x30>)
 80013ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_DMA_Init+0x30>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <MX_GPIO_Init+0x12c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a43      	ldr	r2, [pc, #268]	; (800153c <MX_GPIO_Init+0x12c>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <MX_GPIO_Init+0x12c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <MX_GPIO_Init+0x12c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a3c      	ldr	r2, [pc, #240]	; (800153c <MX_GPIO_Init+0x12c>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <MX_GPIO_Init+0x12c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <MX_GPIO_Init+0x12c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a35      	ldr	r2, [pc, #212]	; (800153c <MX_GPIO_Init+0x12c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <MX_GPIO_Init+0x12c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <MX_GPIO_Init+0x12c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a2e      	ldr	r2, [pc, #184]	; (800153c <MX_GPIO_Init+0x12c>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_GPIO_Init+0x12c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TM1637_CLK_Pin|TM1637_DIO_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2106      	movs	r1, #6
 800149a:	4829      	ldr	r0, [pc, #164]	; (8001540 <MX_GPIO_Init+0x130>)
 800149c:	f002 fafc 	bl	8003a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2120      	movs	r1, #32
 80014a4:	4827      	ldr	r0, [pc, #156]	; (8001544 <MX_GPIO_Init+0x134>)
 80014a6:	f002 faf7 	bl	8003a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	481f      	ldr	r0, [pc, #124]	; (8001540 <MX_GPIO_Init+0x130>)
 80014c2:	f002 f94d 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TM1637_CLK_Pin|TM1637_DIO_Pin;
 80014c6:	2306      	movs	r3, #6
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4818      	ldr	r0, [pc, #96]	; (8001540 <MX_GPIO_Init+0x130>)
 80014de:	f002 f93f 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_STATE_Pin;
 80014e2:	2308      	movs	r3, #8
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014e6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_STATE_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4812      	ldr	r0, [pc, #72]	; (8001540 <MX_GPIO_Init+0x130>)
 80014f8:	f002 f932 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014fc:	2320      	movs	r3, #32
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_GPIO_Init+0x134>)
 8001514:	f002 f924 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TMP102_ALERT_Pin;
 8001518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMP102_ALERT_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_GPIO_Init+0x138>)
 800152e:	f002 f917 	bl	8003760 <HAL_GPIO_Init>

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40020800 	.word	0x40020800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400

0800154c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_I2C1_Init+0x50>)
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <MX_I2C1_Init+0x54>)
 8001554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_I2C1_Init+0x50>)
 8001558:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_I2C1_Init+0x58>)
 800155a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_I2C1_Init+0x50>)
 800156a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_I2C1_Init+0x50>)
 800158a:	f002 fab7 	bl	8003afc <HAL_I2C_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001594:	f000 f988 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000204 	.word	0x20000204
 80015a0:	40005400 	.word	0x40005400
 80015a4:	000186a0 	.word	0x000186a0

080015a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_I2C_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12b      	bne.n	8001622 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e6:	23c0      	movs	r3, #192	; 0xc0
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ea:	2312      	movs	r3, #18
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f6:	2304      	movs	r3, #4
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <HAL_I2C_MspInit+0x8c>)
 8001602:	f002 f8ad 	bl	8003760 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_I2C_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_I2C_MspInit+0x88>)
 8001610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_I2C_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40005400 	.word	0x40005400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020400 	.word	0x40020400

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163c:	f001 fac6 	bl	8002bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001640:	f000 f868 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001644:	f7ff fee4 	bl	8001410 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001648:	f001 f94a 	bl	80028e0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800164c:	f7ff fec6 	bl	80013dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001650:	f001 f91c 	bl	800288c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001654:	f7ff ff7a 	bl	800154c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001658:	f000 fe2e 	bl	80022b8 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800165c:	f000 f8c6 	bl	80017ec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	I2CScan(&hi2c1);
 8001660:	4822      	ldr	r0, [pc, #136]	; (80016ec <main+0xb4>)
 8001662:	f001 fa15 	bl	8002a90 <I2CScan>
	JDY09_Init(&JDY09_1, &huart1, BT_STATE_GPIO_Port, BT_STATE_Pin);
 8001666:	2308      	movs	r3, #8
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <main+0xb8>)
 800166a:	4922      	ldr	r1, [pc, #136]	; (80016f4 <main+0xbc>)
 800166c:	4822      	ldr	r0, [pc, #136]	; (80016f8 <main+0xc0>)
 800166e:	f7ff fcdf 	bl	8001030 <JDY09_Init>
	TMP102Init(&TMP102_1, &hi2c1, TMP102_ADDRESS);
 8001672:	2248      	movs	r2, #72	; 0x48
 8001674:	491d      	ldr	r1, [pc, #116]	; (80016ec <main+0xb4>)
 8001676:	4821      	ldr	r0, [pc, #132]	; (80016fc <main+0xc4>)
 8001678:	f001 f8e2 	bl	8002840 <TMP102Init>
	tm1637Init();
 800167c:	f000 fad4 	bl	8001c28 <tm1637Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// check if there is msg - if yes transfer it to a buffer
		if (JDY09_CheckPendingMessages(&JDY09_1, TransferBuffer) == JDY09_MESSAGEPENDING)
 8001680:	491f      	ldr	r1, [pc, #124]	; (8001700 <main+0xc8>)
 8001682:	481d      	ldr	r0, [pc, #116]	; (80016f8 <main+0xc0>)
 8001684:	f7ff fde2 	bl	800124c <JDY09_CheckPendingMessages>
 8001688:	4603      	mov	r3, r0
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10a      	bne.n	80016a4 <main+0x6c>
		{
			//clear pending flag
			JDY09_ClearMsgPendingFlag(&JDY09_1);
 800168e:	481a      	ldr	r0, [pc, #104]	; (80016f8 <main+0xc0>)
 8001690:	f7ff fdce 	bl	8001230 <JDY09_ClearMsgPendingFlag>

			//parse msg
			ParseStatus = Parser_Parse(TransferBuffer, &TMP102_1);
 8001694:	4919      	ldr	r1, [pc, #100]	; (80016fc <main+0xc4>)
 8001696:	481a      	ldr	r0, [pc, #104]	; (8001700 <main+0xc8>)
 8001698:	f000 f9ac 	bl	80019f4 <Parser_Parse>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <main+0xcc>)
 80016a2:	701a      	strb	r2, [r3, #0]
		}

		//every 1 second make a display (delay 10ms)
		if(TimerCount10ms % 10 == 1)
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <main+0xd0>)
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <main+0xd4>)
 80016aa:	fba3 2301 	umull	r2, r3, r3, r1
 80016ae:	08da      	lsrs	r2, r3, #3
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	1aca      	subs	r2, r1, r3
 80016ba:	2a01      	cmp	r2, #1
 80016bc:	d108      	bne.n	80016d0 <main+0x98>
		{
			tm1637DisplayFloat(TMP102GetTempFloat(&TMP102_1));
 80016be:	480f      	ldr	r0, [pc, #60]	; (80016fc <main+0xc4>)
 80016c0:	f000 ff48 	bl	8002554 <TMP102GetTempFloat>
 80016c4:	eef0 7a40 	vmov.f32	s15, s0
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	f000 faf4 	bl	8001cb8 <tm1637DisplayFloat>
		}

		// after one minute stop timer
		if(TimerCount10ms > (10 * 60) +1)
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <main+0xd0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f240 2259 	movw	r2, #601	; 0x259
 80016d8:	4293      	cmp	r3, r2
 80016da:	d9d1      	bls.n	8001680 <main+0x48>
		{
			// turn off timer
			HAL_TIM_Base_Stop_IT(&htim1);
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <main+0xd8>)
 80016de:	f004 f83d 	bl	800575c <HAL_TIM_Base_Stop_IT>
			// turn of mosfet power to display
			// reset timer
			TimerCount10ms = 0;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <main+0xd0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
		if (JDY09_CheckPendingMessages(&JDY09_1, TransferBuffer) == JDY09_MESSAGEPENDING)
 80016e8:	e7ca      	b.n	8001680 <main+0x48>
 80016ea:	bf00      	nop
 80016ec:	20000204 	.word	0x20000204
 80016f0:	40020800 	.word	0x40020800
 80016f4:	20000434 	.word	0x20000434
 80016f8:	20000274 	.word	0x20000274
 80016fc:	20000260 	.word	0x20000260
 8001700:	2000034c 	.word	0x2000034c
 8001704:	20000258 	.word	0x20000258
 8001708:	20000348 	.word	0x20000348
 800170c:	cccccccd 	.word	0xcccccccd
 8001710:	2000038c 	.word	0x2000038c

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b094      	sub	sp, #80	; 0x50
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	2230      	movs	r2, #48	; 0x30
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f006 f81e 	bl	8007764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <SystemClock_Config+0xd0>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a28      	ldr	r2, [pc, #160]	; (80017e4 <SystemClock_Config+0xd0>)
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <SystemClock_Config+0xd0>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <SystemClock_Config+0xd4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001760:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <SystemClock_Config+0xd4>)
 8001762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <SystemClock_Config+0xd4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001774:	2302      	movs	r3, #2
 8001776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001778:	2301      	movs	r3, #1
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177c:	2310      	movs	r3, #16
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001780:	2302      	movs	r3, #2
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001784:	2300      	movs	r3, #0
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001788:	2310      	movs	r3, #16
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800178c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001790:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001792:	2304      	movs	r3, #4
 8001794:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001796:	2307      	movs	r3, #7
 8001798:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 fab6 	bl	8004d10 <HAL_RCC_OscConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017aa:	f000 f87d 	bl	80018a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ae:	230f      	movs	r3, #15
 80017b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b2:	2302      	movs	r3, #2
 80017b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2102      	movs	r1, #2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 fd18 	bl	8005200 <HAL_RCC_ClockConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017d6:	f000 f867 	bl	80018a8 <Error_Handler>
  }
}
 80017da:	bf00      	nop
 80017dc:	3750      	adds	r7, #80	; 0x50
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000

080017ec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2100      	movs	r1, #0
 80017f4:	2009      	movs	r0, #9
 80017f6:	f001 fb7a 	bl	8002eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017fa:	2009      	movs	r0, #9
 80017fc:	f001 fb93 	bl	8002f26 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	2025      	movs	r0, #37	; 0x25
 8001806:	f001 fb72 	bl	8002eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800180a:	2025      	movs	r0, #37	; 0x25
 800180c:	f001 fb8b 	bl	8002f26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	203a      	movs	r0, #58	; 0x3a
 8001816:	f001 fb6a 	bl	8002eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800181a:	203a      	movs	r0, #58	; 0x3a
 800181c:	f001 fb83 	bl	8002f26 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2019      	movs	r0, #25
 8001826:	f001 fb62 	bl	8002eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800182a:	2019      	movs	r0, #25
 800182c:	f001 fb7b 	bl	8002f26 <HAL_NVIC_EnableIRQ>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_UARTEx_RxEventCallback>:
}
#endif

#if (JDY09_UART_RX_DMA == 1)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
	// Callback from BT module
	JDY09_RxCpltCallbackDMA(&JDY09_1, huart, Size);
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	461a      	mov	r2, r3
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4803      	ldr	r0, [pc, #12]	; (8001854 <HAL_UARTEx_RxEventCallback+0x20>)
 8001848:	f7ff fd46 	bl	80012d8 <JDY09_RxCpltCallbackDMA>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000274 	.word	0x20000274

08001858 <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
	// Callback from EXTI
	JDY09_EXTICallback(&JDY09_1, GPIO_Pin);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4619      	mov	r1, r3
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001868:	f7ff fd8e 	bl	8001388 <JDY09_EXTICallback>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000274 	.word	0x20000274

08001878 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d104      	bne.n	8001894 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		TimerCount10ms++;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001892:	6013      	str	r3, [r2, #0]
	}
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40010000 	.word	0x40010000
 80018a4:	20000348 	.word	0x20000348

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018b0:	e7fe      	b.n	80018b0 <Error_Handler+0x8>
	...

080018b4 <Parser_DisplayTerminal>:
#include "parse.h"

extern volatile uint32_t TimerCount10ms;

void Parser_DisplayTerminal(char *Msg)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	uint8_t Lenght = strlen(Msg);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7fe fc99 	bl	80001f4 <strlen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) Msg, Lenght, 1000);
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <Parser_DisplayTerminal+0x2c>)
 80018d2:	f004 fde6 	bl	80064a2 <HAL_UART_Transmit>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000434 	.word	0x20000434

080018e4 <Parser_WAKEUP>:

/*
 * @ WAKE UP procedure
 */
static void Parser_WAKEUP(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	//wake up for 5 mins
	Parser_DisplayTerminal("System wake up\n\r");
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <Parser_WAKEUP+0x10>)
 80018ea:	f7ff ffe3 	bl	80018b4 <Parser_DisplayTerminal>

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	0800a82c 	.word	0x0800a82c

080018f8 <Parser_MEASURE>:

/*
 * @ MEASURE procedure
 */
static void Parser_MEASURE(TMP102_t *TMP102)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	// send log to uart
	Parser_DisplayTerminal("Measurment done :");
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <Parser_MEASURE+0x40>)
 8001902:	f7ff ffd7 	bl	80018b4 <Parser_DisplayTerminal>


	uint8_t Msg[32];
#if (TMP102_USE_FLOATNUMBERS == 1)
	float temperature;
	temperature = TMP102GetTempFloat(TMP102);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fe24 	bl	8002554 <TMP102GetTempFloat>
 800190c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	sprintf((char*)Msg, " %2.2f deg C\n\r",temperature);
 8001910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001912:	f7fe fe31 	bl	8000578 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	f107 000c 	add.w	r0, r7, #12
 800191e:	4907      	ldr	r1, [pc, #28]	; (800193c <Parser_MEASURE+0x44>)
 8001920:	f006 fb92 	bl	8008048 <siprintf>
	sprintf((char*)Msg, " %d.0%d deg C\n\r",TempBuffer[0],TempBuffer[1]);
	}

#endif

	Parser_DisplayTerminal((char*)Msg);
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ffc3 	bl	80018b4 <Parser_DisplayTerminal>
	return;
 800192e:	bf00      	nop

	//bluetooth send to master
}
 8001930:	3730      	adds	r7, #48	; 0x30
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	0800a840 	.word	0x0800a840
 800193c:	0800a854 	.word	0x0800a854

08001940 <Parser_DISPLAY>:

/*
 * @ DISPLAY procedure
 */
static void Parser_DISPLAY(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	// send log to uart
	Parser_DisplayTerminal("Temperature displayed for 1 minute \n\r");
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <Parser_DISPLAY+0x1c>)
 8001946:	f7ff ffb5 	bl	80018b4 <Parser_DisplayTerminal>

	// start timer
	TimerCount10ms = 0;
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <Parser_DISPLAY+0x20>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 8001950:	4804      	ldr	r0, [pc, #16]	; (8001964 <Parser_DISPLAY+0x24>)
 8001952:	f003 fea1 	bl	8005698 <HAL_TIM_Base_Start_IT>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	0800a864 	.word	0x0800a864
 8001960:	20000348 	.word	0x20000348
 8001964:	2000038c 	.word	0x2000038c

08001968 <Parser_HELP>:

static void Parser_HELP(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	// send log to uart
	Parser_DisplayTerminal("WAKEUP; - wake up from sleep mode \n\r");
 800196c:	4808      	ldr	r0, [pc, #32]	; (8001990 <Parser_HELP+0x28>)
 800196e:	f7ff ffa1 	bl	80018b4 <Parser_DisplayTerminal>
	Parser_DisplayTerminal("MEASURE; - measure and send to terminal \n\r");
 8001972:	4808      	ldr	r0, [pc, #32]	; (8001994 <Parser_HELP+0x2c>)
 8001974:	f7ff ff9e 	bl	80018b4 <Parser_DisplayTerminal>
	Parser_DisplayTerminal("DISPLAY; - start measuring and display on 8segment \n\r");
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <Parser_HELP+0x30>)
 800197a:	f7ff ff9b 	bl	80018b4 <Parser_DisplayTerminal>
	Parser_DisplayTerminal("SLEEP; - enter sleep mode \n\r");
 800197e:	4807      	ldr	r0, [pc, #28]	; (800199c <Parser_HELP+0x34>)
 8001980:	f7ff ff98 	bl	80018b4 <Parser_DisplayTerminal>
	Parser_DisplayTerminal("HELP; - print all commands \n\r");
 8001984:	4806      	ldr	r0, [pc, #24]	; (80019a0 <Parser_HELP+0x38>)
 8001986:	f7ff ff95 	bl	80018b4 <Parser_DisplayTerminal>

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	0800a88c 	.word	0x0800a88c
 8001994:	0800a8b4 	.word	0x0800a8b4
 8001998:	0800a8e0 	.word	0x0800a8e0
 800199c:	0800a918 	.word	0x0800a918
 80019a0:	0800a938 	.word	0x0800a938

080019a4 <Parser_SLEEP>:

/*
 * @ SLEEP procedure
 */
static void Parser_SLEEP(uint8_t *ParseBuffer)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	//execute sleep

	//stop timer
	HAL_TIM_Base_Stop_IT(&htim1);
 80019ac:	480e      	ldr	r0, [pc, #56]	; (80019e8 <Parser_SLEEP+0x44>)
 80019ae:	f003 fed5 	bl	800575c <HAL_TIM_Base_Stop_IT>

	//delete all the commands after SLEEP
	memset(ParseBuffer,0,(sizeof(ParseBuffer)));
 80019b2:	2204      	movs	r2, #4
 80019b4:	2100      	movs	r1, #0
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f005 fed4 	bl	8007764 <memset>

	//send log on uart
	Parser_DisplayTerminal("Entering sleep mode\n\r");
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <Parser_SLEEP+0x48>)
 80019be:	f7ff ff79 	bl	80018b4 <Parser_DisplayTerminal>

	//stop hal tick
	HAL_SuspendTick();
 80019c2:	f001 f999 	bl	8002cf8 <HAL_SuspendTick>

	//enter sleep mode -> it will wait for IRQ to wake up
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80019c6:	2101      	movs	r1, #1
 80019c8:	2000      	movs	r0, #0
 80019ca:	f003 f985 	bl	8004cd8 <HAL_PWR_EnterSLEEPMode>

	//after wake up continue tick
	HAL_ResumeTick();
 80019ce:	f001 f9a3 	bl	8002d18 <HAL_ResumeTick>

	//send log on uart
	Parser_DisplayTerminal("Waking up...\n\r");
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <Parser_SLEEP+0x4c>)
 80019d4:	f7ff ff6e 	bl	80018b4 <Parser_DisplayTerminal>

	//start count down for going back to sleep
	HAL_TIM_Base_Start_IT(&htim1);
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <Parser_SLEEP+0x44>)
 80019da:	f003 fe5d 	bl	8005698 <HAL_TIM_Base_Start_IT>

}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000038c 	.word	0x2000038c
 80019ec:	0800a958 	.word	0x0800a958
 80019f0:	0800a970 	.word	0x0800a970

080019f4 <Parser_Parse>:
/*
 * @ function parse message and start command procedures
 */

uint8_t Parser_Parse(uint8_t *ParseBuffer, TMP102_t *TMP102)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
	// Count how many commands we have to parse
	uint8_t cmd_count = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	77fb      	strb	r3, [r7, #31]
	uint8_t i = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	77bb      	strb	r3, [r7, #30]
	uint8_t LastCommand[16] =  {0};
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]

	// For every semicolon count up until EOL
	do
	{
		if (ParseBuffer[i] == ';')
 8001a16:	7fbb      	ldrb	r3, [r7, #30]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b3b      	cmp	r3, #59	; 0x3b
 8001a20:	d102      	bne.n	8001a28 <Parser_Parse+0x34>
		{
			cmd_count++;
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
 8001a24:	3301      	adds	r3, #1
 8001a26:	77fb      	strb	r3, [r7, #31]
		}
		i++;
 8001a28:	7fbb      	ldrb	r3, [r7, #30]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	77bb      	strb	r3, [r7, #30]
	} while (ParseBuffer[i] != '\n');
 8001a2e:	7fbb      	ldrb	r3, [r7, #30]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b0a      	cmp	r3, #10
 8001a38:	d1ed      	bne.n	8001a16 <Parser_Parse+0x22>


	// if there is no msg that we want to parse then just send it

	if (cmd_count == 0)
 8001a3a:	7ffb      	ldrb	r3, [r7, #31]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d107      	bne.n	8001a50 <Parser_Parse+0x5c>
	{
		Parser_DisplayTerminal("Message received :");
 8001a40:	483a      	ldr	r0, [pc, #232]	; (8001b2c <Parser_Parse+0x138>)
 8001a42:	f7ff ff37 	bl	80018b4 <Parser_DisplayTerminal>
		Parser_DisplayTerminal((char*)ParseBuffer);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff34 	bl	80018b4 <Parser_DisplayTerminal>
		// return ERROR
		return PARSE_ERROR_NOCMD;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e068      	b.n	8001b22 <Parser_Parse+0x12e>


	uint8_t *ParsePointer;

	// Execute cmd_count number of commands
	for (i = 0; i < cmd_count; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	77bb      	strb	r3, [r7, #30]
 8001a54:	e060      	b.n	8001b18 <Parser_Parse+0x124>
	{

		// cut command from the message -> from beginning to ;
		//if first msg start from beginning
		if(i == 0)
 8001a56:	7fbb      	ldrb	r3, [r7, #30]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <Parser_Parse+0x74>
		{
			ParsePointer = (uint8_t*)(strtok((char*)ParseBuffer, ";"));
 8001a5c:	4934      	ldr	r1, [pc, #208]	; (8001b30 <Parser_Parse+0x13c>)
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f006 fb1a 	bl	8008098 <strtok>
 8001a64:	61b8      	str	r0, [r7, #24]
 8001a66:	e004      	b.n	8001a72 <Parser_Parse+0x7e>

		}else
		{
			ParsePointer = (uint8_t*)(strtok(NULL, ";"));
 8001a68:	4931      	ldr	r1, [pc, #196]	; (8001b30 <Parser_Parse+0x13c>)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f006 fb14 	bl	8008098 <strtok>
 8001a70:	61b8      	str	r0, [r7, #24]
		}


		// if you put two same commands in a row - error
		if(strcmp((char*)ParsePointer,(char*)LastCommand) == 0)
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	4619      	mov	r1, r3
 8001a78:	69b8      	ldr	r0, [r7, #24]
 8001a7a:	f7fe fbb1 	bl	80001e0 <strcmp>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <Parser_Parse+0x9a>
		{
			Parser_DisplayTerminal("Error, same command twice in a row!\n\r");
 8001a84:	482b      	ldr	r0, [pc, #172]	; (8001b34 <Parser_Parse+0x140>)
 8001a86:	f7ff ff15 	bl	80018b4 <Parser_DisplayTerminal>
			return PARSE_ERROR_2CMDS;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e049      	b.n	8001b22 <Parser_Parse+0x12e>
		/*
		 * EXECUTE COMMANDS
		 */

		// do WAKE_UP
		if (strcmp("WAKEUP", (char*)ParsePointer) == 0)
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	4829      	ldr	r0, [pc, #164]	; (8001b38 <Parser_Parse+0x144>)
 8001a92:	f7fe fba5 	bl	80001e0 <strcmp>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <Parser_Parse+0xae>
		{
			Parser_WAKEUP();
 8001a9c:	f7ff ff22 	bl	80018e4 <Parser_WAKEUP>
 8001aa0:	e031      	b.n	8001b06 <Parser_Parse+0x112>
		}
		// do MEASURE
		else if (strcmp("MEASURE", (char*)ParsePointer) == 0)
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	4825      	ldr	r0, [pc, #148]	; (8001b3c <Parser_Parse+0x148>)
 8001aa6:	f7fe fb9b 	bl	80001e0 <strcmp>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <Parser_Parse+0xc4>
		{
			Parser_MEASURE(TMP102);
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f7ff ff21 	bl	80018f8 <Parser_MEASURE>
 8001ab6:	e026      	b.n	8001b06 <Parser_Parse+0x112>
		}
		// do DISPLAY
		else if (strcmp("DISPLAY", (char*)ParsePointer) == 0)
 8001ab8:	69b9      	ldr	r1, [r7, #24]
 8001aba:	4821      	ldr	r0, [pc, #132]	; (8001b40 <Parser_Parse+0x14c>)
 8001abc:	f7fe fb90 	bl	80001e0 <strcmp>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <Parser_Parse+0xd8>
		{
			Parser_DISPLAY();
 8001ac6:	f7ff ff3b 	bl	8001940 <Parser_DISPLAY>
 8001aca:	e01c      	b.n	8001b06 <Parser_Parse+0x112>
		}
		//do help
		else if (strcmp("HELP", (char*)ParsePointer) == 0)
 8001acc:	69b9      	ldr	r1, [r7, #24]
 8001ace:	481d      	ldr	r0, [pc, #116]	; (8001b44 <Parser_Parse+0x150>)
 8001ad0:	f7fe fb86 	bl	80001e0 <strcmp>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <Parser_Parse+0xec>
		{
			Parser_HELP();
 8001ada:	f7ff ff45 	bl	8001968 <Parser_HELP>
 8001ade:	e012      	b.n	8001b06 <Parser_Parse+0x112>
		}
		// do SLEEP
		else if (strcmp("SLEEP", (char*)ParsePointer) == 0)
 8001ae0:	69b9      	ldr	r1, [r7, #24]
 8001ae2:	4819      	ldr	r0, [pc, #100]	; (8001b48 <Parser_Parse+0x154>)
 8001ae4:	f7fe fb7c 	bl	80001e0 <strcmp>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d104      	bne.n	8001af8 <Parser_Parse+0x104>
		{
			Parser_SLEEP(ParsePointer);
 8001aee:	69b8      	ldr	r0, [r7, #24]
 8001af0:	f7ff ff58 	bl	80019a4 <Parser_SLEEP>
			return PARSE_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e014      	b.n	8001b22 <Parser_Parse+0x12e>
		}
		else
		{
			Parser_DisplayTerminal("Commmand unknown \n\r");
 8001af8:	4814      	ldr	r0, [pc, #80]	; (8001b4c <Parser_Parse+0x158>)
 8001afa:	f7ff fedb 	bl	80018b4 <Parser_DisplayTerminal>
			Parser_HELP();
 8001afe:	f7ff ff33 	bl	8001968 <Parser_HELP>
			return PARSE_ERROR_NOCMD;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00d      	b.n	8001b22 <Parser_Parse+0x12e>
		}

		strcpy((char*)LastCommand,(char*)ParsePointer);
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f006 fabb 	bl	8008088 <strcpy>
	for (i = 0; i < cmd_count; i++)
 8001b12:	7fbb      	ldrb	r3, [r7, #30]
 8001b14:	3301      	adds	r3, #1
 8001b16:	77bb      	strb	r3, [r7, #30]
 8001b18:	7fba      	ldrb	r2, [r7, #30]
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d39a      	bcc.n	8001a56 <Parser_Parse+0x62>
	}

	return PARSE_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	0800a980 	.word	0x0800a980
 8001b30:	0800a994 	.word	0x0800a994
 8001b34:	0800a998 	.word	0x0800a998
 8001b38:	0800a9c0 	.word	0x0800a9c0
 8001b3c:	0800a9c8 	.word	0x0800a9c8
 8001b40:	0800a9d0 	.word	0x0800a9d0
 8001b44:	0800a9d8 	.word	0x0800a9d8
 8001b48:	0800a9e0 	.word	0x0800a9e0
 8001b4c:	0800a9e8 	.word	0x0800a9e8

08001b50 <RB_Read>:
#include "main.h"
#include "ringbuffer.h"
#include "parse.h"

RB_Status RB_Read(Ringbuffer_t *buffer, uint8_t *value)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	if(buffer->Head == buffer->Tail)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d101      	bne.n	8001b6e <RB_Read+0x1e>
	{
		return RB_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e017      	b.n	8001b9e <RB_Read+0x4e>
	}

	*value = buffer->buffer[buffer->Tail];
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001b74:	461a      	mov	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	5c9a      	ldrb	r2, [r3, r2]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	701a      	strb	r2, [r3, #0]

	buffer->Tail = (buffer->Tail + 1) % RING_BUFFER_SIZE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001b84:	3301      	adds	r3, #1
 8001b86:	425a      	negs	r2, r3
 8001b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b90:	bf58      	it	pl
 8001b92:	4253      	negpl	r3, r2
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	return RB_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <RB_Write>:

RB_Status RB_Write(Ringbuffer_t *buffer, uint8_t value)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	70fb      	strb	r3, [r7, #3]

	uint16_t HeadTmp;
	HeadTmp = (buffer->Head + 1) % RING_BUFFER_SIZE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	425a      	negs	r2, r3
 8001bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bc8:	bf58      	it	pl
 8001bca:	4253      	negpl	r3, r2
 8001bcc:	81fb      	strh	r3, [r7, #14]

	if (HeadTmp == buffer->Tail)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001bd4:	89fa      	ldrh	r2, [r7, #14]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d101      	bne.n	8001bde <RB_Write+0x34>
	{
		return RB_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00b      	b.n	8001bf6 <RB_Write+0x4c>
	}

	buffer->buffer[buffer->Head] = value;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001be4:	4619      	mov	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	545a      	strb	r2, [r3, r1]
	buffer->Head = HeadTmp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	89fa      	ldrh	r2, [r7, #14]
 8001bf0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	return RB_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <RB_Flush>:

void RB_Flush(Ringbuffer_t *buffer)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	buffer->Head = 0;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	buffer->Tail = 0;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <tm1637Init>:
    0x40,0x50,0x00									// -,r,NULL		[16-18]
};


void tm1637Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <tm1637Init+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <tm1637Init+0x88>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <tm1637Init+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <tm1637Init+0x88>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <tm1637Init+0x88>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <tm1637Init+0x88>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_PULLUP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 8001c7a:	2311      	movs	r3, #17
 8001c7c:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 8001c82:	2302      	movs	r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <tm1637Init+0x8c>)
 8001c8e:	f001 fd67 	bl	8003760 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 8001c92:	2304      	movs	r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <tm1637Init+0x8c>)
 8001c9e:	f001 fd5f 	bl	8003760 <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 8001ca2:	2008      	movs	r0, #8
 8001ca4:	f000 f904 	bl	8001eb0 <tm1637SetBrightness>
}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020800 	.word	0x40020800

08001cb8 <tm1637DisplayFloat>:
 *
 * @param[value] - float value to display [-150 - +150 range]
 * @return - void
 */
void tm1637DisplayFloat(float value)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t v = (uint16_t) (value * 100);
 8001cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001ea0 <tm1637DisplayFloat+0x1e8>
 8001cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd2:	ee17 3a90 	vmov	r3, s15
 8001cd6:	83fb      	strh	r3, [r7, #30]
	unsigned char digitArr[4];
	uint8_t SeparatorPosition = 4; // outside the range
 8001cd8:	2304      	movs	r3, #4
 8001cda:	777b      	strb	r3, [r7, #29]
	if (v > 0)
 8001cdc:	8bfb      	ldrh	r3, [r7, #30]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d050      	beq.n	8001d84 <tm1637DisplayFloat+0xcc>
	{
		if (v > 15000)
 8001ce2:	8bfb      	ldrh	r3, [r7, #30]
 8001ce4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d906      	bls.n	8001cfa <tm1637DisplayFloat+0x42>
		{
			// if value is under -150 then something is wrong -> display error
			DISPLAY_ERR(digitArr[0], digitArr[1], digitArr[2]);
 8001cec:	2350      	movs	r3, #80	; 0x50
 8001cee:	733b      	strb	r3, [r7, #12]
 8001cf0:	2350      	movs	r3, #80	; 0x50
 8001cf2:	737b      	strb	r3, [r7, #13]
 8001cf4:	2379      	movs	r3, #121	; 0x79
 8001cf6:	73bb      	strb	r3, [r7, #14]
 8001cf8:	e0a6      	b.n	8001e48 <tm1637DisplayFloat+0x190>

		}
		else
		{
			// separator middle position
			SeparatorPosition = 2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	777b      	strb	r3, [r7, #29]
			if (v > 9999)
 8001cfe:	8bfb      	ldrh	r3, [r7, #30]
 8001d00:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d907      	bls.n	8001d18 <tm1637DisplayFloat+0x60>
			{
				// move separator
				SeparatorPosition = 1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	777b      	strb	r3, [r7, #29]
				// cut one digit
				v /= 10;
 8001d0c:	8bfb      	ldrh	r3, [r7, #30]
 8001d0e:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <tm1637DisplayFloat+0x1ec>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	83fb      	strh	r3, [r7, #30]
			}
			for (int i = 0; i < 4; ++i)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e02e      	b.n	8001d7c <tm1637DisplayFloat+0xc4>
			{
				digitArr[i] = segmentMap[v % 10];
 8001d1e:	8bfa      	ldrh	r2, [r7, #30]
 8001d20:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <tm1637DisplayFloat+0x1ec>)
 8001d22:	fba3 1302 	umull	r1, r3, r3, r2
 8001d26:	08d9      	lsrs	r1, r3, #3
 8001d28:	460b      	mov	r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b5c      	ldr	r3, [pc, #368]	; (8001ea8 <tm1637DisplayFloat+0x1f0>)
 8001d38:	5c99      	ldrb	r1, [r3, r2]
 8001d3a:	f107 020c 	add.w	r2, r7, #12
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4413      	add	r3, r2
 8001d42:	460a      	mov	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
				if (i == SeparatorPosition)
 8001d46:	7f7b      	ldrb	r3, [r7, #29]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d10d      	bne.n	8001d6a <tm1637DisplayFloat+0xb2>
				{
					digitArr[i] |= 1 << 7;
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4413      	add	r3, r2
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d5c:	b2d9      	uxtb	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4413      	add	r3, r2
 8001d66:	460a      	mov	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
				}
				v /= 10;
 8001d6a:	8bfb      	ldrh	r3, [r7, #30]
 8001d6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ea4 <tm1637DisplayFloat+0x1ec>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	08db      	lsrs	r3, r3, #3
 8001d74:	83fb      	strh	r3, [r7, #30]
			for (int i = 0; i < 4; ++i)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	ddcd      	ble.n	8001d1e <tm1637DisplayFloat+0x66>
 8001d82:	e061      	b.n	8001e48 <tm1637DisplayFloat+0x190>
	}
	else
	{
		// for negative number we use only 3 displays (first is minus)
		// flip the sign
		v *= -1;
 8001d84:	8bfb      	ldrh	r3, [r7, #30]
 8001d86:	425b      	negs	r3, r3
 8001d88:	83fb      	strh	r3, [r7, #30]
		SeparatorPosition = 2;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	777b      	strb	r3, [r7, #29]
		if (v > 15000)
 8001d8e:	8bfb      	ldrh	r3, [r7, #30]
 8001d90:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d906      	bls.n	8001da6 <tm1637DisplayFloat+0xee>
		{
			// if value is under -150 then something is wrong -> display error
			DISPLAY_ERR(digitArr[0],digitArr[1],digitArr[2]);
 8001d98:	2350      	movs	r3, #80	; 0x50
 8001d9a:	733b      	strb	r3, [r7, #12]
 8001d9c:	2350      	movs	r3, #80	; 0x50
 8001d9e:	737b      	strb	r3, [r7, #13]
 8001da0:	2379      	movs	r3, #121	; 0x79
 8001da2:	73bb      	strb	r3, [r7, #14]
 8001da4:	e04e      	b.n	8001e44 <tm1637DisplayFloat+0x18c>
		}
			// if there is no error check further
		else
		{

			if (v > 9999)
 8001da6:	8bfb      	ldrh	r3, [r7, #30]
 8001da8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d908      	bls.n	8001dc2 <tm1637DisplayFloat+0x10a>
			{
				// cut 2 digits
				v /= 100;
 8001db0:	8bfb      	ldrh	r3, [r7, #30]
 8001db2:	4a3e      	ldr	r2, [pc, #248]	; (8001eac <tm1637DisplayFloat+0x1f4>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	83fb      	strh	r3, [r7, #30]
				// no separator
				SeparatorPosition = 4;
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	777b      	strb	r3, [r7, #29]
 8001dc0:	e00b      	b.n	8001dda <tm1637DisplayFloat+0x122>
			}
			else if (v > 999)
 8001dc2:	8bfb      	ldrh	r3, [r7, #30]
 8001dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dc8:	d307      	bcc.n	8001dda <tm1637DisplayFloat+0x122>
			{
				// cut 1 digit
				v /= 10;
 8001dca:	8bfb      	ldrh	r3, [r7, #30]
 8001dcc:	4a35      	ldr	r2, [pc, #212]	; (8001ea4 <tm1637DisplayFloat+0x1ec>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	08db      	lsrs	r3, r3, #3
 8001dd4:	83fb      	strh	r3, [r7, #30]
				// move separator
				SeparatorPosition = 1;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	777b      	strb	r3, [r7, #29]
			}
			for (int i = 0; i < 3; ++i)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e02e      	b.n	8001e3e <tm1637DisplayFloat+0x186>
			{
				digitArr[i] = segmentMap[v % 10];
 8001de0:	8bfa      	ldrh	r2, [r7, #30]
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <tm1637DisplayFloat+0x1ec>)
 8001de4:	fba3 1302 	umull	r1, r3, r3, r2
 8001de8:	08d9      	lsrs	r1, r3, #3
 8001dea:	460b      	mov	r3, r1
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <tm1637DisplayFloat+0x1f0>)
 8001dfa:	5c99      	ldrb	r1, [r3, r2]
 8001dfc:	f107 020c 	add.w	r2, r7, #12
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	4413      	add	r3, r2
 8001e04:	460a      	mov	r2, r1
 8001e06:	701a      	strb	r2, [r3, #0]
				if (i == SeparatorPosition)
 8001e08:	7f7b      	ldrb	r3, [r7, #29]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d10d      	bne.n	8001e2c <tm1637DisplayFloat+0x174>
				{
					digitArr[i] |= 1 << 7;
 8001e10:	f107 020c 	add.w	r2, r7, #12
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e1e:	b2d9      	uxtb	r1, r3
 8001e20:	f107 020c 	add.w	r2, r7, #12
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	4413      	add	r3, r2
 8001e28:	460a      	mov	r2, r1
 8001e2a:	701a      	strb	r2, [r3, #0]
				}
				v /= 10;
 8001e2c:	8bfb      	ldrh	r3, [r7, #30]
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <tm1637DisplayFloat+0x1ec>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	83fb      	strh	r3, [r7, #30]
			for (int i = 0; i < 3; ++i)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	ddcd      	ble.n	8001de0 <tm1637DisplayFloat+0x128>
			}
		}

		digitArr[3] = segmentMap[16]; // minus
 8001e44:	2340      	movs	r3, #64	; 0x40
 8001e46:	73fb      	strb	r3, [r7, #15]
	}


    // write prepared data
    _tm1637Start();
 8001e48:	f000 f847 	bl	8001eda <_tm1637Start>
    _tm1637WriteByte(0x40);
 8001e4c:	2040      	movs	r0, #64	; 0x40
 8001e4e:	f000 f876 	bl	8001f3e <_tm1637WriteByte>
    _tm1637ReadResult();
 8001e52:	f000 f864 	bl	8001f1e <_tm1637ReadResult>
    _tm1637Stop();
 8001e56:	f000 f84d 	bl	8001ef4 <_tm1637Stop>

    _tm1637Start();
 8001e5a:	f000 f83e 	bl	8001eda <_tm1637Start>
    _tm1637WriteByte(0xc0);
 8001e5e:	20c0      	movs	r0, #192	; 0xc0
 8001e60:	f000 f86d 	bl	8001f3e <_tm1637WriteByte>
    _tm1637ReadResult();
 8001e64:	f000 f85b 	bl	8001f1e <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e00f      	b.n	8001e8e <tm1637DisplayFloat+0x1d6>
        _tm1637WriteByte(digitArr[3 - i]);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f1c3 0303 	rsb	r3, r3, #3
 8001e74:	f107 0220 	add.w	r2, r7, #32
 8001e78:	4413      	add	r3, r2
 8001e7a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f85d 	bl	8001f3e <_tm1637WriteByte>
        _tm1637ReadResult();
 8001e84:	f000 f84b 	bl	8001f1e <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	ddec      	ble.n	8001e6e <tm1637DisplayFloat+0x1b6>
    }

    _tm1637Stop();
 8001e94:	f000 f82e 	bl	8001ef4 <_tm1637Stop>
}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	42c80000 	.word	0x42c80000
 8001ea4:	cccccccd 	.word	0xcccccccd
 8001ea8:	0800aa48 	.word	0x0800aa48
 8001eac:	51eb851f 	.word	0x51eb851f

08001eb0 <tm1637SetBrightness>:
}

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8001eba:	f000 f80e 	bl	8001eda <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	3b79      	subs	r3, #121	; 0x79
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 f83a 	bl	8001f3e <_tm1637WriteByte>
    _tm1637ReadResult();
 8001eca:	f000 f828 	bl	8001f1e <_tm1637ReadResult>
    _tm1637Stop();
 8001ece:	f000 f811 	bl	8001ef4 <_tm1637Stop>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_tm1637Start>:

void _tm1637Start(void)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 8001ede:	f000 f86b 	bl	8001fb8 <_tm1637ClkHigh>
    _tm1637DioHigh();
 8001ee2:	f000 f881 	bl	8001fe8 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f000 f853 	bl	8001f92 <_tm1637DelayUsec>
    _tm1637DioLow();
 8001eec:	f000 f888 	bl	8002000 <_tm1637DioLow>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_tm1637Stop>:

void _tm1637Stop(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001ef8:	f000 f86a 	bl	8001fd0 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8001efc:	2002      	movs	r0, #2
 8001efe:	f000 f848 	bl	8001f92 <_tm1637DelayUsec>
    _tm1637DioLow();
 8001f02:	f000 f87d 	bl	8002000 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 8001f06:	2002      	movs	r0, #2
 8001f08:	f000 f843 	bl	8001f92 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8001f0c:	f000 f854 	bl	8001fb8 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8001f10:	2002      	movs	r0, #2
 8001f12:	f000 f83e 	bl	8001f92 <_tm1637DelayUsec>
    _tm1637DioHigh();
 8001f16:	f000 f867 	bl	8001fe8 <_tm1637DioHigh>
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001f22:	f000 f855 	bl	8001fd0 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8001f26:	2005      	movs	r0, #5
 8001f28:	f000 f833 	bl	8001f92 <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 8001f2c:	f000 f844 	bl	8001fb8 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8001f30:	2002      	movs	r0, #2
 8001f32:	f000 f82e 	bl	8001f92 <_tm1637DelayUsec>
    _tm1637ClkLow();
 8001f36:	f000 f84b 	bl	8001fd0 <_tm1637ClkLow>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e019      	b.n	8001f82 <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8001f4e:	f000 f83f 	bl	8001fd0 <_tm1637ClkLow>
        if (b & 0x01) {
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8001f5c:	f000 f844 	bl	8001fe8 <_tm1637DioHigh>
 8001f60:	e001      	b.n	8001f66 <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 8001f62:	f000 f84d 	bl	8002000 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 8001f66:	2003      	movs	r0, #3
 8001f68:	f000 f813 	bl	8001f92 <_tm1637DelayUsec>
        b >>= 1;
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 8001f72:	f000 f821 	bl	8001fb8 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 8001f76:	2003      	movs	r0, #3
 8001f78:	f000 f80b 	bl	8001f92 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b07      	cmp	r3, #7
 8001f86:	dde2      	ble.n	8001f4e <_tm1637WriteByte+0x10>
    }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
//	for(uint8_t i = 0;i++ ; i<10)
//	{
//
//	}

	uint32_t delay = HAL_GetTick();
 8001f9a:	f000 fe7d 	bl	8002c98 <HAL_GetTick>
 8001f9e:	60f8      	str	r0, [r7, #12]

	do
	{
	}while((HAL_GetTick() - delay) < 2);
 8001fa0:	f000 fe7a 	bl	8002c98 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d9f8      	bls.n	8001fa0 <_tm1637DelayUsec+0xe>
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <_tm1637ClkHigh+0x14>)
 8001fc2:	f001 fd69 	bl	8003a98 <HAL_GPIO_WritePin>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40020800 	.word	0x40020800

08001fd0 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <_tm1637ClkLow+0x14>)
 8001fda:	f001 fd5d 	bl	8003a98 <HAL_GPIO_WritePin>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 8001fec:	2201      	movs	r2, #1
 8001fee:	2104      	movs	r1, #4
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <_tm1637DioHigh+0x14>)
 8001ff2:	f001 fd51 	bl	8003a98 <HAL_GPIO_WritePin>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40020800 	.word	0x40020800

08002000 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8002004:	2200      	movs	r2, #0
 8002006:	2104      	movs	r1, #4
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <_tm1637DioLow+0x14>)
 800200a:	f001 fd45 	bl	8003a98 <HAL_GPIO_WritePin>
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40020800 	.word	0x40020800

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <HAL_MspInit+0x4c>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_MspInit+0x4c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <HAL_MspInit+0x4c>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_MspInit+0x4c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002056:	2007      	movs	r0, #7
 8002058:	f000 ff3e 	bl	8002ed8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b4:	f000 fddc 	bl	8002c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80020c0:	2008      	movs	r0, #8
 80020c2:	f001 fd03 	bl	8003acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020d2:	f003 fbcb 	bl	800586c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000038c 	.word	0x2000038c

080020e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <USART1_IRQHandler+0x10>)
 80020e6:	f004 fad3 	bl	8006690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000434 	.word	0x20000434

080020f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <DMA2_Stream2_IRQHandler+0x10>)
 80020fa:	f001 f8c7 	bl	800328c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200003d4 	.word	0x200003d4

08002108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
	return 1;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_kill>:

int _kill(int pid, int sig)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002122:	f005 faf5 	bl	8007710 <__errno>
 8002126:	4603      	mov	r3, r0
 8002128:	2216      	movs	r2, #22
 800212a:	601a      	str	r2, [r3, #0]
	return -1;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_exit>:

void _exit (int status)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ffe7 	bl	8002118 <_kill>
	while (1) {}		/* Make sure we hang here */
 800214a:	e7fe      	b.n	800214a <_exit+0x12>

0800214c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e00a      	b.n	8002174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800215e:	f3af 8000 	nop.w
 8002162:	4601      	mov	r1, r0
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	60ba      	str	r2, [r7, #8]
 800216a:	b2ca      	uxtb	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbf0      	blt.n	800215e <_read+0x12>
	}

return len;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e009      	b.n	80021ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dbf1      	blt.n	8002198 <_write+0x12>
	}
	return len;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_close>:

int _close(int file)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
	return -1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e6:	605a      	str	r2, [r3, #4]
	return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <_isatty>:

int _isatty(int file)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
	return 1;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
	return 0;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <_sbrk+0x5c>)
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <_sbrk+0x60>)
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <_sbrk+0x64>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <_sbrk+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d207      	bcs.n	8002268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002258:	f005 fa5a 	bl	8007710 <__errno>
 800225c:	4603      	mov	r3, r0
 800225e:	220c      	movs	r2, #12
 8002260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e009      	b.n	800227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <_sbrk+0x64>)
 8002278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20018000 	.word	0x20018000
 8002288:	00000400 	.word	0x00000400
 800228c:	200001f8 	.word	0x200001f8
 8002290:	200004d0 	.word	0x200004d0

08002294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <SystemInit+0x20>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <SystemInit+0x20>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b096      	sub	sp, #88	; 0x58
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	611a      	str	r2, [r3, #16]
 80022e6:	615a      	str	r2, [r3, #20]
 80022e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2220      	movs	r2, #32
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f005 fa37 	bl	8007764 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <MX_TIM1_Init+0x134>)
 80022f8:	4a3d      	ldr	r2, [pc, #244]	; (80023f0 <MX_TIM1_Init+0x138>)
 80022fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 80022fc:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <MX_TIM1_Init+0x134>)
 80022fe:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b39      	ldr	r3, [pc, #228]	; (80023ec <MX_TIM1_Init+0x134>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800230a:	4b38      	ldr	r3, [pc, #224]	; (80023ec <MX_TIM1_Init+0x134>)
 800230c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002310:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <MX_TIM1_Init+0x134>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <MX_TIM1_Init+0x134>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231e:	4b33      	ldr	r3, [pc, #204]	; (80023ec <MX_TIM1_Init+0x134>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002324:	4831      	ldr	r0, [pc, #196]	; (80023ec <MX_TIM1_Init+0x134>)
 8002326:	f003 f967 	bl	80055f8 <HAL_TIM_Base_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002330:	f7ff faba 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002338:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800233a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800233e:	4619      	mov	r1, r3
 8002340:	482a      	ldr	r0, [pc, #168]	; (80023ec <MX_TIM1_Init+0x134>)
 8002342:	f003 fbf7 	bl	8005b34 <HAL_TIM_ConfigClockSource>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800234c:	f7ff faac 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002350:	4826      	ldr	r0, [pc, #152]	; (80023ec <MX_TIM1_Init+0x134>)
 8002352:	f003 fa32 	bl	80057ba <HAL_TIM_OC_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800235c:	f7ff faa4 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002360:	2320      	movs	r3, #32
 8002362:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002368:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800236c:	4619      	mov	r1, r3
 800236e:	481f      	ldr	r0, [pc, #124]	; (80023ec <MX_TIM1_Init+0x134>)
 8002370:	f003 ff76 	bl	8006260 <HAL_TIMEx_MasterConfigSynchronization>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800237a:	f7ff fa95 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800238a:	2300      	movs	r3, #0
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800239a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239e:	2200      	movs	r2, #0
 80023a0:	4619      	mov	r1, r3
 80023a2:	4812      	ldr	r0, [pc, #72]	; (80023ec <MX_TIM1_Init+0x134>)
 80023a4:	f003 fb6a 	bl	8005a7c <HAL_TIM_OC_ConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80023ae:	f7ff fa7b 	bl	80018a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_TIM1_Init+0x134>)
 80023d6:	f003 ffb1 	bl	800633c <HAL_TIMEx_ConfigBreakDeadTime>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80023e0:	f7ff fa62 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	3758      	adds	r7, #88	; 0x58
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	2000038c 	.word	0x2000038c
 80023f0:	40010000 	.word	0x40010000

080023f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_TIM_Base_MspInit+0x3c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10d      	bne.n	8002422 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_TIM_Base_MspInit+0x40>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_TIM_Base_MspInit+0x40>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_TIM_Base_MspInit+0x40>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40010000 	.word	0x40010000
 8002434:	40023800 	.word	0x40023800

08002438 <TMP102_Read16>:
 * @param[reg] - predefined registers address
 *
 * @return - 16 bit value from register
 */
static uint16_t TMP102_Read16(TMP102_t *tmp102, uint8_t reg)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af04      	add	r7, sp, #16
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]

	// buffer for return data
	uint8_t value[2];

	// check if register address is more than 3
	if (reg > TMP102_REG_MAXTEMP)
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d904      	bls.n	8002454 <TMP102_Read16+0x1c>
	{
		tmp102->ErrorCode = TMP102_ERR_WRONGREGISTERDEFINED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	749a      	strb	r2, [r3, #18]
		return 0;
 8002450:	2300      	movs	r3, #0
 8002452:	e03b      	b.n	80024cc <TMP102_Read16+0x94>
	}

	// address has to be shifted one place left because hal requires left allinged 7bit address
	HAL_I2C_Mem_Read(tmp102->I2CHandle, ((tmp102->DeviceAdress) << 1), reg, 1,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	b29b      	uxth	r3, r3
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	b299      	uxth	r1, r3
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	b29a      	uxth	r2, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	2302      	movs	r3, #2
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2301      	movs	r3, #1
 8002478:	f001 fd7e 	bl	8003f78 <HAL_I2C_Mem_Read>
	// 0000 0000 XXXX XXXX // << 4
	// 0000 XXXX XXXX 0000 // then we push value[1] which has only 4 significant bits (YYYY 0000) >> 4
	// 0000 XXXX XXXX YYYY // combined

	// return 16 bit data
	if (reg != TMP102_REG_CONFIG)
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d01c      	beq.n	80024bc <TMP102_Read16+0x84>
	{
		if (tmp102->Configuration.TMP102_EM == 0)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7c5b      	ldrb	r3, [r3, #17]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <TMP102_Read16+0x6e>
		{
			return (value[0] << 4) | (value[1] >> 4);
 8002490:	7b3b      	ldrb	r3, [r7, #12]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	b21a      	sxth	r2, r3
 8002496:	7b7b      	ldrb	r3, [r7, #13]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	b2db      	uxtb	r3, r3
 800249c:	b21b      	sxth	r3, r3
 800249e:	4313      	orrs	r3, r2
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	e012      	b.n	80024cc <TMP102_Read16+0x94>
		}
		else
		{
			return (value[0] << 5) | (value[1] >> 3);
 80024a6:	7b3b      	ldrb	r3, [r7, #12]
 80024a8:	015b      	lsls	r3, r3, #5
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	7b7b      	ldrb	r3, [r7, #13]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	e007      	b.n	80024cc <TMP102_Read16+0x94>
		}
	}
	else
	{
		// use union structure for config register
		return (value[0]) | (value[1] << 8);
 80024bc:	7b3b      	ldrb	r3, [r7, #12]
 80024be:	b21a      	sxth	r2, r3
 80024c0:	7b7b      	ldrb	r3, [r7, #13]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	b29b      	uxth	r3, r3
	}
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <TMP102_Write16>:
 * @param[reg] - predefined registers address
 * @param[value] - value to write
 * @return - 16 bit value from register
 */
static void TMP102_Write16(TMP102_t *tmp102, uint8_t reg, uint16_t value)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af04      	add	r7, sp, #16
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
 80024e0:	4613      	mov	r3, r2
 80024e2:	803b      	strh	r3, [r7, #0]
	// buffer to take 2 bytes
	uint8_t buf[2];

	// check if register address is more than 3
	if (reg > TMP102_REG_MAXTEMP)
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d903      	bls.n	80024f2 <TMP102_Write16+0x1e>
	{
		tmp102->ErrorCode = TMP102_ERR_WRONGREGISTERDEFINED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	749a      	strb	r2, [r3, #18]
		return;
 80024f0:	e02d      	b.n	800254e <TMP102_Write16+0x7a>
	}

	// define bit structure for temp and config
	if (reg != TMP102_REG_CONFIG)
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d00a      	beq.n	800250e <TMP102_Write16+0x3a>
	{
		buf[0] = value >> 4;
 80024f8:	883b      	ldrh	r3, [r7, #0]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	733b      	strb	r3, [r7, #12]
		buf[1] = value << 4;
 8002502:	883b      	ldrh	r3, [r7, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	b2db      	uxtb	r3, r3
 800250a:	737b      	strb	r3, [r7, #13]
 800250c:	e007      	b.n	800251e <TMP102_Write16+0x4a>
	}
	else
	{
		buf[0] = value;
 800250e:	883b      	ldrh	r3, [r7, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	733b      	strb	r3, [r7, #12]
		buf[1] = value >> 8;
 8002514:	883b      	ldrh	r3, [r7, #0]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	b29b      	uxth	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	737b      	strb	r3, [r7, #13]
	}

	// write 16 bit data to TMP102
	HAL_I2C_Mem_Write(tmp102->I2CHandle, ((tmp102->DeviceAdress) << 1), reg, 1,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	791b      	ldrb	r3, [r3, #4]
 8002526:	b29b      	uxth	r3, r3
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	b299      	uxth	r1, r3
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	b29a      	uxth	r2, r3
 8002530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	2302      	movs	r3, #2
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2301      	movs	r3, #1
 8002542:	f001 fc1f 	bl	8003d84 <HAL_I2C_Mem_Write>
			buf, 2, TMP102_I2C_TIMEOUT);
	tmp102->ErrorCode = TMP102_ERR_NOERROR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	749a      	strb	r2, [r3, #18]
	return;
 800254c:	bf00      	nop
}
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <TMP102GetTempFloat>:
 *
 * @param[*tmp102] - TMP102 sensor structure
 * @return - temperature calculated from register
 */
float TMP102GetTempFloat(TMP102_t *tmp102)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	// define variables
	int16_t val = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	81fb      	strh	r3, [r7, #14]
	float temp_c = 0;
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]

	// check configuration
	TMP102GetConfiguration(tmp102);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f840 	bl	80025ec <TMP102GetConfiguration>

	// read temp data from register
	val = (int16_t) TMP102_Read16(tmp102, TMP102_REG_TEMP);
 800256c:	2100      	movs	r1, #0
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ff62 	bl	8002438 <TMP102_Read16>
 8002574:	4603      	mov	r3, r0
 8002576:	81fb      	strh	r3, [r7, #14]

	// 12 bit mode - normal
	if (tmp102->Configuration.TMP102_EM == 0)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7c5b      	ldrb	r3, [r3, #17]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10b      	bne.n	800259e <TMP102GetTempFloat+0x4a>
	{
		// check if value is negative
		TMP102_CHECKSIGN_12BIT(val);
 8002586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800258a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800258e:	db11      	blt.n	80025b4 <TMP102GetTempFloat+0x60>
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002596:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800259a:	81fb      	strh	r3, [r7, #14]
 800259c:	e00a      	b.n	80025b4 <TMP102GetTempFloat+0x60>
	}
	else
	//13 bit mode - extended
	{
		TMP102_CHECKSIGN_13BIT(val);
 800259e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	db05      	blt.n	80025b4 <TMP102GetTempFloat+0x60>
 80025a8:	89fb      	ldrh	r3, [r7, #14]
 80025aa:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80025ae:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80025b2:	81fb      	strh	r3, [r7, #14]
	}

	// Convert to float temperature value (Celsius)
	temp_c = (float) (val * 0.0625);
 80025b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ffcb 	bl	8000554 <__aeabi_i2d>
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <TMP102GetTempFloat+0x94>)
 80025c4:	f7fe f830 	bl	8000628 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f7fe fb02 	bl	8000bd8 <__aeabi_d2f>
 80025d4:	4603      	mov	r3, r0
 80025d6:	60bb      	str	r3, [r7, #8]

	return temp_c;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	ee07 3a90 	vmov	s15, r3
}
 80025de:	eeb0 0a67 	vmov.f32	s0, s15
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	3fb00000 	.word	0x3fb00000

080025ec <TMP102GetConfiguration>:
 *
 * @param[*tmp102] - TMP102 sensor structure
 * @return - void
 */
void TMP102GetConfiguration(TMP102_t *tmp102)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	// read uint16 config register value and convert it to bitfield
	configConverter tempConfig;
	tempConfig.i = TMP102_Read16(tmp102, TMP102_REG_CONFIG);
 80025f4:	2101      	movs	r1, #1
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff1e 	bl	8002438 <TMP102_Read16>
 80025fc:	4603      	mov	r3, r0
 80025fe:	81bb      	strh	r3, [r7, #12]
	tmp102->Configuration = tempConfig.conf;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	89ba      	ldrh	r2, [r7, #12]
 8002604:	821a      	strh	r2, [r3, #16]
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <TMP102WriteConfig>:
 * @param[value] - predefined register values TMP102_CR_XXX @config
 * @return - status msg
 */
uint8_t TMP102WriteConfig(TMP102_t *tmp102, TMP102writeConfig command,
		uint16_t value)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
 800261c:	4613      	mov	r3, r2
 800261e:	803b      	strh	r3, [r7, #0]
	// read raw config value
	uint16_t config;
	config = TMP102_Read16(tmp102, TMP102_REG_CONFIG);
 8002620:	2101      	movs	r1, #1
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff08 	bl	8002438 <TMP102_Read16>
 8002628:	4603      	mov	r3, r0
 800262a:	81fb      	strh	r3, [r7, #14]

	// CONTROL REGISTER :
	// MSB [CR1][CR0][AL][EM][0][0][0][0][OS][R1][R0][F1][F0][POL][TM][SD] LSB
	//     [7]  [6]  [5] [4] [3][2][1][0] [7] [6] [5] [4] [3] [2] [1] [0]

	TMP102_CHECK_REGISTER_2BIT(value, tmp102->ErrorCode);
 800262c:	883b      	ldrh	r3, [r7, #0]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d905      	bls.n	800263e <TMP102WriteConfig+0x2e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	749a      	strb	r2, [r3, #18]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7c9b      	ldrb	r3, [r3, #18]
 800263c:	e08b      	b.n	8002756 <TMP102WriteConfig+0x146>
	// select command
	switch (command)
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d87d      	bhi.n	8002740 <TMP102WriteConfig+0x130>
 8002644:	a201      	add	r2, pc, #4	; (adr r2, 800264c <TMP102WriteConfig+0x3c>)
 8002646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264a:	bf00      	nop
 800264c:	08002665 	.word	0x08002665
 8002650:	08002689 	.word	0x08002689
 8002654:	080026b5 	.word	0x080026b5
 8002658:	080026e1 	.word	0x080026e1
 800265c:	080026fb 	.word	0x080026fb
 8002660:	08002727 	.word	0x08002727
	{

	case TMP102_WRITE_SHUTDOWN:

		TMP102_CHECK_REGISTER_1BIT(value, tmp102->ErrorCode)
 8002664:	883b      	ldrh	r3, [r7, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d905      	bls.n	8002676 <TMP102WriteConfig+0x66>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	749a      	strb	r2, [r3, #18]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7c9b      	ldrb	r3, [r3, #18]
 8002674:	e06f      	b.n	8002756 <TMP102WriteConfig+0x146>
		;
		TMP102_EDITCONIFG_1BIT(config, value, TMP102_CR_OFFSET_SD)
 8002676:	89fb      	ldrh	r3, [r7, #14]
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	81fb      	strh	r3, [r7, #14]
 800267e:	89fa      	ldrh	r2, [r7, #14]
 8002680:	883b      	ldrh	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	81fb      	strh	r3, [r7, #14]
		;
		break;
 8002686:	e05b      	b.n	8002740 <TMP102WriteConfig+0x130>

	case TMP102_WRITE_THERMOSTATMODE:

		TMP102_CHECK_REGISTER_1BIT(value, tmp102->ErrorCode)
 8002688:	883b      	ldrh	r3, [r7, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d905      	bls.n	800269a <TMP102WriteConfig+0x8a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	749a      	strb	r2, [r3, #18]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7c9b      	ldrb	r3, [r3, #18]
 8002698:	e05d      	b.n	8002756 <TMP102WriteConfig+0x146>
		;
		TMP102_EDITCONIFG_1BIT(config, value, TMP102_CR_OFFSET_TM)
 800269a:	89fb      	ldrh	r3, [r7, #14]
 800269c:	f023 0302 	bic.w	r3, r3, #2
 80026a0:	81fb      	strh	r3, [r7, #14]
 80026a2:	883b      	ldrh	r3, [r7, #0]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b21b      	sxth	r3, r3
 80026b0:	81fb      	strh	r3, [r7, #14]
		;
		break;
 80026b2:	e045      	b.n	8002740 <TMP102WriteConfig+0x130>

	case TMP102_WRITE_POLARITY:

		TMP102_CHECK_REGISTER_1BIT(value, tmp102->ErrorCode)
 80026b4:	883b      	ldrh	r3, [r7, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d905      	bls.n	80026c6 <TMP102WriteConfig+0xb6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	749a      	strb	r2, [r3, #18]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7c9b      	ldrb	r3, [r3, #18]
 80026c4:	e047      	b.n	8002756 <TMP102WriteConfig+0x146>
		;
		TMP102_EDITCONIFG_1BIT(config, value, TMP102_CR_OFFSET_POL)
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	81fb      	strh	r3, [r7, #14]
 80026ce:	883b      	ldrh	r3, [r7, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	b21a      	sxth	r2, r3
 80026d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d8:	4313      	orrs	r3, r2
 80026da:	b21b      	sxth	r3, r3
 80026dc:	81fb      	strh	r3, [r7, #14]
		;
		break;
 80026de:	e02f      	b.n	8002740 <TMP102WriteConfig+0x130>

	case TMP102_WRITE_FALUTQUEUE:

		TMP102_EDITCONIFG_2BIT(config, value, TMP102_CR_OFFSET_FQ)
 80026e0:	89fb      	ldrh	r3, [r7, #14]
 80026e2:	f023 0318 	bic.w	r3, r3, #24
 80026e6:	81fb      	strh	r3, [r7, #14]
 80026e8:	883b      	ldrh	r3, [r7, #0]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	b21a      	sxth	r2, r3
 80026ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	81fb      	strh	r3, [r7, #14]
		;
		break;
 80026f8:	e022      	b.n	8002740 <TMP102WriteConfig+0x130>

	case TMP102_WRITE_EXTENDEDMODE:

		TMP102_CHECK_REGISTER_1BIT(value, tmp102->ErrorCode)
 80026fa:	883b      	ldrh	r3, [r7, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d905      	bls.n	800270c <TMP102WriteConfig+0xfc>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	749a      	strb	r2, [r3, #18]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7c9b      	ldrb	r3, [r3, #18]
 800270a:	e024      	b.n	8002756 <TMP102WriteConfig+0x146>
		;
		TMP102_EDITCONIFG_1BIT(config, value, TMP102_CR_OFFSET_EM)
 800270c:	89fb      	ldrh	r3, [r7, #14]
 800270e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002712:	81fb      	strh	r3, [r7, #14]
 8002714:	883b      	ldrh	r3, [r7, #0]
 8002716:	031b      	lsls	r3, r3, #12
 8002718:	b21a      	sxth	r2, r3
 800271a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800271e:	4313      	orrs	r3, r2
 8002720:	b21b      	sxth	r3, r3
 8002722:	81fb      	strh	r3, [r7, #14]
		;
		break;
 8002724:	e00c      	b.n	8002740 <TMP102WriteConfig+0x130>

	case TMP102_WRITE_CONV_RATE:

		TMP102_EDITCONIFG_2BIT(config, value, TMP102_CR_OFFSET_CR)
 8002726:	89fb      	ldrh	r3, [r7, #14]
 8002728:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800272c:	81fb      	strh	r3, [r7, #14]
 800272e:	883b      	ldrh	r3, [r7, #0]
 8002730:	039b      	lsls	r3, r3, #14
 8002732:	b21a      	sxth	r2, r3
 8002734:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002738:	4313      	orrs	r3, r2
 800273a:	b21b      	sxth	r3, r3
 800273c:	81fb      	strh	r3, [r7, #14]
		;
		break;
 800273e:	bf00      	nop
	}

	// write new config to register
	TMP102_Write16(tmp102, TMP102_REG_CONFIG, config);
 8002740:	89fb      	ldrh	r3, [r7, #14]
 8002742:	461a      	mov	r2, r3
 8002744:	2101      	movs	r1, #1
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fec4 	bl	80024d4 <TMP102_Write16>

	// read updated config to structure
	TMP102GetConfiguration(tmp102);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff4d 	bl	80025ec <TMP102GetConfiguration>
	return tmp102->ErrorCode;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7c9b      	ldrb	r3, [r3, #18]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop

08002760 <TMP102GetMinMaxTemp>:
 *
 * @param[*tmp102] - TMP102 sensor structure
 * @return - void
 */
void TMP102GetMinMaxTemp(TMP102_t *tmp102)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	// define variables
	int16_t val_max, val_min;

	// read temp data from register
	val_max = (int16_t) TMP102_Read16(tmp102, TMP102_REG_MAXTEMP);
 8002768:	2103      	movs	r1, #3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fe64 	bl	8002438 <TMP102_Read16>
 8002770:	4603      	mov	r3, r0
 8002772:	81fb      	strh	r3, [r7, #14]
	val_min = (int16_t) TMP102_Read16(tmp102, TMP102_REG_MINTEMP);
 8002774:	2102      	movs	r1, #2
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff fe5e 	bl	8002438 <TMP102_Read16>
 800277c:	4603      	mov	r3, r0
 800277e:	81bb      	strh	r3, [r7, #12]

	// Convert to 2's complement, since temperature can be negative

	// 12 bit mode - normal
	if (tmp102->Configuration.TMP102_EM == 0)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7c5b      	ldrb	r3, [r3, #17]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d116      	bne.n	80027bc <TMP102GetMinMaxTemp+0x5c>
	{
		TMP102_CHECKSIGN_12BIT(val_min);
 800278e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002796:	db05      	blt.n	80027a4 <TMP102GetMinMaxTemp+0x44>
 8002798:	89bb      	ldrh	r3, [r7, #12]
 800279a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800279e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80027a2:	81bb      	strh	r3, [r7, #12]
		TMP102_CHECKSIGN_12BIT(val_max);
 80027a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ac:	db1c      	blt.n	80027e8 <TMP102GetMinMaxTemp+0x88>
 80027ae:	89fb      	ldrh	r3, [r7, #14]
 80027b0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80027b4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80027b8:	81fb      	strh	r3, [r7, #14]
 80027ba:	e015      	b.n	80027e8 <TMP102GetMinMaxTemp+0x88>
	}
	else
	//13 bit mode - extended
	{
		TMP102_CHECKSIGN_13BIT(val_min);
 80027bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c4:	db05      	blt.n	80027d2 <TMP102GetMinMaxTemp+0x72>
 80027c6:	89bb      	ldrh	r3, [r7, #12]
 80027c8:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80027cc:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80027d0:	81bb      	strh	r3, [r7, #12]
		TMP102_CHECKSIGN_13BIT(val_max);
 80027d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027da:	db05      	blt.n	80027e8 <TMP102GetMinMaxTemp+0x88>
 80027dc:	89fb      	ldrh	r3, [r7, #14]
 80027de:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80027e2:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80027e6:	81fb      	strh	r3, [r7, #14]
	}

#if(TMP102_USE_FLOATNUMBERS == 1)
	// Convert to float temperature value (Celsius)
	tmp102->MaxTemperature = (float) (val_max * TMP102_RESOLUTION);
 80027e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd feb1 	bl	8000554 <__aeabi_i2d>
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <TMP102GetMinMaxTemp+0xdc>)
 80027f8:	f7fd ff16 	bl	8000628 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe f9e8 	bl	8000bd8 <__aeabi_d2f>
 8002808:	4602      	mov	r2, r0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	609a      	str	r2, [r3, #8]
	tmp102->MinTemperature = (float) (val_min * TMP102_RESOLUTION);
 800280e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe9e 	bl	8000554 <__aeabi_i2d>
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <TMP102GetMinMaxTemp+0xdc>)
 800281e:	f7fd ff03 	bl	8000628 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe f9d5 	bl	8000bd8 <__aeabi_d2f>
 800282e:	4602      	mov	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	60da      	str	r2, [r3, #12]
	tmp102->MaxTemperatureDecimalPart = abs(((val_max - (tmp102->MaxTemperatureIntegerPart / TMP102_RESOLUTION)) * 100) * TMP102_RESOLUTION);
	tmp102->MinTemperatureIntegerPart = (val_min * TMP102_RESOLUTION);
	tmp102->MinTemperatureDecimalPart = abs(((val_min - (tmp102->MinTemperatureIntegerPart / TMP102_RESOLUTION)) * 100) * TMP102_RESOLUTION);
#endif

}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	3fb00000 	.word	0x3fb00000

08002840 <TMP102Init>:
 * @param[initDeviceAddress] - device address @address
 * @return - void
 */
void TMP102Init(TMP102_t *tmp102, I2C_HandleTypeDef *initI2CHandle,
		uint8_t initDeviceAddress)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	71fb      	strb	r3, [r7, #7]

	// Read basic information
	tmp102->I2CHandle = initI2CHandle;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	601a      	str	r2, [r3, #0]
	tmp102->DeviceAdress = initDeviceAddress;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	79fa      	ldrb	r2, [r7, #7]
 8002858:	711a      	strb	r2, [r3, #4]

	// Write new config - defined by user
	TMP102WriteConfig(tmp102, TMP102_WRITE_CONV_RATE, TMP102_CR_CONV_RATE_8Hz);
 800285a:	2203      	movs	r2, #3
 800285c:	2105      	movs	r1, #5
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fed6 	bl	8002610 <TMP102WriteConfig>
	TMP102WriteConfig(tmp102, TMP102_WRITE_SHUTDOWN, TMP102_CR_MODE_CONTINUOS);
 8002864:	2200      	movs	r2, #0
 8002866:	2100      	movs	r1, #0
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff fed1 	bl	8002610 <TMP102WriteConfig>
	TMP102WriteConfig(tmp102, TMP102_WRITE_EXTENDEDMODE,
 800286e:	2201      	movs	r2, #1
 8002870:	2104      	movs	r1, #4
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff fecc 	bl	8002610 <TMP102WriteConfig>
	TMP102_CR_EXTENDED_ON);

	TMP102GetConfiguration(tmp102);
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f7ff feb7 	bl	80025ec <TMP102GetConfiguration>
	TMP102GetMinMaxTemp(tmp102);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff ff6e 	bl	8002760 <TMP102GetMinMaxTemp>
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <MX_USART1_UART_Init+0x4c>)
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <MX_USART1_UART_Init+0x50>)
 8002894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <MX_USART1_UART_Init+0x4c>)
 8002898:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800289c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <MX_USART1_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <MX_USART1_UART_Init+0x4c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <MX_USART1_UART_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <MX_USART1_UART_Init+0x4c>)
 80028b2:	220c      	movs	r2, #12
 80028b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <MX_USART1_UART_Init+0x4c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <MX_USART1_UART_Init+0x4c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <MX_USART1_UART_Init+0x4c>)
 80028c4:	f003 fda0 	bl	8006408 <HAL_UART_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028ce:	f7fe ffeb 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000434 	.word	0x20000434
 80028dc:	40011000 	.word	0x40011000

080028e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <MX_USART2_UART_Init+0x4c>)
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <MX_USART2_UART_Init+0x50>)
 80028e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <MX_USART2_UART_Init+0x4c>)
 80028ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <MX_USART2_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <MX_USART2_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <MX_USART2_UART_Init+0x4c>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <MX_USART2_UART_Init+0x4c>)
 8002906:	220c      	movs	r2, #12
 8002908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <MX_USART2_UART_Init+0x4c>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <MX_USART2_UART_Init+0x4c>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <MX_USART2_UART_Init+0x4c>)
 8002918:	f003 fd76 	bl	8006408 <HAL_UART_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002922:	f7fe ffc1 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000478 	.word	0x20000478
 8002930:	40004400 	.word	0x40004400

08002934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08c      	sub	sp, #48	; 0x30
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 031c 	add.w	r3, r7, #28
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a49      	ldr	r2, [pc, #292]	; (8002a78 <HAL_UART_MspInit+0x144>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d15b      	bne.n	8002a0e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	4b48      	ldr	r3, [pc, #288]	; (8002a7c <HAL_UART_MspInit+0x148>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4a47      	ldr	r2, [pc, #284]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002960:	f043 0310 	orr.w	r3, r3, #16
 8002964:	6453      	str	r3, [r2, #68]	; 0x44
 8002966:	4b45      	ldr	r3, [pc, #276]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <HAL_UART_MspInit+0x148>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800298e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029a0:	2307      	movs	r3, #7
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	4619      	mov	r1, r3
 80029aa:	4835      	ldr	r0, [pc, #212]	; (8002a80 <HAL_UART_MspInit+0x14c>)
 80029ac:	f000 fed8 	bl	8003760 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80029b0:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029b2:	4a35      	ldr	r2, [pc, #212]	; (8002a88 <HAL_UART_MspInit+0x154>)
 80029b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c4:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029ca:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029f0:	4824      	ldr	r0, [pc, #144]	; (8002a84 <HAL_UART_MspInit+0x150>)
 80029f2:	f000 fab3 	bl	8002f5c <HAL_DMA_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80029fc:	f7fe ff54 	bl	80018a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <HAL_UART_MspInit+0x150>)
 8002a04:	639a      	str	r2, [r3, #56]	; 0x38
 8002a06:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_UART_MspInit+0x150>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a0c:	e030      	b.n	8002a70 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_UART_MspInit+0x158>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d12b      	bne.n	8002a70 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a26:	6413      	str	r3, [r2, #64]	; 0x40
 8002a28:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6313      	str	r3, [r2, #48]	; 0x30
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_UART_MspInit+0x148>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a50:	230c      	movs	r3, #12
 8002a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a60:	2307      	movs	r3, #7
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4805      	ldr	r0, [pc, #20]	; (8002a80 <HAL_UART_MspInit+0x14c>)
 8002a6c:	f000 fe78 	bl	8003760 <HAL_GPIO_Init>
}
 8002a70:	bf00      	nop
 8002a72:	3730      	adds	r7, #48	; 0x30
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	200003d4 	.word	0x200003d4
 8002a88:	40026440 	.word	0x40026440
 8002a8c:	40004400 	.word	0x40004400

08002a90 <I2CScan>:
void UartLogPC (char *Msg) {
	HAL_UART_Transmit(&huart2, (uint8_t*)Msg, strlen(Msg), 100);
}

void I2CScan (I2C_HandleTypeDef* i2chandle)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b094      	sub	sp, #80	; 0x50
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 	HAL_StatusTypeDef result;
  	uint8_t i;
	char Msg[64];
	uint16_t Len;

	Len = sprintf(Msg,"Scanning i2c bus...");
 8002a98:	f107 0308 	add.w	r3, r7, #8
 8002a9c:	4931      	ldr	r1, [pc, #196]	; (8002b64 <I2CScan+0xd4>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 fad2 	bl	8008048 <siprintf>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Len, 1000);
 8002aaa:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002aae:	f107 0108 	add.w	r1, r7, #8
 8002ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab6:	482c      	ldr	r0, [pc, #176]	; (8002b68 <I2CScan+0xd8>)
 8002ab8:	f003 fcf3 	bl	80064a2 <HAL_UART_Transmit>

  	for (i=0; i<127; i++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002ac2:	e034      	b.n	8002b2e <I2CScan+0x9e>
  	   * (uint16_t)(i<<1) is the i2c address left aligned
  	   * retries 2
  	   * timeout 2
  	   */

  	  result = HAL_I2C_IsDeviceReady(i2chandle, (uint16_t)(i<<1), 2, 2);
 8002ac4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	b299      	uxth	r1, r3
 8002ace:	2302      	movs	r3, #2
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f001 fc76 	bl	80043c4 <HAL_I2C_IsDeviceReady>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8002ade:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <I2CScan+0x64>
  	  {
  		HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, 1000);
 8002ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aea:	2201      	movs	r2, #1
 8002aec:	491f      	ldr	r1, [pc, #124]	; (8002b6c <I2CScan+0xdc>)
 8002aee:	481e      	ldr	r0, [pc, #120]	; (8002b68 <I2CScan+0xd8>)
 8002af0:	f003 fcd7 	bl	80064a2 <HAL_UART_Transmit>
  	  }
  	  if (result == HAL_OK)
 8002af4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d113      	bne.n	8002b24 <I2CScan+0x94>
  	  {
  		Len = sprintf(Msg,"\r\nDevice found! Address : 0x%X\r\n", i);
 8002afc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	491a      	ldr	r1, [pc, #104]	; (8002b70 <I2CScan+0xe0>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f005 fa9e 	bl	8008048 <siprintf>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  		HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Len, 1000);
 8002b12:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002b16:	f107 0108 	add.w	r1, r7, #8
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	4812      	ldr	r0, [pc, #72]	; (8002b68 <I2CScan+0xd8>)
 8002b20:	f003 fcbf 	bl	80064a2 <HAL_UART_Transmit>
  	for (i=0; i<127; i++)
 8002b24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002b2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b32:	2b7e      	cmp	r3, #126	; 0x7e
 8002b34:	d9c6      	bls.n	8002ac4 <I2CScan+0x34>
  	  }
  	}

  	Len = sprintf(Msg,"Scan finished\r\n");
 8002b36:	f107 0308 	add.w	r3, r7, #8
 8002b3a:	490e      	ldr	r1, [pc, #56]	; (8002b74 <I2CScan+0xe4>)
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f005 fa83 	bl	8008048 <siprintf>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  	HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Len, 1000);
 8002b48:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002b4c:	f107 0108 	add.w	r1, r7, #8
 8002b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b54:	4804      	ldr	r0, [pc, #16]	; (8002b68 <I2CScan+0xd8>)
 8002b56:	f003 fca4 	bl	80064a2 <HAL_UART_Transmit>
}
 8002b5a:	bf00      	nop
 8002b5c:	3750      	adds	r7, #80	; 0x50
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	0800a9fc 	.word	0x0800a9fc
 8002b68:	20000478 	.word	0x20000478
 8002b6c:	0800aa10 	.word	0x0800aa10
 8002b70:	0800aa14 	.word	0x0800aa14
 8002b74:	0800aa38 	.word	0x0800aa38

08002b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b7c:	480d      	ldr	r0, [pc, #52]	; (8002bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b7e:	490e      	ldr	r1, [pc, #56]	; (8002bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b84:	e002      	b.n	8002b8c <LoopCopyDataInit>

08002b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b8a:	3304      	adds	r3, #4

08002b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b90:	d3f9      	bcc.n	8002b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b94:	4c0b      	ldr	r4, [pc, #44]	; (8002bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b98:	e001      	b.n	8002b9e <LoopFillZerobss>

08002b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b9c:	3204      	adds	r2, #4

08002b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba0:	d3fb      	bcc.n	8002b9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ba2:	f7ff fb77 	bl	8002294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ba6:	f004 fdb9 	bl	800771c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002baa:	f7fe fd45 	bl	8001638 <main>
  bx  lr    
 8002bae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002bbc:	0800aed4 	.word	0x0800aed4
  ldr r2, =_sbss
 8002bc0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002bc4:	200004d0 	.word	0x200004d0

08002bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bc8:	e7fe      	b.n	8002bc8 <ADC_IRQHandler>
	...

08002bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_Init+0x40>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_Init+0x40>)
 8002bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_Init+0x40>)
 8002be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_Init+0x40>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	f000 f96f 	bl	8002ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f000 f808 	bl	8002c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c00:	f7ff fa0a 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00

08002c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_InitTick+0x54>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_InitTick+0x58>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4619      	mov	r1, r3
 8002c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f987 	bl	8002f42 <HAL_SYSTICK_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00e      	b.n	8002c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b0f      	cmp	r3, #15
 8002c42:	d80a      	bhi.n	8002c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c44:	2200      	movs	r2, #0
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f000 f94f 	bl	8002eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c50:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <HAL_InitTick+0x5c>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000008 	.word	0x20000008
 8002c6c:	20000004 	.word	0x20000004

08002c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_IncTick+0x20>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_IncTick+0x24>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_IncTick+0x24>)
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000008 	.word	0x20000008
 8002c94:	200004bc 	.word	0x200004bc

08002c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_GetTick+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	200004bc 	.word	0x200004bc

08002cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7ff ffee 	bl	8002c98 <HAL_GetTick>
 8002cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d005      	beq.n	8002cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_Delay+0x44>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cd6:	bf00      	nop
 8002cd8:	f7ff ffde 	bl	8002c98 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d8f7      	bhi.n	8002cd8 <HAL_Delay+0x28>
  {
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000008 	.word	0x20000008

08002cf8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_SuspendTick+0x1c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_SuspendTick+0x1c>)
 8002d02:	f023 0302 	bic.w	r3, r3, #2
 8002d06:	6013      	str	r3, [r2, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e010 	.word	0xe000e010

08002d18 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_ResumeTick+0x1c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <HAL_ResumeTick+0x1c>)
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000e010 	.word	0xe000e010

08002d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0b      	blt.n	8002dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <__NVIC_EnableIRQ+0x38>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db0a      	blt.n	8002e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	490c      	ldr	r1, [pc, #48]	; (8002e24 <__NVIC_SetPriority+0x4c>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e00:	e00a      	b.n	8002e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <__NVIC_SetPriority+0x50>)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000e100 	.word	0xe000e100
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	bf28      	it	cs
 8002e4a:	2304      	movcs	r3, #4
 8002e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d902      	bls.n	8002e5c <NVIC_EncodePriority+0x30>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3b03      	subs	r3, #3
 8002e5a:	e000      	b.n	8002e5e <NVIC_EncodePriority+0x32>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	401a      	ands	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	4313      	orrs	r3, r2
         );
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	; 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea4:	d301      	bcc.n	8002eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e00f      	b.n	8002eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <SysTick_Config+0x40>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb8:	f7ff ff8e 	bl	8002dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <SysTick_Config+0x40>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec2:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <SysTick_Config+0x40>)
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	e000e010 	.word	0xe000e010

08002ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ff29 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b086      	sub	sp, #24
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f00:	f7ff ff3e 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	6978      	ldr	r0, [r7, #20]
 8002f0c:	f7ff ff8e 	bl	8002e2c <NVIC_EncodePriority>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff5d 	bl	8002dd8 <__NVIC_SetPriority>
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff31 	bl	8002d9c <__NVIC_EnableIRQ>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ffa2 	bl	8002e94 <SysTick_Config>
 8002f50:	4603      	mov	r3, r0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff fe96 	bl	8002c98 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e099      	b.n	80030ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f98:	e00f      	b.n	8002fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9a:	f7ff fe7d 	bl	8002c98 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d908      	bls.n	8002fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e078      	b.n	80030ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e8      	bne.n	8002f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <HAL_DMA_Init+0x158>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	2b04      	cmp	r3, #4
 8003012:	d107      	bne.n	8003024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	4313      	orrs	r3, r2
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0307 	bic.w	r3, r3, #7
 800303a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b04      	cmp	r3, #4
 800304c:	d117      	bne.n	800307e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00e      	beq.n	800307e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fb01 	bl	8003668 <DMA_CheckFifoParam>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2240      	movs	r2, #64	; 0x40
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800307a:	2301      	movs	r3, #1
 800307c:	e016      	b.n	80030ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fab8 	bl	80035fc <DMA_CalcBaseAndBitshift>
 800308c:	4603      	mov	r3, r0
 800308e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	223f      	movs	r2, #63	; 0x3f
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	f010803f 	.word	0xf010803f

080030b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_DMA_Start_IT+0x26>
 80030da:	2302      	movs	r3, #2
 80030dc:	e040      	b.n	8003160 <HAL_DMA_Start_IT+0xa8>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d12f      	bne.n	8003152 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fa4a 	bl	80035a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	223f      	movs	r2, #63	; 0x3f
 8003112:	409a      	lsls	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0216 	orr.w	r2, r2, #22
 8003126:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0208 	orr.w	r2, r2, #8
 800313e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e005      	b.n	800315e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003176:	f7ff fd8f 	bl	8002c98 <HAL_GetTick>
 800317a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d008      	beq.n	800319a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e052      	b.n	8003240 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0216 	bic.w	r2, r2, #22
 80031a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HAL_DMA_Abort+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0208 	bic.w	r2, r2, #8
 80031d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ea:	e013      	b.n	8003214 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ec:	f7ff fd54 	bl	8002c98 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d90c      	bls.n	8003214 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2203      	movs	r2, #3
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e015      	b.n	8003240 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e4      	bne.n	80031ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	223f      	movs	r2, #63	; 0x3f
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d004      	beq.n	8003266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e00c      	b.n	8003280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2205      	movs	r2, #5
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003298:	4b92      	ldr	r3, [pc, #584]	; (80034e4 <HAL_DMA_IRQHandler+0x258>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a92      	ldr	r2, [pc, #584]	; (80034e8 <HAL_DMA_IRQHandler+0x25c>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0a9b      	lsrs	r3, r3, #10
 80032a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	2208      	movs	r2, #8
 80032b8:	409a      	lsls	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01a      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	2208      	movs	r2, #8
 80032e6:	409a      	lsls	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	2201      	movs	r2, #1
 80032fe:	409a      	lsls	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d012      	beq.n	800332e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331a:	2201      	movs	r2, #1
 800331c:	409a      	lsls	r2, r3
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	f043 0202 	orr.w	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	2204      	movs	r2, #4
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00b      	beq.n	8003364 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	2204      	movs	r2, #4
 8003352:	409a      	lsls	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	f043 0204 	orr.w	r2, r3, #4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	2210      	movs	r2, #16
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d043      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d03c      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	2210      	movs	r2, #16
 8003388:	409a      	lsls	r2, r3
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d108      	bne.n	80033bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d024      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
 80033ba:	e01f      	b.n	80033fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
 80033cc:	e016      	b.n	80033fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d107      	bne.n	80033ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0208 	bic.w	r2, r2, #8
 80033ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	2220      	movs	r2, #32
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 808e 	beq.w	800352a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8086 	beq.w	800352a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	2220      	movs	r2, #32
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b05      	cmp	r3, #5
 8003434:	d136      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0216 	bic.w	r2, r2, #22
 8003444:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003454:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <HAL_DMA_IRQHandler+0x1da>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0208 	bic.w	r2, r2, #8
 8003474:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	223f      	movs	r2, #63	; 0x3f
 800347c:	409a      	lsls	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003496:	2b00      	cmp	r3, #0
 8003498:	d07d      	beq.n	8003596 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
        }
        return;
 80034a2:	e078      	b.n	8003596 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01c      	beq.n	80034ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d030      	beq.n	800352a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
 80034d0:	e02b      	b.n	800352a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d027      	beq.n	800352a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
 80034e2:	e022      	b.n	800352a <HAL_DMA_IRQHandler+0x29e>
 80034e4:	20000000 	.word	0x20000000
 80034e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0210 	bic.w	r2, r2, #16
 8003508:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	2b00      	cmp	r3, #0
 8003530:	d032      	beq.n	8003598 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d022      	beq.n	8003584 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2205      	movs	r2, #5
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3301      	adds	r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	429a      	cmp	r2, r3
 8003560:	d307      	bcc.n	8003572 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f2      	bne.n	8003556 <HAL_DMA_IRQHandler+0x2ca>
 8003570:	e000      	b.n	8003574 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003572:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
 8003594:	e000      	b.n	8003598 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003596:	bf00      	nop
    }
  }
}
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop

080035a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d108      	bne.n	80035e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035de:	e007      	b.n	80035f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	3b10      	subs	r3, #16
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <DMA_CalcBaseAndBitshift+0x64>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <DMA_CalcBaseAndBitshift+0x68>)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d909      	bls.n	800363e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003632:	f023 0303 	bic.w	r3, r3, #3
 8003636:	1d1a      	adds	r2, r3, #4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	659a      	str	r2, [r3, #88]	; 0x58
 800363c:	e007      	b.n	800364e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	aaaaaaab 	.word	0xaaaaaaab
 8003664:	0800aa74 	.word	0x0800aa74

08003668 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11f      	bne.n	80036c2 <DMA_CheckFifoParam+0x5a>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d856      	bhi.n	8003736 <DMA_CheckFifoParam+0xce>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <DMA_CheckFifoParam+0x28>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036a1 	.word	0x080036a1
 8003694:	080036b3 	.word	0x080036b3
 8003698:	080036a1 	.word	0x080036a1
 800369c:	08003737 	.word	0x08003737
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d046      	beq.n	800373a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b0:	e043      	b.n	800373a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ba:	d140      	bne.n	800373e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c0:	e03d      	b.n	800373e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ca:	d121      	bne.n	8003710 <DMA_CheckFifoParam+0xa8>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d837      	bhi.n	8003742 <DMA_CheckFifoParam+0xda>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <DMA_CheckFifoParam+0x70>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	080036e9 	.word	0x080036e9
 80036dc:	080036ef 	.word	0x080036ef
 80036e0:	080036e9 	.word	0x080036e9
 80036e4:	08003701 	.word	0x08003701
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      break;
 80036ec:	e030      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d025      	beq.n	8003746 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fe:	e022      	b.n	8003746 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003708:	d11f      	bne.n	800374a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800370e:	e01c      	b.n	800374a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d903      	bls.n	800371e <DMA_CheckFifoParam+0xb6>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d003      	beq.n	8003724 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800371c:	e018      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
      break;
 8003722:	e015      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00e      	beq.n	800374e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e00b      	b.n	800374e <DMA_CheckFifoParam+0xe6>
      break;
 8003736:	bf00      	nop
 8003738:	e00a      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e008      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
 8003740:	e006      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
 8003744:	e004      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;   
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 800374e:	bf00      	nop
    }
  } 
  
  return status; 
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop

08003760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	e159      	b.n	8003a30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800377c:	2201      	movs	r2, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	429a      	cmp	r2, r3
 8003796:	f040 8148 	bne.w	8003a2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d005      	beq.n	80037b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d130      	bne.n	8003814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	2203      	movs	r2, #3
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e8:	2201      	movs	r2, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 0201 	and.w	r2, r3, #1
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b03      	cmp	r3, #3
 800381e:	d017      	beq.n	8003850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d123      	bne.n	80038a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	08da      	lsrs	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3208      	adds	r2, #8
 8003864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	220f      	movs	r2, #15
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	08da      	lsrs	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3208      	adds	r2, #8
 800389e:	69b9      	ldr	r1, [r7, #24]
 80038a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2203      	movs	r2, #3
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0203 	and.w	r2, r3, #3
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a2 	beq.w	8003a2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <HAL_GPIO_Init+0x2e8>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <HAL_GPIO_Init+0x2e8>)
 80038f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038f4:	6453      	str	r3, [r2, #68]	; 0x44
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <HAL_GPIO_Init+0x2e8>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003902:	4a52      	ldr	r2, [pc, #328]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	3302      	adds	r3, #2
 800390a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	220f      	movs	r2, #15
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a49      	ldr	r2, [pc, #292]	; (8003a50 <HAL_GPIO_Init+0x2f0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x202>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a48      	ldr	r2, [pc, #288]	; (8003a54 <HAL_GPIO_Init+0x2f4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x1fe>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a47      	ldr	r2, [pc, #284]	; (8003a58 <HAL_GPIO_Init+0x2f8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x1fa>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a46      	ldr	r2, [pc, #280]	; (8003a5c <HAL_GPIO_Init+0x2fc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x1f6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a45      	ldr	r2, [pc, #276]	; (8003a60 <HAL_GPIO_Init+0x300>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x1f2>
 800394e:	2304      	movs	r3, #4
 8003950:	e008      	b.n	8003964 <HAL_GPIO_Init+0x204>
 8003952:	2307      	movs	r3, #7
 8003954:	e006      	b.n	8003964 <HAL_GPIO_Init+0x204>
 8003956:	2303      	movs	r3, #3
 8003958:	e004      	b.n	8003964 <HAL_GPIO_Init+0x204>
 800395a:	2302      	movs	r3, #2
 800395c:	e002      	b.n	8003964 <HAL_GPIO_Init+0x204>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_GPIO_Init+0x204>
 8003962:	2300      	movs	r3, #0
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	f002 0203 	and.w	r2, r2, #3
 800396a:	0092      	lsls	r2, r2, #2
 800396c:	4093      	lsls	r3, r2
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003974:	4935      	ldr	r1, [pc, #212]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	089b      	lsrs	r3, r3, #2
 800397a:	3302      	adds	r3, #2
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003982:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_GPIO_Init+0x304>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a6:	4a2f      	ldr	r2, [pc, #188]	; (8003a64 <HAL_GPIO_Init+0x304>)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039ac:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_GPIO_Init+0x304>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039d0:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <HAL_GPIO_Init+0x304>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039d6:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <HAL_GPIO_Init+0x304>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039fa:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_GPIO_Init+0x304>)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_GPIO_Init+0x304>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a24:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <HAL_GPIO_Init+0x304>)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	f67f aea2 	bls.w	800377c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	3724      	adds	r7, #36	; 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40013800 	.word	0x40013800
 8003a50:	40020000 	.word	0x40020000
 8003a54:	40020400 	.word	0x40020400
 8003a58:	40020800 	.word	0x40020800
 8003a5c:	40020c00 	.word	0x40020c00
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40013c00 	.word	0x40013c00

08003a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e001      	b.n	8003a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa8:	787b      	ldrb	r3, [r7, #1]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ab4:	e003      	b.n	8003abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ab6:	887b      	ldrh	r3, [r7, #2]
 8003ab8:	041a      	lsls	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	619a      	str	r2, [r3, #24]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ae2:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd feb4 	bl	8001858 <HAL_GPIO_EXTI_Callback>
  }
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40013c00 	.word	0x40013c00

08003afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e12b      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fd40 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b60:	f001 fd22 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8003b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a81      	ldr	r2, [pc, #516]	; (8003d70 <HAL_I2C_Init+0x274>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d807      	bhi.n	8003b80 <HAL_I2C_Init+0x84>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a80      	ldr	r2, [pc, #512]	; (8003d74 <HAL_I2C_Init+0x278>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bf94      	ite	ls
 8003b78:	2301      	movls	r3, #1
 8003b7a:	2300      	movhi	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e006      	b.n	8003b8e <HAL_I2C_Init+0x92>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a7d      	ldr	r2, [pc, #500]	; (8003d78 <HAL_I2C_Init+0x27c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	bf94      	ite	ls
 8003b88:	2301      	movls	r3, #1
 8003b8a:	2300      	movhi	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0e7      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a78      	ldr	r2, [pc, #480]	; (8003d7c <HAL_I2C_Init+0x280>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0c9b      	lsrs	r3, r3, #18
 8003ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a6a      	ldr	r2, [pc, #424]	; (8003d70 <HAL_I2C_Init+0x274>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d802      	bhi.n	8003bd0 <HAL_I2C_Init+0xd4>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	e009      	b.n	8003be4 <HAL_I2C_Init+0xe8>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	4a69      	ldr	r2, [pc, #420]	; (8003d80 <HAL_I2C_Init+0x284>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	3301      	adds	r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	495c      	ldr	r1, [pc, #368]	; (8003d70 <HAL_I2C_Init+0x274>)
 8003c00:	428b      	cmp	r3, r1
 8003c02:	d819      	bhi.n	8003c38 <HAL_I2C_Init+0x13c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e59      	subs	r1, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c12:	1c59      	adds	r1, r3, #1
 8003c14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c18:	400b      	ands	r3, r1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_I2C_Init+0x138>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1e59      	subs	r1, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	e051      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c34:	2304      	movs	r3, #4
 8003c36:	e04f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d111      	bne.n	8003c64 <HAL_I2C_Init+0x168>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e012      	b.n	8003c8a <HAL_I2C_Init+0x18e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	0099      	lsls	r1, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Init+0x196>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e022      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10e      	bne.n	8003cb8 <HAL_I2C_Init+0x1bc>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1e58      	subs	r0, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	440b      	add	r3, r1
 8003ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb6:	e00f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e58      	subs	r0, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	0099      	lsls	r1, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	6809      	ldr	r1, [r1, #0]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6911      	ldr	r1, [r2, #16]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68d2      	ldr	r2, [r2, #12]
 8003d12:	4311      	orrs	r1, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	000186a0 	.word	0x000186a0
 8003d74:	001e847f 	.word	0x001e847f
 8003d78:	003d08ff 	.word	0x003d08ff
 8003d7c:	431bde83 	.word	0x431bde83
 8003d80:	10624dd3 	.word	0x10624dd3

08003d84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	461a      	mov	r2, r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	817b      	strh	r3, [r7, #10]
 8003d96:	460b      	mov	r3, r1
 8003d98:	813b      	strh	r3, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d9e:	f7fe ff7b 	bl	8002c98 <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	f040 80d9 	bne.w	8003f64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2319      	movs	r3, #25
 8003db8:	2201      	movs	r2, #1
 8003dba:	496d      	ldr	r1, [pc, #436]	; (8003f70 <HAL_I2C_Mem_Write+0x1ec>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fdad 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0cc      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_Mem_Write+0x56>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e0c5      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d007      	beq.n	8003e00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2221      	movs	r2, #33	; 0x21
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a4d      	ldr	r2, [pc, #308]	; (8003f74 <HAL_I2C_Mem_Write+0x1f0>)
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e42:	88f8      	ldrh	r0, [r7, #6]
 8003e44:	893a      	ldrh	r2, [r7, #8]
 8003e46:	8979      	ldrh	r1, [r7, #10]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	4603      	mov	r3, r0
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fbe4 	bl	8004620 <I2C_RequestMemoryWrite>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d052      	beq.n	8003f04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e081      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fe2e 	bl	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d107      	bne.n	8003e8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e06b      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d11b      	bne.n	8003f04 <HAL_I2C_Mem_Write+0x180>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d017      	beq.n	8003f04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1aa      	bne.n	8003e62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fe1a 	bl	8004b4a <I2C_WaitOnBTFFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e016      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	00100002 	.word	0x00100002
 8003f74:	ffff0000 	.word	0xffff0000

08003f78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	4608      	mov	r0, r1
 8003f82:	4611      	mov	r1, r2
 8003f84:	461a      	mov	r2, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	817b      	strh	r3, [r7, #10]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	813b      	strh	r3, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f92:	f7fe fe81 	bl	8002c98 <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	f040 8208 	bne.w	80043b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2319      	movs	r3, #25
 8003fac:	2201      	movs	r2, #1
 8003fae:	497b      	ldr	r1, [pc, #492]	; (800419c <HAL_I2C_Mem_Read+0x224>)
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fcb3 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e1fb      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_I2C_Mem_Read+0x56>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e1f4      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d007      	beq.n	8003ff4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2222      	movs	r2, #34	; 0x22
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2240      	movs	r2, #64	; 0x40
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a5b      	ldr	r2, [pc, #364]	; (80041a0 <HAL_I2C_Mem_Read+0x228>)
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004036:	88f8      	ldrh	r0, [r7, #6]
 8004038:	893a      	ldrh	r2, [r7, #8]
 800403a:	8979      	ldrh	r1, [r7, #10]
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4603      	mov	r3, r0
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fb80 	bl	800474c <I2C_RequestMemoryRead>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e1b0      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d113      	bne.n	8004086 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e184      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408a:	2b01      	cmp	r3, #1
 800408c:	d11b      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e164      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d11b      	bne.n	8004106 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	e144      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800411c:	e138      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004122:	2b03      	cmp	r3, #3
 8004124:	f200 80f1 	bhi.w	800430a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b01      	cmp	r3, #1
 800412e:	d123      	bne.n	8004178 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fd49 	bl	8004bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e139      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004176:	e10b      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	2b02      	cmp	r3, #2
 800417e:	d14e      	bne.n	800421e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	2200      	movs	r2, #0
 8004188:	4906      	ldr	r1, [pc, #24]	; (80041a4 <HAL_I2C_Mem_Read+0x22c>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fbc6 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e10e      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
 800419a:	bf00      	nop
 800419c:	00100002 	.word	0x00100002
 80041a0:	ffff0000 	.word	0xffff0000
 80041a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800421c:	e0b8      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2200      	movs	r2, #0
 8004226:	4966      	ldr	r1, [pc, #408]	; (80043c0 <HAL_I2C_Mem_Read+0x448>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fb77 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0bf      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	2200      	movs	r2, #0
 8004282:	494f      	ldr	r1, [pc, #316]	; (80043c0 <HAL_I2C_Mem_Read+0x448>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fb49 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e091      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004308:	e042      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fc5c 	bl	8004bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e04c      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d118      	bne.n	8004390 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	f47f aec2 	bne.w	800411e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e000      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043b6:	2302      	movs	r3, #2
  }
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	; 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	00010004 	.word	0x00010004

080043c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08a      	sub	sp, #40	; 0x28
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	460b      	mov	r3, r1
 80043d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80043d4:	f7fe fc60 	bl	8002c98 <HAL_GetTick>
 80043d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80043da:	2301      	movs	r3, #1
 80043dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	f040 8111 	bne.w	800460e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2319      	movs	r3, #25
 80043f2:	2201      	movs	r2, #1
 80043f4:	4988      	ldr	r1, [pc, #544]	; (8004618 <HAL_I2C_IsDeviceReady+0x254>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fa90 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
 8004404:	e104      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_I2C_IsDeviceReady+0x50>
 8004410:	2302      	movs	r3, #2
 8004412:	e0fd      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x24c>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d007      	beq.n	800443a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004448:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2224      	movs	r2, #36	; 0x24
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a70      	ldr	r2, [pc, #448]	; (800461c <HAL_I2C_IsDeviceReady+0x258>)
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2200      	movs	r2, #0
 8004476:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa4e 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004494:	d103      	bne.n	800449e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e0b6      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044a2:	897b      	ldrh	r3, [r7, #10]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80044b2:	f7fe fbf1 	bl	8002c98 <HAL_GetTick>
 80044b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044dc:	bf0c      	ite	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	2300      	movne	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044e6:	e025      	b.n	8004534 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044e8:	f7fe fbd6 	bl	8002c98 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d302      	bcc.n	80044fe <HAL_I2C_IsDeviceReady+0x13a>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d103      	bne.n	8004506 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	22a0      	movs	r2, #160	; 0xa0
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2ba0      	cmp	r3, #160	; 0xa0
 800453e:	d005      	beq.n	800454c <HAL_I2C_IsDeviceReady+0x188>
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <HAL_I2C_IsDeviceReady+0x188>
 8004546:	7dbb      	ldrb	r3, [r7, #22]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0cd      	beq.n	80044e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b02      	cmp	r3, #2
 8004560:	d129      	bne.n	80045b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004570:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2319      	movs	r3, #25
 800458e:	2201      	movs	r2, #1
 8004590:	4921      	ldr	r1, [pc, #132]	; (8004618 <HAL_I2C_IsDeviceReady+0x254>)
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f9c2 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e036      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e02c      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2319      	movs	r3, #25
 80045d6:	2201      	movs	r2, #1
 80045d8:	490f      	ldr	r1, [pc, #60]	; (8004618 <HAL_I2C_IsDeviceReady+0x254>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f99e 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e012      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	3301      	adds	r3, #1
 80045ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	f4ff af32 	bcc.w	800445e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800460e:	2302      	movs	r3, #2
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	00100002 	.word	0x00100002
 800461c:	ffff0000 	.word	0xffff0000

08004620 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4603      	mov	r3, r0
 8004630:	817b      	strh	r3, [r7, #10]
 8004632:	460b      	mov	r3, r1
 8004634:	813b      	strh	r3, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004648:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	2200      	movs	r2, #0
 8004652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f960 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004670:	d103      	bne.n	800467a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e05f      	b.n	800473e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800468c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	6a3a      	ldr	r2, [r7, #32]
 8004692:	492d      	ldr	r1, [pc, #180]	; (8004748 <I2C_RequestMemoryWrite+0x128>)
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f998 	bl	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e04c      	b.n	800473e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046bc:	6a39      	ldr	r1, [r7, #32]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fa02 	bl	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d107      	bne.n	80046e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e02b      	b.n	800473e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d105      	bne.n	80046f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ec:	893b      	ldrh	r3, [r7, #8]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	611a      	str	r2, [r3, #16]
 80046f6:	e021      	b.n	800473c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046f8:	893b      	ldrh	r3, [r7, #8]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	6a39      	ldr	r1, [r7, #32]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f9dc 	bl	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b04      	cmp	r3, #4
 800471c:	d107      	bne.n	800472e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e005      	b.n	800473e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	00010002 	.word	0x00010002

0800474c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	4608      	mov	r0, r1
 8004756:	4611      	mov	r1, r2
 8004758:	461a      	mov	r2, r3
 800475a:	4603      	mov	r3, r0
 800475c:	817b      	strh	r3, [r7, #10]
 800475e:	460b      	mov	r3, r1
 8004760:	813b      	strh	r3, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004774:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004784:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	2200      	movs	r2, #0
 800478e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f8c2 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ac:	d103      	bne.n	80047b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e0aa      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	6a3a      	ldr	r2, [r7, #32]
 80047ce:	4952      	ldr	r1, [pc, #328]	; (8004918 <I2C_RequestMemoryRead+0x1cc>)
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f8fa 	bl	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e097      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	6a39      	ldr	r1, [r7, #32]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f964 	bl	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2b04      	cmp	r3, #4
 800480c:	d107      	bne.n	800481e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e076      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004828:	893b      	ldrh	r3, [r7, #8]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	611a      	str	r2, [r3, #16]
 8004832:	e021      	b.n	8004878 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004834:	893b      	ldrh	r3, [r7, #8]
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	b29b      	uxth	r3, r3
 800483a:	b2da      	uxtb	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004844:	6a39      	ldr	r1, [r7, #32]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f93e 	bl	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2b04      	cmp	r3, #4
 8004858:	d107      	bne.n	800486a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004868:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e050      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800486e:	893b      	ldrh	r3, [r7, #8]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487a:	6a39      	ldr	r1, [r7, #32]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f923 	bl	8004ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b04      	cmp	r3, #4
 800488e:	d107      	bne.n	80048a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e035      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f82b 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048da:	d103      	bne.n	80048e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e013      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048e8:	897b      	ldrh	r3, [r7, #10]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	6a3a      	ldr	r2, [r7, #32]
 80048fc:	4906      	ldr	r1, [pc, #24]	; (8004918 <I2C_RequestMemoryRead+0x1cc>)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f863 	bl	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	00010002 	.word	0x00010002

0800491c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800492c:	e025      	b.n	800497a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d021      	beq.n	800497a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004936:	f7fe f9af 	bl	8002c98 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d116      	bne.n	800497a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e023      	b.n	80049c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d10d      	bne.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	43da      	mvns	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	e00c      	b.n	80049ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	43da      	mvns	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4013      	ands	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf0c      	ite	eq
 80049b2:	2301      	moveq	r3, #1
 80049b4:	2300      	movne	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d0b6      	beq.n	800492e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
 80049d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049d8:	e051      	b.n	8004a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e8:	d123      	bne.n	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f043 0204 	orr.w	r2, r3, #4
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e046      	b.n	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d021      	beq.n	8004a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fe f92d 	bl	8002c98 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d116      	bne.n	8004a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f043 0220 	orr.w	r2, r3, #32
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e020      	b.n	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	0c1b      	lsrs	r3, r3, #16
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10c      	bne.n	8004aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4013      	ands	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bf14      	ite	ne
 8004a9a:	2301      	movne	r3, #1
 8004a9c:	2300      	moveq	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	e00b      	b.n	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	43da      	mvns	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d18d      	bne.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad4:	e02d      	b.n	8004b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f8ce 	bl	8004c78 <I2C_IsAcknowledgeFailed>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e02d      	b.n	8004b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d021      	beq.n	8004b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aee:	f7fe f8d3 	bl	8002c98 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d116      	bne.n	8004b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f043 0220 	orr.w	r2, r3, #32
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e007      	b.n	8004b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3c:	2b80      	cmp	r3, #128	; 0x80
 8004b3e:	d1ca      	bne.n	8004ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b56:	e02d      	b.n	8004bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f88d 	bl	8004c78 <I2C_IsAcknowledgeFailed>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e02d      	b.n	8004bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d021      	beq.n	8004bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b70:	f7fe f892 	bl	8002c98 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d302      	bcc.n	8004b86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d116      	bne.n	8004bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e007      	b.n	8004bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d1ca      	bne.n	8004b58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bd8:	e042      	b.n	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d119      	bne.n	8004c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0210 	mvn.w	r2, #16
 8004bf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e029      	b.n	8004c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1c:	f7fe f83c 	bl	8002c98 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d302      	bcc.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d116      	bne.n	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f043 0220 	orr.w	r2, r3, #32
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e007      	b.n	8004c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6a:	2b40      	cmp	r3, #64	; 0x40
 8004c6c:	d1b5      	bne.n	8004bda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8e:	d11b      	bne.n	8004cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f043 0204 	orr.w	r2, r3, #4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <HAL_PWR_EnterSLEEPMode+0x34>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <HAL_PWR_EnterSLEEPMode+0x34>)
 8004cea:	f023 0304 	bic.w	r3, r3, #4
 8004cee:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004cf6:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004cf8:	e002      	b.n	8004d00 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8004cfa:	bf40      	sev
    __WFE();
 8004cfc:	bf20      	wfe
    __WFE();
 8004cfe:	bf20      	wfe
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	e000ed00 	.word	0xe000ed00

08004d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e264      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d075      	beq.n	8004e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d2e:	4ba3      	ldr	r3, [pc, #652]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d00c      	beq.n	8004d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3a:	4ba0      	ldr	r3, [pc, #640]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d112      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d46:	4b9d      	ldr	r3, [pc, #628]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d52:	d10b      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d54:	4b99      	ldr	r3, [pc, #612]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d05b      	beq.n	8004e18 <HAL_RCC_OscConfig+0x108>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d157      	bne.n	8004e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e23f      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d106      	bne.n	8004d84 <HAL_RCC_OscConfig+0x74>
 8004d76:	4b91      	ldr	r3, [pc, #580]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a90      	ldr	r2, [pc, #576]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e01d      	b.n	8004dc0 <HAL_RCC_OscConfig+0xb0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x98>
 8004d8e:	4b8b      	ldr	r3, [pc, #556]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a8a      	ldr	r2, [pc, #552]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b88      	ldr	r3, [pc, #544]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a87      	ldr	r2, [pc, #540]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0xb0>
 8004da8:	4b84      	ldr	r3, [pc, #528]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a83      	ldr	r2, [pc, #524]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b81      	ldr	r3, [pc, #516]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a80      	ldr	r2, [pc, #512]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fd ff66 	bl	8002c98 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fd ff62 	bl	8002c98 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e204      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b76      	ldr	r3, [pc, #472]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xc0>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fd ff52 	bl	8002c98 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fd ff4e 	bl	8002c98 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e1f0      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0a:	4b6c      	ldr	r3, [pc, #432]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0xe8>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d063      	beq.n	8004eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e26:	4b65      	ldr	r3, [pc, #404]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e32:	4b62      	ldr	r3, [pc, #392]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d11c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3e:	4b5f      	ldr	r3, [pc, #380]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4a:	4b5c      	ldr	r3, [pc, #368]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_RCC_OscConfig+0x152>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e1c4      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	4b56      	ldr	r3, [pc, #344]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4952      	ldr	r1, [pc, #328]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	e03a      	b.n	8004eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d020      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e80:	4b4f      	ldr	r3, [pc, #316]	; (8004fc0 <HAL_RCC_OscConfig+0x2b0>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fd ff07 	bl	8002c98 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fd ff03 	bl	8002c98 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1a5      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea0:	4b46      	ldr	r3, [pc, #280]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b43      	ldr	r3, [pc, #268]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4940      	ldr	r1, [pc, #256]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]
 8004ec0:	e015      	b.n	8004eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec2:	4b3f      	ldr	r3, [pc, #252]	; (8004fc0 <HAL_RCC_OscConfig+0x2b0>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fd fee6 	bl	8002c98 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed0:	f7fd fee2 	bl	8002c98 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e184      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee2:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d030      	beq.n	8004f5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f02:	4b30      	ldr	r3, [pc, #192]	; (8004fc4 <HAL_RCC_OscConfig+0x2b4>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fd fec6 	bl	8002c98 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fd fec2 	bl	8002c98 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e164      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f22:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x200>
 8004f2e:	e015      	b.n	8004f5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f30:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <HAL_RCC_OscConfig+0x2b4>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f36:	f7fd feaf 	bl	8002c98 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3e:	f7fd feab 	bl	8002c98 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e14d      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f0      	bne.n	8004f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 80a0 	beq.w	80050aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f6e:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10f      	bne.n	8004f9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	4a0e      	ldr	r2, [pc, #56]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f88:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f92:	60bb      	str	r3, [r7, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_RCC_OscConfig+0x2b8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d121      	bne.n	8004fea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <HAL_RCC_OscConfig+0x2b8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a07      	ldr	r2, [pc, #28]	; (8004fc8 <HAL_RCC_OscConfig+0x2b8>)
 8004fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fb2:	f7fd fe71 	bl	8002c98 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb8:	e011      	b.n	8004fde <HAL_RCC_OscConfig+0x2ce>
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	42470000 	.word	0x42470000
 8004fc4:	42470e80 	.word	0x42470e80
 8004fc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fcc:	f7fd fe64 	bl	8002c98 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e106      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fde:	4b85      	ldr	r3, [pc, #532]	; (80051f4 <HAL_RCC_OscConfig+0x4e4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d106      	bne.n	8005000 <HAL_RCC_OscConfig+0x2f0>
 8004ff2:	4b81      	ldr	r3, [pc, #516]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a80      	ldr	r2, [pc, #512]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffe:	e01c      	b.n	800503a <HAL_RCC_OscConfig+0x32a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b05      	cmp	r3, #5
 8005006:	d10c      	bne.n	8005022 <HAL_RCC_OscConfig+0x312>
 8005008:	4b7b      	ldr	r3, [pc, #492]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	4a7a      	ldr	r2, [pc, #488]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 800500e:	f043 0304 	orr.w	r3, r3, #4
 8005012:	6713      	str	r3, [r2, #112]	; 0x70
 8005014:	4b78      	ldr	r3, [pc, #480]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4a77      	ldr	r2, [pc, #476]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6713      	str	r3, [r2, #112]	; 0x70
 8005020:	e00b      	b.n	800503a <HAL_RCC_OscConfig+0x32a>
 8005022:	4b75      	ldr	r3, [pc, #468]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	4a74      	ldr	r2, [pc, #464]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	6713      	str	r3, [r2, #112]	; 0x70
 800502e:	4b72      	ldr	r3, [pc, #456]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	4a71      	ldr	r2, [pc, #452]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d015      	beq.n	800506e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005042:	f7fd fe29 	bl	8002c98 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005048:	e00a      	b.n	8005060 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800504a:	f7fd fe25 	bl	8002c98 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f241 3288 	movw	r2, #5000	; 0x1388
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e0c5      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005060:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ee      	beq.n	800504a <HAL_RCC_OscConfig+0x33a>
 800506c:	e014      	b.n	8005098 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506e:	f7fd fe13 	bl	8002c98 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005074:	e00a      	b.n	800508c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005076:	f7fd fe0f 	bl	8002c98 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0af      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800508c:	4b5a      	ldr	r3, [pc, #360]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ee      	bne.n	8005076 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005098:	7dfb      	ldrb	r3, [r7, #23]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d105      	bne.n	80050aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509e:	4b56      	ldr	r3, [pc, #344]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	4a55      	ldr	r2, [pc, #340]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 80050a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 809b 	beq.w	80051ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050b4:	4b50      	ldr	r3, [pc, #320]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d05c      	beq.n	800517a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d141      	bne.n	800514c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c8:	4b4c      	ldr	r3, [pc, #304]	; (80051fc <HAL_RCC_OscConfig+0x4ec>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ce:	f7fd fde3 	bl	8002c98 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fd fddf 	bl	8002c98 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e081      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e8:	4b43      	ldr	r3, [pc, #268]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	019b      	lsls	r3, r3, #6
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	3b01      	subs	r3, #1
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	4937      	ldr	r1, [pc, #220]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 800511a:	4313      	orrs	r3, r2
 800511c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800511e:	4b37      	ldr	r3, [pc, #220]	; (80051fc <HAL_RCC_OscConfig+0x4ec>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fd fdb8 	bl	8002c98 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800512c:	f7fd fdb4 	bl	8002c98 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e056      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513e:	4b2e      	ldr	r3, [pc, #184]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x41c>
 800514a:	e04e      	b.n	80051ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_OscConfig+0x4ec>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fd fda1 	bl	8002c98 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515a:	f7fd fd9d 	bl	8002c98 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e03f      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516c:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x44a>
 8005178:	e037      	b.n	80051ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e032      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005186:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <HAL_RCC_OscConfig+0x4e8>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d028      	beq.n	80051e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800519e:	429a      	cmp	r2, r3
 80051a0:	d121      	bne.n	80051e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d11a      	bne.n	80051e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051b6:	4013      	ands	r3, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051be:	4293      	cmp	r3, r2
 80051c0:	d111      	bne.n	80051e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	3b01      	subs	r3, #1
 80051d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d001      	beq.n	80051ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40007000 	.word	0x40007000
 80051f8:	40023800 	.word	0x40023800
 80051fc:	42470060 	.word	0x42470060

08005200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0cc      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005214:	4b68      	ldr	r3, [pc, #416]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d90c      	bls.n	800523c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b65      	ldr	r3, [pc, #404]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b63      	ldr	r3, [pc, #396]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0b8      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d020      	beq.n	800528a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005254:	4b59      	ldr	r3, [pc, #356]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4a58      	ldr	r2, [pc, #352]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800525e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800526c:	4b53      	ldr	r3, [pc, #332]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4a52      	ldr	r2, [pc, #328]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005278:	4b50      	ldr	r3, [pc, #320]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	494d      	ldr	r1, [pc, #308]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d044      	beq.n	8005320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d107      	bne.n	80052ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529e:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d119      	bne.n	80052de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e07f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d003      	beq.n	80052be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d107      	bne.n	80052ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052be:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e06f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ce:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e067      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052de:	4b37      	ldr	r3, [pc, #220]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f023 0203 	bic.w	r2, r3, #3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4934      	ldr	r1, [pc, #208]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052f0:	f7fd fcd2 	bl	8002c98 <HAL_GetTick>
 80052f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f6:	e00a      	b.n	800530e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f8:	f7fd fcce 	bl	8002c98 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	; 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e04f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530e:	4b2b      	ldr	r3, [pc, #172]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 020c 	and.w	r2, r3, #12
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	429a      	cmp	r2, r3
 800531e:	d1eb      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005320:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d20c      	bcs.n	8005348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532e:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e032      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4916      	ldr	r1, [pc, #88]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005372:	4b12      	ldr	r3, [pc, #72]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	490e      	ldr	r1, [pc, #56]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005386:	f000 f821 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 800538a:	4602      	mov	r2, r0
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	490a      	ldr	r1, [pc, #40]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005398:	5ccb      	ldrb	r3, [r1, r3]
 800539a:	fa22 f303 	lsr.w	r3, r2, r3
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 80053a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_ClockConfig+0x1c8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fd fc32 	bl	8002c10 <HAL_InitTick>

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40023c00 	.word	0x40023c00
 80053bc:	40023800 	.word	0x40023800
 80053c0:	0800aa5c 	.word	0x0800aa5c
 80053c4:	20000000 	.word	0x20000000
 80053c8:	20000004 	.word	0x20000004

080053cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	2300      	movs	r3, #0
 80053de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053e4:	4b67      	ldr	r3, [pc, #412]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 030c 	and.w	r3, r3, #12
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d00d      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0x40>
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	f200 80bd 	bhi.w	8005570 <HAL_RCC_GetSysClockFreq+0x1a4>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x34>
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d003      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x3a>
 80053fe:	e0b7      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005400:	4b61      	ldr	r3, [pc, #388]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005402:	60bb      	str	r3, [r7, #8]
       break;
 8005404:	e0b7      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005406:	4b61      	ldr	r3, [pc, #388]	; (800558c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005408:	60bb      	str	r3, [r7, #8]
      break;
 800540a:	e0b4      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800540c:	4b5d      	ldr	r3, [pc, #372]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005414:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005416:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d04d      	beq.n	80054be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005422:	4b58      	ldr	r3, [pc, #352]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	461a      	mov	r2, r3
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005432:	f04f 0100 	mov.w	r1, #0
 8005436:	ea02 0800 	and.w	r8, r2, r0
 800543a:	ea03 0901 	and.w	r9, r3, r1
 800543e:	4640      	mov	r0, r8
 8005440:	4649      	mov	r1, r9
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	014b      	lsls	r3, r1, #5
 800544c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005450:	0142      	lsls	r2, r0, #5
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	ebb0 0008 	subs.w	r0, r0, r8
 800545a:	eb61 0109 	sbc.w	r1, r1, r9
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	018b      	lsls	r3, r1, #6
 8005468:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800546c:	0182      	lsls	r2, r0, #6
 800546e:	1a12      	subs	r2, r2, r0
 8005470:	eb63 0301 	sbc.w	r3, r3, r1
 8005474:	f04f 0000 	mov.w	r0, #0
 8005478:	f04f 0100 	mov.w	r1, #0
 800547c:	00d9      	lsls	r1, r3, #3
 800547e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005482:	00d0      	lsls	r0, r2, #3
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	eb12 0208 	adds.w	r2, r2, r8
 800548c:	eb43 0309 	adc.w	r3, r3, r9
 8005490:	f04f 0000 	mov.w	r0, #0
 8005494:	f04f 0100 	mov.w	r1, #0
 8005498:	0259      	lsls	r1, r3, #9
 800549a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800549e:	0250      	lsls	r0, r2, #9
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4610      	mov	r0, r2
 80054a6:	4619      	mov	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	f7fb fbe2 	bl	8000c78 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4613      	mov	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e04a      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054be:	4b31      	ldr	r3, [pc, #196]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	099b      	lsrs	r3, r3, #6
 80054c4:	461a      	mov	r2, r3
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054ce:	f04f 0100 	mov.w	r1, #0
 80054d2:	ea02 0400 	and.w	r4, r2, r0
 80054d6:	ea03 0501 	and.w	r5, r3, r1
 80054da:	4620      	mov	r0, r4
 80054dc:	4629      	mov	r1, r5
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	014b      	lsls	r3, r1, #5
 80054e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054ec:	0142      	lsls	r2, r0, #5
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	1b00      	subs	r0, r0, r4
 80054f4:	eb61 0105 	sbc.w	r1, r1, r5
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	018b      	lsls	r3, r1, #6
 8005502:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005506:	0182      	lsls	r2, r0, #6
 8005508:	1a12      	subs	r2, r2, r0
 800550a:	eb63 0301 	sbc.w	r3, r3, r1
 800550e:	f04f 0000 	mov.w	r0, #0
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	00d9      	lsls	r1, r3, #3
 8005518:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800551c:	00d0      	lsls	r0, r2, #3
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	1912      	adds	r2, r2, r4
 8005524:	eb45 0303 	adc.w	r3, r5, r3
 8005528:	f04f 0000 	mov.w	r0, #0
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	0299      	lsls	r1, r3, #10
 8005532:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005536:	0290      	lsls	r0, r2, #10
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	461a      	mov	r2, r3
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	f7fb fb96 	bl	8000c78 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4613      	mov	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	3301      	adds	r3, #1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	60bb      	str	r3, [r7, #8]
      break;
 800556e:	e002      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005572:	60bb      	str	r3, [r7, #8]
      break;
 8005574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005576:	68bb      	ldr	r3, [r7, #8]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005582:	bf00      	nop
 8005584:	40023800 	.word	0x40023800
 8005588:	00f42400 	.word	0x00f42400
 800558c:	007a1200 	.word	0x007a1200

08005590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005594:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005596:	681b      	ldr	r3, [r3, #0]
}
 8005598:	4618      	mov	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000000 	.word	0x20000000

080055a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055ac:	f7ff fff0 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	0a9b      	lsrs	r3, r3, #10
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4903      	ldr	r1, [pc, #12]	; (80055cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40023800 	.word	0x40023800
 80055cc:	0800aa6c 	.word	0x0800aa6c

080055d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055d4:	f7ff ffdc 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	0b5b      	lsrs	r3, r3, #13
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	4903      	ldr	r1, [pc, #12]	; (80055f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e6:	5ccb      	ldrb	r3, [r1, r3]
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40023800 	.word	0x40023800
 80055f4:	0800aa6c 	.word	0x0800aa6c

080055f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e041      	b.n	800568e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc fee8 	bl	80023f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f000 fb6c 	bl	8005d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d001      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e044      	b.n	800573a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <HAL_TIM_Base_Start_IT+0xb0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d018      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x6c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056da:	d013      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x6c>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1a      	ldr	r2, [pc, #104]	; (800574c <HAL_TIM_Base_Start_IT+0xb4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00e      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x6c>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a19      	ldr	r2, [pc, #100]	; (8005750 <HAL_TIM_Base_Start_IT+0xb8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d009      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x6c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a17      	ldr	r2, [pc, #92]	; (8005754 <HAL_TIM_Base_Start_IT+0xbc>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d004      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x6c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a16      	ldr	r2, [pc, #88]	; (8005758 <HAL_TIM_Base_Start_IT+0xc0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d111      	bne.n	8005728 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b06      	cmp	r3, #6
 8005714:	d010      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005726:	e007      	b.n	8005738 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40014000 	.word	0x40014000

0800575c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6a1a      	ldr	r2, [r3, #32]
 800577a:	f241 1311 	movw	r3, #4369	; 0x1111
 800577e:	4013      	ands	r3, r2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10f      	bne.n	80057a4 <HAL_TIM_Base_Stop_IT+0x48>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6a1a      	ldr	r2, [r3, #32]
 800578a:	f240 4344 	movw	r3, #1092	; 0x444
 800578e:	4013      	ands	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <HAL_TIM_Base_Stop_IT+0x48>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e041      	b.n	8005850 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f839 	bl	8005858 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f000 fa8b 	bl	8005d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b02      	cmp	r3, #2
 8005880:	d122      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b02      	cmp	r3, #2
 800588e:	d11b      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0202 	mvn.w	r2, #2
 8005898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa11 	bl	8005cd6 <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fa03 	bl	8005cc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fa14 	bl	8005cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d122      	bne.n	800591c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d11b      	bne.n	800591c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0204 	mvn.w	r2, #4
 80058ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9e7 	bl	8005cd6 <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f9d9 	bl	8005cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f9ea 	bl	8005cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b08      	cmp	r3, #8
 8005928:	d122      	bne.n	8005970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b08      	cmp	r3, #8
 8005936:	d11b      	bne.n	8005970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0208 	mvn.w	r2, #8
 8005940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2204      	movs	r2, #4
 8005946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f9bd 	bl	8005cd6 <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9af 	bl	8005cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f9c0 	bl	8005cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0310 	and.w	r3, r3, #16
 800597a:	2b10      	cmp	r3, #16
 800597c:	d122      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b10      	cmp	r3, #16
 800598a:	d11b      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0210 	mvn.w	r2, #16
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2208      	movs	r2, #8
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f993 	bl	8005cd6 <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f985 	bl	8005cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f996 	bl	8005cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10e      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0201 	mvn.w	r2, #1
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fb ff44 	bl	8001878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b80      	cmp	r3, #128	; 0x80
 80059fc:	d10e      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	d107      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fcec 	bl	80063f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d10e      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d107      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f95b 	bl	8005cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d10e      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d107      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0220 	mvn.w	r2, #32
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fcb6 	bl	80063e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e048      	b.n	8005b2c <HAL_TIM_OC_ConfigChannel+0xb0>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b0c      	cmp	r3, #12
 8005aa6:	d839      	bhi.n	8005b1c <HAL_TIM_OC_ConfigChannel+0xa0>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005ae5 	.word	0x08005ae5
 8005ab4:	08005b1d 	.word	0x08005b1d
 8005ab8:	08005b1d 	.word	0x08005b1d
 8005abc:	08005b1d 	.word	0x08005b1d
 8005ac0:	08005af3 	.word	0x08005af3
 8005ac4:	08005b1d 	.word	0x08005b1d
 8005ac8:	08005b1d 	.word	0x08005b1d
 8005acc:	08005b1d 	.word	0x08005b1d
 8005ad0:	08005b01 	.word	0x08005b01
 8005ad4:	08005b1d 	.word	0x08005b1d
 8005ad8:	08005b1d 	.word	0x08005b1d
 8005adc:	08005b1d 	.word	0x08005b1d
 8005ae0:	08005b0f 	.word	0x08005b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f992 	bl	8005e14 <TIM_OC1_SetConfig>
      break;
 8005af0:	e017      	b.n	8005b22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f9f1 	bl	8005ee0 <TIM_OC2_SetConfig>
      break;
 8005afe:	e010      	b.n	8005b22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fa56 	bl	8005fb8 <TIM_OC3_SetConfig>
      break;
 8005b0c:	e009      	b.n	8005b22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fab9 	bl	800608c <TIM_OC4_SetConfig>
      break;
 8005b1a:	e002      	b.n	8005b22 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_TIM_ConfigClockSource+0x1c>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e0b4      	b.n	8005cba <HAL_TIM_ConfigClockSource+0x186>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b88:	d03e      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0xd4>
 8005b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8e:	f200 8087 	bhi.w	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	f000 8086 	beq.w	8005ca6 <HAL_TIM_ConfigClockSource+0x172>
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	d87f      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba0:	2b70      	cmp	r3, #112	; 0x70
 8005ba2:	d01a      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0xa6>
 8005ba4:	2b70      	cmp	r3, #112	; 0x70
 8005ba6:	d87b      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba8:	2b60      	cmp	r3, #96	; 0x60
 8005baa:	d050      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0x11a>
 8005bac:	2b60      	cmp	r3, #96	; 0x60
 8005bae:	d877      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb0:	2b50      	cmp	r3, #80	; 0x50
 8005bb2:	d03c      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0xfa>
 8005bb4:	2b50      	cmp	r3, #80	; 0x50
 8005bb6:	d873      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d058      	beq.n	8005c6e <HAL_TIM_ConfigClockSource+0x13a>
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	d86f      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b30      	cmp	r3, #48	; 0x30
 8005bc2:	d064      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x15a>
 8005bc4:	2b30      	cmp	r3, #48	; 0x30
 8005bc6:	d86b      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d060      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d867      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d05c      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x15a>
 8005bd4:	2b10      	cmp	r3, #16
 8005bd6:	d05a      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x15a>
 8005bd8:	e062      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6899      	ldr	r1, [r3, #8]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f000 fb19 	bl	8006220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	609a      	str	r2, [r3, #8]
      break;
 8005c06:	e04f      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	6899      	ldr	r1, [r3, #8]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f000 fb02 	bl	8006220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c2a:	609a      	str	r2, [r3, #8]
      break;
 8005c2c:	e03c      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6859      	ldr	r1, [r3, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f000 fa76 	bl	800612c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2150      	movs	r1, #80	; 0x50
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 facf 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005c4c:	e02c      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6859      	ldr	r1, [r3, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f000 fa95 	bl	800618a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2160      	movs	r1, #96	; 0x60
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fabf 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005c6c:	e01c      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6859      	ldr	r1, [r3, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f000 fa56 	bl	800612c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2140      	movs	r1, #64	; 0x40
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 faaf 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005c8c:	e00c      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f000 faa6 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005c9e:	e003      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca4:	e000      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a34      	ldr	r2, [pc, #208]	; (8005df8 <TIM_Base_SetConfig+0xe4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00f      	beq.n	8005d4c <TIM_Base_SetConfig+0x38>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d00b      	beq.n	8005d4c <TIM_Base_SetConfig+0x38>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a31      	ldr	r2, [pc, #196]	; (8005dfc <TIM_Base_SetConfig+0xe8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d007      	beq.n	8005d4c <TIM_Base_SetConfig+0x38>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a30      	ldr	r2, [pc, #192]	; (8005e00 <TIM_Base_SetConfig+0xec>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_Base_SetConfig+0x38>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a2f      	ldr	r2, [pc, #188]	; (8005e04 <TIM_Base_SetConfig+0xf0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d108      	bne.n	8005d5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a25      	ldr	r2, [pc, #148]	; (8005df8 <TIM_Base_SetConfig+0xe4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01b      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6c:	d017      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <TIM_Base_SetConfig+0xe8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d013      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <TIM_Base_SetConfig+0xec>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00f      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a20      	ldr	r2, [pc, #128]	; (8005e04 <TIM_Base_SetConfig+0xf0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00b      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <TIM_Base_SetConfig+0xf4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d007      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <TIM_Base_SetConfig+0xf8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_Base_SetConfig+0x8a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <TIM_Base_SetConfig+0xfc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d108      	bne.n	8005db0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a08      	ldr	r2, [pc, #32]	; (8005df8 <TIM_Base_SetConfig+0xe4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d103      	bne.n	8005de4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	615a      	str	r2, [r3, #20]
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800

08005e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f023 0201 	bic.w	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 0302 	bic.w	r3, r3, #2
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a1c      	ldr	r2, [pc, #112]	; (8005edc <TIM_OC1_SetConfig+0xc8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10c      	bne.n	8005e8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0308 	bic.w	r3, r3, #8
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 0304 	bic.w	r3, r3, #4
 8005e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a13      	ldr	r2, [pc, #76]	; (8005edc <TIM_OC1_SetConfig+0xc8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d111      	bne.n	8005eb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40010000 	.word	0x40010000

08005ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f023 0210 	bic.w	r2, r3, #16
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f023 0320 	bic.w	r3, r3, #32
 8005f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a1e      	ldr	r2, [pc, #120]	; (8005fb4 <TIM_OC2_SetConfig+0xd4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10d      	bne.n	8005f5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <TIM_OC2_SetConfig+0xd4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d113      	bne.n	8005f8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	40010000 	.word	0x40010000

08005fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <TIM_OC3_SetConfig+0xd0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d10d      	bne.n	8006032 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800601c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a14      	ldr	r2, [pc, #80]	; (8006088 <TIM_OC3_SetConfig+0xd0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d113      	bne.n	8006062 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	621a      	str	r2, [r3, #32]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40010000 	.word	0x40010000

0800608c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	031b      	lsls	r3, r3, #12
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a10      	ldr	r2, [pc, #64]	; (8006128 <TIM_OC4_SetConfig+0x9c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d109      	bne.n	8006100 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	019b      	lsls	r3, r3, #6
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000

0800612c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f023 030a 	bic.w	r3, r3, #10
 8006168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800618a:	b480      	push	{r7}
 800618c:	b087      	sub	sp, #28
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0210 	bic.w	r2, r3, #16
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	f043 0307 	orr.w	r3, r3, #7
 800620c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800623a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	021a      	lsls	r2, r3, #8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	431a      	orrs	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4313      	orrs	r3, r2
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	609a      	str	r2, [r3, #8]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006274:	2302      	movs	r3, #2
 8006276:	e050      	b.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d018      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c4:	d013      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a18      	ldr	r2, [pc, #96]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a16      	ldr	r2, [pc, #88]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a15      	ldr	r2, [pc, #84]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a13      	ldr	r2, [pc, #76]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d10c      	bne.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40010000 	.word	0x40010000
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40000c00 	.word	0x40000c00
 8006338:	40014000 	.word	0x40014000

0800633c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006354:	2302      	movs	r3, #2
 8006356:	e03d      	b.n	80063d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e03f      	b.n	800649a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fc fa80 	bl	8002934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2224      	movs	r2, #36	; 0x24
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800644a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 ff97 	bl	8007380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695a      	ldr	r2, [r3, #20]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b08a      	sub	sp, #40	; 0x28
 80064a6:	af02      	add	r7, sp, #8
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	603b      	str	r3, [r7, #0]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d17c      	bne.n	80065bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_UART_Transmit+0x2c>
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e075      	b.n	80065be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_UART_Transmit+0x3e>
 80064dc:	2302      	movs	r3, #2
 80064de:	e06e      	b.n	80065be <HAL_UART_Transmit+0x11c>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2221      	movs	r2, #33	; 0x21
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064f6:	f7fc fbcf 	bl	8002c98 <HAL_GetTick>
 80064fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	88fa      	ldrh	r2, [r7, #6]
 8006500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006510:	d108      	bne.n	8006524 <HAL_UART_Transmit+0x82>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e003      	b.n	800652c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006534:	e02a      	b.n	800658c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2200      	movs	r2, #0
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fc53 	bl	8006dec <UART_WaitOnFlagUntilTimeout>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e036      	b.n	80065be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	3302      	adds	r3, #2
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	e007      	b.n	800657e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	3301      	adds	r3, #1
 800657c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1cf      	bne.n	8006536 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	2140      	movs	r1, #64	; 0x40
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fc23 	bl	8006dec <UART_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e006      	b.n	80065be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e000      	b.n	80065be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065bc:	2302      	movs	r3, #2
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b08c      	sub	sp, #48	; 0x30
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	4613      	mov	r3, r2
 80065d2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d152      	bne.n	8006686 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e04b      	b.n	8006688 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e044      	b.n	8006688 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	461a      	mov	r2, r3
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fc58 	bl	8006ec8 <UART_Start_Receive_DMA>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800661e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006622:	2b00      	cmp	r3, #0
 8006624:	d12c      	bne.n	8006680 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	2b01      	cmp	r3, #1
 800662c:	d125      	bne.n	800667a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800662e:	2300      	movs	r3, #0
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	617b      	str	r3, [r7, #20]
   return(result);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f043 0310 	orr.w	r3, r3, #16
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006664:	627a      	str	r2, [r7, #36]	; 0x24
 8006666:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6a39      	ldr	r1, [r7, #32]
 800666a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	61fb      	str	r3, [r7, #28]
   return(result);
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e5      	bne.n	8006644 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006678:	e002      	b.n	8006680 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006684:	e000      	b.n	8006688 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006686:	2302      	movs	r3, #2
  }
}
 8006688:	4618      	mov	r0, r3
 800668a:	3730      	adds	r7, #48	; 0x30
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b0ba      	sub	sp, #232	; 0xe8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066bc:	2300      	movs	r3, #0
 80066be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80066ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10f      	bne.n	80066f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <HAL_UART_IRQHandler+0x66>
 80066e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fd8b 	bl	800720a <UART_Receive_IT>
      return;
 80066f4:	e256      	b.n	8006ba4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 80de 	beq.w	80068bc <HAL_UART_IRQHandler+0x22c>
 8006700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d106      	bne.n	800671a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80d1 	beq.w	80068bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <HAL_UART_IRQHandler+0xae>
 8006726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	f043 0201 	orr.w	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00b      	beq.n	8006762 <HAL_UART_IRQHandler+0xd2>
 800674a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f043 0202 	orr.w	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00b      	beq.n	8006786 <HAL_UART_IRQHandler+0xf6>
 800676e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f043 0204 	orr.w	r2, r3, #4
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d011      	beq.n	80067b6 <HAL_UART_IRQHandler+0x126>
 8006792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d105      	bne.n	80067aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800679e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	f043 0208 	orr.w	r2, r3, #8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 81ed 	beq.w	8006b9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_UART_IRQHandler+0x14e>
 80067cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fd16 	bl	800720a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	bf0c      	ite	eq
 80067ec:	2301      	moveq	r3, #1
 80067ee:	2300      	movne	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <HAL_UART_IRQHandler+0x17a>
 8006802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d04f      	beq.n	80068aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fc1e 	bl	800704c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681a:	2b40      	cmp	r3, #64	; 0x40
 800681c:	d141      	bne.n	80068a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3314      	adds	r3, #20
 8006824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800684a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800684e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1d9      	bne.n	800681e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	2b00      	cmp	r3, #0
 8006870:	d013      	beq.n	800689a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	4a7d      	ldr	r2, [pc, #500]	; (8006a6c <HAL_UART_IRQHandler+0x3dc>)
 8006878:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	4618      	mov	r0, r3
 8006880:	f7fc fce2 	bl	8003248 <HAL_DMA_Abort_IT>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	e00e      	b.n	80068b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f9a4 	bl	8006be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a0:	e00a      	b.n	80068b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f9a0 	bl	8006be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	e006      	b.n	80068b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f99c 	bl	8006be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068b6:	e170      	b.n	8006b9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b8:	bf00      	nop
    return;
 80068ba:	e16e      	b.n	8006b9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	f040 814a 	bne.w	8006b5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8143 	beq.w	8006b5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 813c 	beq.w	8006b5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	f040 80b4 	bne.w	8006a70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8140 	beq.w	8006b9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006926:	429a      	cmp	r2, r3
 8006928:	f080 8139 	bcs.w	8006b9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006932:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693e:	f000 8088 	beq.w	8006a52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	330c      	adds	r3, #12
 8006948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800695c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800696e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800697a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1d9      	bne.n	8006942 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3314      	adds	r3, #20
 8006994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800699e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a0:	f023 0301 	bic.w	r3, r3, #1
 80069a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3314      	adds	r3, #20
 80069ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e1      	bne.n	800698e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3314      	adds	r3, #20
 80069d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3314      	adds	r3, #20
 80069ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e3      	bne.n	80069ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	330c      	adds	r3, #12
 8006a16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a22:	f023 0310 	bic.w	r3, r3, #16
 8006a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a34:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e3      	bne.n	8006a10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fc fb8b 	bl	8003168 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fa fee6 	bl	8001834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a68:	e099      	b.n	8006b9e <HAL_UART_IRQHandler+0x50e>
 8006a6a:	bf00      	nop
 8006a6c:	08007113 	.word	0x08007113
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 808b 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8086 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006aba:	647a      	str	r2, [r7, #68]	; 0x44
 8006abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e3      	bne.n	8006a96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3314      	adds	r3, #20
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	f023 0301 	bic.w	r3, r3, #1
 8006ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3314      	adds	r3, #20
 8006aee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006af2:	633a      	str	r2, [r7, #48]	; 0x30
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e3      	bne.n	8006ace <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	330c      	adds	r3, #12
 8006b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0310 	bic.w	r3, r3, #16
 8006b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b38:	61fa      	str	r2, [r7, #28]
 8006b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	69b9      	ldr	r1, [r7, #24]
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	617b      	str	r3, [r7, #20]
   return(result);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e3      	bne.n	8006b14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7fa fe6e 	bl	8001834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b58:	e023      	b.n	8006ba2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <HAL_UART_IRQHandler+0x4ea>
 8006b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fae1 	bl	800713a <UART_Transmit_IT>
    return;
 8006b78:	e014      	b.n	8006ba4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00e      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x514>
 8006b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d008      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fb21 	bl	80071da <UART_EndTransmit_IT>
    return;
 8006b98:	e004      	b.n	8006ba4 <HAL_UART_IRQHandler+0x514>
    return;
 8006b9a:	bf00      	nop
 8006b9c:	e002      	b.n	8006ba4 <HAL_UART_IRQHandler+0x514>
      return;
 8006b9e:	bf00      	nop
 8006ba0:	e000      	b.n	8006ba4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ba2:	bf00      	nop
  }
}
 8006ba4:	37e8      	adds	r7, #232	; 0xe8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop

08006bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b09c      	sub	sp, #112	; 0x70
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d172      	bne.n	8006cfe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3314      	adds	r3, #20
 8006c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	667b      	str	r3, [r7, #100]	; 0x64
 8006c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3314      	adds	r3, #20
 8006c70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c72:	647a      	str	r2, [r7, #68]	; 0x44
 8006c74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e5      	bne.n	8006c52 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3314      	adds	r3, #20
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	623b      	str	r3, [r7, #32]
   return(result);
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3314      	adds	r3, #20
 8006ca4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e5      	bne.n	8006c86 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d119      	bne.n	8006cfe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cea:	61fa      	str	r2, [r7, #28]
 8006cec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	69b9      	ldr	r1, [r7, #24]
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d106      	bne.n	8006d14 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d0e:	f7fa fd91 	bl	8001834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d12:	e002      	b.n	8006d1a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006d14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d16:	f7ff ff53 	bl	8006bc0 <HAL_UART_RxCpltCallback>
}
 8006d1a:	bf00      	nop
 8006d1c:	3770      	adds	r7, #112	; 0x70
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d108      	bne.n	8006d4a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d3c:	085b      	lsrs	r3, r3, #1
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	4619      	mov	r1, r3
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7fa fd76 	bl	8001834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d48:	e002      	b.n	8006d50 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff ff42 	bl	8006bd4 <HAL_UART_RxHalfCpltCallback>
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	bf0c      	ite	eq
 8006d78:	2301      	moveq	r3, #1
 8006d7a:	2300      	movne	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b21      	cmp	r3, #33	; 0x21
 8006d8a:	d108      	bne.n	8006d9e <UART_DMAError+0x46>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2200      	movs	r2, #0
 8006d96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d98:	68b8      	ldr	r0, [r7, #8]
 8006d9a:	f000 f92f 	bl	8006ffc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b40      	cmp	r3, #64	; 0x40
 8006daa:	bf0c      	ite	eq
 8006dac:	2301      	moveq	r3, #1
 8006dae:	2300      	movne	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b22      	cmp	r3, #34	; 0x22
 8006dbe:	d108      	bne.n	8006dd2 <UART_DMAError+0x7a>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d005      	beq.n	8006dd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006dcc:	68b8      	ldr	r0, [r7, #8]
 8006dce:	f000 f93d 	bl	800704c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	f043 0210 	orr.w	r2, r3, #16
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dde:	68b8      	ldr	r0, [r7, #8]
 8006de0:	f7ff ff02 	bl	8006be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de4:	bf00      	nop
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b090      	sub	sp, #64	; 0x40
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfc:	e050      	b.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e04:	d04c      	beq.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e0c:	f7fb ff44 	bl	8002c98 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d241      	bcs.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e3c:	637a      	str	r2, [r7, #52]	; 0x34
 8006e3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3314      	adds	r3, #20
 8006e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3314      	adds	r3, #20
 8006e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e70:	623a      	str	r2, [r7, #32]
 8006e72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	69f9      	ldr	r1, [r7, #28]
 8006e76:	6a3a      	ldr	r2, [r7, #32]
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e5      	bne.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e00f      	b.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	bf0c      	ite	eq
 8006eb0:	2301      	moveq	r3, #1
 8006eb2:	2300      	movne	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d09f      	beq.n	8006dfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3740      	adds	r7, #64	; 0x40
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b098      	sub	sp, #96	; 0x60
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	88fa      	ldrh	r2, [r7, #6]
 8006ee0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2222      	movs	r2, #34	; 0x22
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	4a3e      	ldr	r2, [pc, #248]	; (8006ff0 <UART_Start_Receive_DMA+0x128>)
 8006ef6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	4a3d      	ldr	r2, [pc, #244]	; (8006ff4 <UART_Start_Receive_DMA+0x12c>)
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	4a3c      	ldr	r2, [pc, #240]	; (8006ff8 <UART_Start_Receive_DMA+0x130>)
 8006f06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f10:	f107 0308 	add.w	r3, r7, #8
 8006f14:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	f7fc f8c6 	bl	80030b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f60:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e5      	bne.n	8006f4a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3314      	adds	r3, #20
 8006f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	657b      	str	r3, [r7, #84]	; 0x54
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3314      	adds	r3, #20
 8006f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f9e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e5      	bne.n	8006f7e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3314      	adds	r3, #20
 8006fb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc8:	653b      	str	r3, [r7, #80]	; 0x50
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8006fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6a39      	ldr	r1, [r7, #32]
 8006fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e5      	bne.n	8006fb2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3760      	adds	r7, #96	; 0x60
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	08006bfd 	.word	0x08006bfd
 8006ff4:	08006d23 	.word	0x08006d23
 8006ff8:	08006d59 	.word	0x08006d59

08006ffc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b089      	sub	sp, #36	; 0x24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
   return(result);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	61ba      	str	r2, [r7, #24]
 8007026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
   return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007040:	bf00      	nop
 8007042:	3724      	adds	r7, #36	; 0x24
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b095      	sub	sp, #84	; 0x54
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800706a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007074:	643a      	str	r2, [r7, #64]	; 0x40
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800707a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	61fb      	str	r3, [r7, #28]
   return(result);
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3314      	adds	r3, #20
 80070a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e5      	bne.n	8007088 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d119      	bne.n	80070f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f023 0310 	bic.w	r3, r3, #16
 80070da:	647b      	str	r3, [r7, #68]	; 0x44
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	330c      	adds	r3, #12
 80070e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070e4:	61ba      	str	r2, [r7, #24]
 80070e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6979      	ldr	r1, [r7, #20]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	613b      	str	r3, [r7, #16]
   return(result);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e5      	bne.n	80070c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007106:	bf00      	nop
 8007108:	3754      	adds	r7, #84	; 0x54
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f7ff fd5b 	bl	8006be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b21      	cmp	r3, #33	; 0x21
 800714c:	d13e      	bne.n	80071cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007156:	d114      	bne.n	8007182 <UART_Transmit_IT+0x48>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d110      	bne.n	8007182 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007174:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	1c9a      	adds	r2, r3, #2
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	621a      	str	r2, [r3, #32]
 8007180:	e008      	b.n	8007194 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	1c59      	adds	r1, r3, #1
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6211      	str	r1, [r2, #32]
 800718c:	781a      	ldrb	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29b      	uxth	r3, r3
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4619      	mov	r1, r3
 80071a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10f      	bne.n	80071c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	e000      	b.n	80071ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071cc:	2302      	movs	r3, #2
  }
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff fcd6 	bl	8006bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b08c      	sub	sp, #48	; 0x30
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b22      	cmp	r3, #34	; 0x22
 800721c:	f040 80ab 	bne.w	8007376 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007228:	d117      	bne.n	800725a <UART_Receive_IT+0x50>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d113      	bne.n	800725a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	b29a      	uxth	r2, r3
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007252:	1c9a      	adds	r2, r3, #2
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	629a      	str	r2, [r3, #40]	; 0x28
 8007258:	e026      	b.n	80072a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007260:	2300      	movs	r3, #0
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726c:	d007      	beq.n	800727e <UART_Receive_IT+0x74>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <UART_Receive_IT+0x82>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	b2da      	uxtb	r2, r3
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	e008      	b.n	800729e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007298:	b2da      	uxtb	r2, r3
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4619      	mov	r1, r3
 80072b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d15a      	bne.n	8007372 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0220 	bic.w	r2, r2, #32
 80072ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695a      	ldr	r2, [r3, #20]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d135      	bne.n	8007368 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	330c      	adds	r3, #12
 8007308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	613b      	str	r3, [r7, #16]
   return(result);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f023 0310 	bic.w	r3, r3, #16
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	330c      	adds	r3, #12
 8007320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007322:	623a      	str	r2, [r7, #32]
 8007324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	69f9      	ldr	r1, [r7, #28]
 8007328:	6a3a      	ldr	r2, [r7, #32]
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e5      	bne.n	8007302 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b10      	cmp	r3, #16
 8007342:	d10a      	bne.n	800735a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7fa fa67 	bl	8001834 <HAL_UARTEx_RxEventCallback>
 8007366:	e002      	b.n	800736e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff fc29 	bl	8006bc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	e002      	b.n	8007378 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e000      	b.n	8007378 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007376:	2302      	movs	r3, #2
  }
}
 8007378:	4618      	mov	r0, r3
 800737a:	3730      	adds	r7, #48	; 0x30
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	b09f      	sub	sp, #124	; 0x7c
 8007386:	af00      	add	r7, sp, #0
 8007388:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800738a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007396:	68d9      	ldr	r1, [r3, #12]
 8007398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	ea40 0301 	orr.w	r3, r0, r1
 80073a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	431a      	orrs	r2, r3
 80073b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80073ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073c4:	f021 010c 	bic.w	r1, r1, #12
 80073c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ce:	430b      	orrs	r3, r1
 80073d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073de:	6999      	ldr	r1, [r3, #24]
 80073e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	ea40 0301 	orr.w	r3, r0, r1
 80073e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4bc5      	ldr	r3, [pc, #788]	; (8007704 <UART_SetConfig+0x384>)
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d004      	beq.n	80073fe <UART_SetConfig+0x7e>
 80073f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4bc3      	ldr	r3, [pc, #780]	; (8007708 <UART_SetConfig+0x388>)
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d103      	bne.n	8007406 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073fe:	f7fe f8e7 	bl	80055d0 <HAL_RCC_GetPCLK2Freq>
 8007402:	6778      	str	r0, [r7, #116]	; 0x74
 8007404:	e002      	b.n	800740c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007406:	f7fe f8cf 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 800740a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007414:	f040 80b6 	bne.w	8007584 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800741a:	461c      	mov	r4, r3
 800741c:	f04f 0500 	mov.w	r5, #0
 8007420:	4622      	mov	r2, r4
 8007422:	462b      	mov	r3, r5
 8007424:	1891      	adds	r1, r2, r2
 8007426:	6439      	str	r1, [r7, #64]	; 0x40
 8007428:	415b      	adcs	r3, r3
 800742a:	647b      	str	r3, [r7, #68]	; 0x44
 800742c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007430:	1912      	adds	r2, r2, r4
 8007432:	eb45 0303 	adc.w	r3, r5, r3
 8007436:	f04f 0000 	mov.w	r0, #0
 800743a:	f04f 0100 	mov.w	r1, #0
 800743e:	00d9      	lsls	r1, r3, #3
 8007440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007444:	00d0      	lsls	r0, r2, #3
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	1911      	adds	r1, r2, r4
 800744c:	6639      	str	r1, [r7, #96]	; 0x60
 800744e:	416b      	adcs	r3, r5
 8007450:	667b      	str	r3, [r7, #100]	; 0x64
 8007452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	461a      	mov	r2, r3
 8007458:	f04f 0300 	mov.w	r3, #0
 800745c:	1891      	adds	r1, r2, r2
 800745e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007460:	415b      	adcs	r3, r3
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007468:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800746c:	f7f9 fc04 	bl	8000c78 <__aeabi_uldivmod>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4ba5      	ldr	r3, [pc, #660]	; (800770c <UART_SetConfig+0x38c>)
 8007476:	fba3 2302 	umull	r2, r3, r3, r2
 800747a:	095b      	lsrs	r3, r3, #5
 800747c:	011e      	lsls	r6, r3, #4
 800747e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007480:	461c      	mov	r4, r3
 8007482:	f04f 0500 	mov.w	r5, #0
 8007486:	4622      	mov	r2, r4
 8007488:	462b      	mov	r3, r5
 800748a:	1891      	adds	r1, r2, r2
 800748c:	6339      	str	r1, [r7, #48]	; 0x30
 800748e:	415b      	adcs	r3, r3
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
 8007492:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007496:	1912      	adds	r2, r2, r4
 8007498:	eb45 0303 	adc.w	r3, r5, r3
 800749c:	f04f 0000 	mov.w	r0, #0
 80074a0:	f04f 0100 	mov.w	r1, #0
 80074a4:	00d9      	lsls	r1, r3, #3
 80074a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074aa:	00d0      	lsls	r0, r2, #3
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	1911      	adds	r1, r2, r4
 80074b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80074b4:	416b      	adcs	r3, r5
 80074b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	461a      	mov	r2, r3
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	1891      	adds	r1, r2, r2
 80074c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80074c6:	415b      	adcs	r3, r3
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80074d2:	f7f9 fbd1 	bl	8000c78 <__aeabi_uldivmod>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4b8c      	ldr	r3, [pc, #560]	; (800770c <UART_SetConfig+0x38c>)
 80074dc:	fba3 1302 	umull	r1, r3, r3, r2
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	2164      	movs	r1, #100	; 0x64
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	3332      	adds	r3, #50	; 0x32
 80074ee:	4a87      	ldr	r2, [pc, #540]	; (800770c <UART_SetConfig+0x38c>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074fc:	441e      	add	r6, r3
 80074fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007500:	4618      	mov	r0, r3
 8007502:	f04f 0100 	mov.w	r1, #0
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	1894      	adds	r4, r2, r2
 800750c:	623c      	str	r4, [r7, #32]
 800750e:	415b      	adcs	r3, r3
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
 8007512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007516:	1812      	adds	r2, r2, r0
 8007518:	eb41 0303 	adc.w	r3, r1, r3
 800751c:	f04f 0400 	mov.w	r4, #0
 8007520:	f04f 0500 	mov.w	r5, #0
 8007524:	00dd      	lsls	r5, r3, #3
 8007526:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800752a:	00d4      	lsls	r4, r2, #3
 800752c:	4622      	mov	r2, r4
 800752e:	462b      	mov	r3, r5
 8007530:	1814      	adds	r4, r2, r0
 8007532:	653c      	str	r4, [r7, #80]	; 0x50
 8007534:	414b      	adcs	r3, r1
 8007536:	657b      	str	r3, [r7, #84]	; 0x54
 8007538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	461a      	mov	r2, r3
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	1891      	adds	r1, r2, r2
 8007544:	61b9      	str	r1, [r7, #24]
 8007546:	415b      	adcs	r3, r3
 8007548:	61fb      	str	r3, [r7, #28]
 800754a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800754e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007552:	f7f9 fb91 	bl	8000c78 <__aeabi_uldivmod>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	4b6c      	ldr	r3, [pc, #432]	; (800770c <UART_SetConfig+0x38c>)
 800755c:	fba3 1302 	umull	r1, r3, r3, r2
 8007560:	095b      	lsrs	r3, r3, #5
 8007562:	2164      	movs	r1, #100	; 0x64
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	3332      	adds	r3, #50	; 0x32
 800756e:	4a67      	ldr	r2, [pc, #412]	; (800770c <UART_SetConfig+0x38c>)
 8007570:	fba2 2303 	umull	r2, r3, r2, r3
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	f003 0207 	and.w	r2, r3, #7
 800757a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4432      	add	r2, r6
 8007580:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007582:	e0b9      	b.n	80076f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007586:	461c      	mov	r4, r3
 8007588:	f04f 0500 	mov.w	r5, #0
 800758c:	4622      	mov	r2, r4
 800758e:	462b      	mov	r3, r5
 8007590:	1891      	adds	r1, r2, r2
 8007592:	6139      	str	r1, [r7, #16]
 8007594:	415b      	adcs	r3, r3
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800759c:	1912      	adds	r2, r2, r4
 800759e:	eb45 0303 	adc.w	r3, r5, r3
 80075a2:	f04f 0000 	mov.w	r0, #0
 80075a6:	f04f 0100 	mov.w	r1, #0
 80075aa:	00d9      	lsls	r1, r3, #3
 80075ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075b0:	00d0      	lsls	r0, r2, #3
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	eb12 0804 	adds.w	r8, r2, r4
 80075ba:	eb43 0905 	adc.w	r9, r3, r5
 80075be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f04f 0100 	mov.w	r1, #0
 80075c8:	f04f 0200 	mov.w	r2, #0
 80075cc:	f04f 0300 	mov.w	r3, #0
 80075d0:	008b      	lsls	r3, r1, #2
 80075d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075d6:	0082      	lsls	r2, r0, #2
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f7f9 fb4c 	bl	8000c78 <__aeabi_uldivmod>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4b49      	ldr	r3, [pc, #292]	; (800770c <UART_SetConfig+0x38c>)
 80075e6:	fba3 2302 	umull	r2, r3, r3, r2
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	011e      	lsls	r6, r3, #4
 80075ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f0:	4618      	mov	r0, r3
 80075f2:	f04f 0100 	mov.w	r1, #0
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	1894      	adds	r4, r2, r2
 80075fc:	60bc      	str	r4, [r7, #8]
 80075fe:	415b      	adcs	r3, r3
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007606:	1812      	adds	r2, r2, r0
 8007608:	eb41 0303 	adc.w	r3, r1, r3
 800760c:	f04f 0400 	mov.w	r4, #0
 8007610:	f04f 0500 	mov.w	r5, #0
 8007614:	00dd      	lsls	r5, r3, #3
 8007616:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800761a:	00d4      	lsls	r4, r2, #3
 800761c:	4622      	mov	r2, r4
 800761e:	462b      	mov	r3, r5
 8007620:	1814      	adds	r4, r2, r0
 8007622:	64bc      	str	r4, [r7, #72]	; 0x48
 8007624:	414b      	adcs	r3, r1
 8007626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	4618      	mov	r0, r3
 800762e:	f04f 0100 	mov.w	r1, #0
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	f04f 0300 	mov.w	r3, #0
 800763a:	008b      	lsls	r3, r1, #2
 800763c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007640:	0082      	lsls	r2, r0, #2
 8007642:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007646:	f7f9 fb17 	bl	8000c78 <__aeabi_uldivmod>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4b2f      	ldr	r3, [pc, #188]	; (800770c <UART_SetConfig+0x38c>)
 8007650:	fba3 1302 	umull	r1, r3, r3, r2
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	2164      	movs	r1, #100	; 0x64
 8007658:	fb01 f303 	mul.w	r3, r1, r3
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	3332      	adds	r3, #50	; 0x32
 8007662:	4a2a      	ldr	r2, [pc, #168]	; (800770c <UART_SetConfig+0x38c>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800766e:	441e      	add	r6, r3
 8007670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007672:	4618      	mov	r0, r3
 8007674:	f04f 0100 	mov.w	r1, #0
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	1894      	adds	r4, r2, r2
 800767e:	603c      	str	r4, [r7, #0]
 8007680:	415b      	adcs	r3, r3
 8007682:	607b      	str	r3, [r7, #4]
 8007684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007688:	1812      	adds	r2, r2, r0
 800768a:	eb41 0303 	adc.w	r3, r1, r3
 800768e:	f04f 0400 	mov.w	r4, #0
 8007692:	f04f 0500 	mov.w	r5, #0
 8007696:	00dd      	lsls	r5, r3, #3
 8007698:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800769c:	00d4      	lsls	r4, r2, #3
 800769e:	4622      	mov	r2, r4
 80076a0:	462b      	mov	r3, r5
 80076a2:	eb12 0a00 	adds.w	sl, r2, r0
 80076a6:	eb43 0b01 	adc.w	fp, r3, r1
 80076aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f04f 0100 	mov.w	r1, #0
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	008b      	lsls	r3, r1, #2
 80076be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076c2:	0082      	lsls	r2, r0, #2
 80076c4:	4650      	mov	r0, sl
 80076c6:	4659      	mov	r1, fp
 80076c8:	f7f9 fad6 	bl	8000c78 <__aeabi_uldivmod>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4b0e      	ldr	r3, [pc, #56]	; (800770c <UART_SetConfig+0x38c>)
 80076d2:	fba3 1302 	umull	r1, r3, r3, r2
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	2164      	movs	r1, #100	; 0x64
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	3332      	adds	r3, #50	; 0x32
 80076e4:	4a09      	ldr	r2, [pc, #36]	; (800770c <UART_SetConfig+0x38c>)
 80076e6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	f003 020f 	and.w	r2, r3, #15
 80076f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4432      	add	r2, r6
 80076f6:	609a      	str	r2, [r3, #8]
}
 80076f8:	bf00      	nop
 80076fa:	377c      	adds	r7, #124	; 0x7c
 80076fc:	46bd      	mov	sp, r7
 80076fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007702:	bf00      	nop
 8007704:	40011000 	.word	0x40011000
 8007708:	40011400 	.word	0x40011400
 800770c:	51eb851f 	.word	0x51eb851f

08007710 <__errno>:
 8007710:	4b01      	ldr	r3, [pc, #4]	; (8007718 <__errno+0x8>)
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	2000000c 	.word	0x2000000c

0800771c <__libc_init_array>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	4d0d      	ldr	r5, [pc, #52]	; (8007754 <__libc_init_array+0x38>)
 8007720:	4c0d      	ldr	r4, [pc, #52]	; (8007758 <__libc_init_array+0x3c>)
 8007722:	1b64      	subs	r4, r4, r5
 8007724:	10a4      	asrs	r4, r4, #2
 8007726:	2600      	movs	r6, #0
 8007728:	42a6      	cmp	r6, r4
 800772a:	d109      	bne.n	8007740 <__libc_init_array+0x24>
 800772c:	4d0b      	ldr	r5, [pc, #44]	; (800775c <__libc_init_array+0x40>)
 800772e:	4c0c      	ldr	r4, [pc, #48]	; (8007760 <__libc_init_array+0x44>)
 8007730:	f002 ff18 	bl	800a564 <_init>
 8007734:	1b64      	subs	r4, r4, r5
 8007736:	10a4      	asrs	r4, r4, #2
 8007738:	2600      	movs	r6, #0
 800773a:	42a6      	cmp	r6, r4
 800773c:	d105      	bne.n	800774a <__libc_init_array+0x2e>
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	f855 3b04 	ldr.w	r3, [r5], #4
 8007744:	4798      	blx	r3
 8007746:	3601      	adds	r6, #1
 8007748:	e7ee      	b.n	8007728 <__libc_init_array+0xc>
 800774a:	f855 3b04 	ldr.w	r3, [r5], #4
 800774e:	4798      	blx	r3
 8007750:	3601      	adds	r6, #1
 8007752:	e7f2      	b.n	800773a <__libc_init_array+0x1e>
 8007754:	0800aecc 	.word	0x0800aecc
 8007758:	0800aecc 	.word	0x0800aecc
 800775c:	0800aecc 	.word	0x0800aecc
 8007760:	0800aed0 	.word	0x0800aed0

08007764 <memset>:
 8007764:	4402      	add	r2, r0
 8007766:	4603      	mov	r3, r0
 8007768:	4293      	cmp	r3, r2
 800776a:	d100      	bne.n	800776e <memset+0xa>
 800776c:	4770      	bx	lr
 800776e:	f803 1b01 	strb.w	r1, [r3], #1
 8007772:	e7f9      	b.n	8007768 <memset+0x4>

08007774 <__cvt>:
 8007774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	ec55 4b10 	vmov	r4, r5, d0
 800777c:	2d00      	cmp	r5, #0
 800777e:	460e      	mov	r6, r1
 8007780:	4619      	mov	r1, r3
 8007782:	462b      	mov	r3, r5
 8007784:	bfbb      	ittet	lt
 8007786:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800778a:	461d      	movlt	r5, r3
 800778c:	2300      	movge	r3, #0
 800778e:	232d      	movlt	r3, #45	; 0x2d
 8007790:	700b      	strb	r3, [r1, #0]
 8007792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007794:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007798:	4691      	mov	r9, r2
 800779a:	f023 0820 	bic.w	r8, r3, #32
 800779e:	bfbc      	itt	lt
 80077a0:	4622      	movlt	r2, r4
 80077a2:	4614      	movlt	r4, r2
 80077a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077a8:	d005      	beq.n	80077b6 <__cvt+0x42>
 80077aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077ae:	d100      	bne.n	80077b2 <__cvt+0x3e>
 80077b0:	3601      	adds	r6, #1
 80077b2:	2102      	movs	r1, #2
 80077b4:	e000      	b.n	80077b8 <__cvt+0x44>
 80077b6:	2103      	movs	r1, #3
 80077b8:	ab03      	add	r3, sp, #12
 80077ba:	9301      	str	r3, [sp, #4]
 80077bc:	ab02      	add	r3, sp, #8
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	ec45 4b10 	vmov	d0, r4, r5
 80077c4:	4653      	mov	r3, sl
 80077c6:	4632      	mov	r2, r6
 80077c8:	f000 fd6e 	bl	80082a8 <_dtoa_r>
 80077cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077d0:	4607      	mov	r7, r0
 80077d2:	d102      	bne.n	80077da <__cvt+0x66>
 80077d4:	f019 0f01 	tst.w	r9, #1
 80077d8:	d022      	beq.n	8007820 <__cvt+0xac>
 80077da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077de:	eb07 0906 	add.w	r9, r7, r6
 80077e2:	d110      	bne.n	8007806 <__cvt+0x92>
 80077e4:	783b      	ldrb	r3, [r7, #0]
 80077e6:	2b30      	cmp	r3, #48	; 0x30
 80077e8:	d10a      	bne.n	8007800 <__cvt+0x8c>
 80077ea:	2200      	movs	r2, #0
 80077ec:	2300      	movs	r3, #0
 80077ee:	4620      	mov	r0, r4
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7f9 f981 	bl	8000af8 <__aeabi_dcmpeq>
 80077f6:	b918      	cbnz	r0, 8007800 <__cvt+0x8c>
 80077f8:	f1c6 0601 	rsb	r6, r6, #1
 80077fc:	f8ca 6000 	str.w	r6, [sl]
 8007800:	f8da 3000 	ldr.w	r3, [sl]
 8007804:	4499      	add	r9, r3
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	4620      	mov	r0, r4
 800780c:	4629      	mov	r1, r5
 800780e:	f7f9 f973 	bl	8000af8 <__aeabi_dcmpeq>
 8007812:	b108      	cbz	r0, 8007818 <__cvt+0xa4>
 8007814:	f8cd 900c 	str.w	r9, [sp, #12]
 8007818:	2230      	movs	r2, #48	; 0x30
 800781a:	9b03      	ldr	r3, [sp, #12]
 800781c:	454b      	cmp	r3, r9
 800781e:	d307      	bcc.n	8007830 <__cvt+0xbc>
 8007820:	9b03      	ldr	r3, [sp, #12]
 8007822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007824:	1bdb      	subs	r3, r3, r7
 8007826:	4638      	mov	r0, r7
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	b004      	add	sp, #16
 800782c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007830:	1c59      	adds	r1, r3, #1
 8007832:	9103      	str	r1, [sp, #12]
 8007834:	701a      	strb	r2, [r3, #0]
 8007836:	e7f0      	b.n	800781a <__cvt+0xa6>

08007838 <__exponent>:
 8007838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800783a:	4603      	mov	r3, r0
 800783c:	2900      	cmp	r1, #0
 800783e:	bfb8      	it	lt
 8007840:	4249      	neglt	r1, r1
 8007842:	f803 2b02 	strb.w	r2, [r3], #2
 8007846:	bfb4      	ite	lt
 8007848:	222d      	movlt	r2, #45	; 0x2d
 800784a:	222b      	movge	r2, #43	; 0x2b
 800784c:	2909      	cmp	r1, #9
 800784e:	7042      	strb	r2, [r0, #1]
 8007850:	dd2a      	ble.n	80078a8 <__exponent+0x70>
 8007852:	f10d 0407 	add.w	r4, sp, #7
 8007856:	46a4      	mov	ip, r4
 8007858:	270a      	movs	r7, #10
 800785a:	46a6      	mov	lr, r4
 800785c:	460a      	mov	r2, r1
 800785e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007862:	fb07 1516 	mls	r5, r7, r6, r1
 8007866:	3530      	adds	r5, #48	; 0x30
 8007868:	2a63      	cmp	r2, #99	; 0x63
 800786a:	f104 34ff 	add.w	r4, r4, #4294967295
 800786e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007872:	4631      	mov	r1, r6
 8007874:	dcf1      	bgt.n	800785a <__exponent+0x22>
 8007876:	3130      	adds	r1, #48	; 0x30
 8007878:	f1ae 0502 	sub.w	r5, lr, #2
 800787c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007880:	1c44      	adds	r4, r0, #1
 8007882:	4629      	mov	r1, r5
 8007884:	4561      	cmp	r1, ip
 8007886:	d30a      	bcc.n	800789e <__exponent+0x66>
 8007888:	f10d 0209 	add.w	r2, sp, #9
 800788c:	eba2 020e 	sub.w	r2, r2, lr
 8007890:	4565      	cmp	r5, ip
 8007892:	bf88      	it	hi
 8007894:	2200      	movhi	r2, #0
 8007896:	4413      	add	r3, r2
 8007898:	1a18      	subs	r0, r3, r0
 800789a:	b003      	add	sp, #12
 800789c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800789e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078a6:	e7ed      	b.n	8007884 <__exponent+0x4c>
 80078a8:	2330      	movs	r3, #48	; 0x30
 80078aa:	3130      	adds	r1, #48	; 0x30
 80078ac:	7083      	strb	r3, [r0, #2]
 80078ae:	70c1      	strb	r1, [r0, #3]
 80078b0:	1d03      	adds	r3, r0, #4
 80078b2:	e7f1      	b.n	8007898 <__exponent+0x60>

080078b4 <_printf_float>:
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	ed2d 8b02 	vpush	{d8}
 80078bc:	b08d      	sub	sp, #52	; 0x34
 80078be:	460c      	mov	r4, r1
 80078c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078c4:	4616      	mov	r6, r2
 80078c6:	461f      	mov	r7, r3
 80078c8:	4605      	mov	r5, r0
 80078ca:	f001 faeb 	bl	8008ea4 <_localeconv_r>
 80078ce:	f8d0 a000 	ldr.w	sl, [r0]
 80078d2:	4650      	mov	r0, sl
 80078d4:	f7f8 fc8e 	bl	80001f4 <strlen>
 80078d8:	2300      	movs	r3, #0
 80078da:	930a      	str	r3, [sp, #40]	; 0x28
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	9305      	str	r3, [sp, #20]
 80078e0:	f8d8 3000 	ldr.w	r3, [r8]
 80078e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078e8:	3307      	adds	r3, #7
 80078ea:	f023 0307 	bic.w	r3, r3, #7
 80078ee:	f103 0208 	add.w	r2, r3, #8
 80078f2:	f8c8 2000 	str.w	r2, [r8]
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007902:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	f8cd 8018 	str.w	r8, [sp, #24]
 800790c:	ee08 0a10 	vmov	s16, r0
 8007910:	4b9f      	ldr	r3, [pc, #636]	; (8007b90 <_printf_float+0x2dc>)
 8007912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007916:	f04f 32ff 	mov.w	r2, #4294967295
 800791a:	f7f9 f91f 	bl	8000b5c <__aeabi_dcmpun>
 800791e:	bb88      	cbnz	r0, 8007984 <_printf_float+0xd0>
 8007920:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007924:	4b9a      	ldr	r3, [pc, #616]	; (8007b90 <_printf_float+0x2dc>)
 8007926:	f04f 32ff 	mov.w	r2, #4294967295
 800792a:	f7f9 f8f9 	bl	8000b20 <__aeabi_dcmple>
 800792e:	bb48      	cbnz	r0, 8007984 <_printf_float+0xd0>
 8007930:	2200      	movs	r2, #0
 8007932:	2300      	movs	r3, #0
 8007934:	4640      	mov	r0, r8
 8007936:	4649      	mov	r1, r9
 8007938:	f7f9 f8e8 	bl	8000b0c <__aeabi_dcmplt>
 800793c:	b110      	cbz	r0, 8007944 <_printf_float+0x90>
 800793e:	232d      	movs	r3, #45	; 0x2d
 8007940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007944:	4b93      	ldr	r3, [pc, #588]	; (8007b94 <_printf_float+0x2e0>)
 8007946:	4894      	ldr	r0, [pc, #592]	; (8007b98 <_printf_float+0x2e4>)
 8007948:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800794c:	bf94      	ite	ls
 800794e:	4698      	movls	r8, r3
 8007950:	4680      	movhi	r8, r0
 8007952:	2303      	movs	r3, #3
 8007954:	6123      	str	r3, [r4, #16]
 8007956:	9b05      	ldr	r3, [sp, #20]
 8007958:	f023 0204 	bic.w	r2, r3, #4
 800795c:	6022      	str	r2, [r4, #0]
 800795e:	f04f 0900 	mov.w	r9, #0
 8007962:	9700      	str	r7, [sp, #0]
 8007964:	4633      	mov	r3, r6
 8007966:	aa0b      	add	r2, sp, #44	; 0x2c
 8007968:	4621      	mov	r1, r4
 800796a:	4628      	mov	r0, r5
 800796c:	f000 f9d8 	bl	8007d20 <_printf_common>
 8007970:	3001      	adds	r0, #1
 8007972:	f040 8090 	bne.w	8007a96 <_printf_float+0x1e2>
 8007976:	f04f 30ff 	mov.w	r0, #4294967295
 800797a:	b00d      	add	sp, #52	; 0x34
 800797c:	ecbd 8b02 	vpop	{d8}
 8007980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007984:	4642      	mov	r2, r8
 8007986:	464b      	mov	r3, r9
 8007988:	4640      	mov	r0, r8
 800798a:	4649      	mov	r1, r9
 800798c:	f7f9 f8e6 	bl	8000b5c <__aeabi_dcmpun>
 8007990:	b140      	cbz	r0, 80079a4 <_printf_float+0xf0>
 8007992:	464b      	mov	r3, r9
 8007994:	2b00      	cmp	r3, #0
 8007996:	bfbc      	itt	lt
 8007998:	232d      	movlt	r3, #45	; 0x2d
 800799a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800799e:	487f      	ldr	r0, [pc, #508]	; (8007b9c <_printf_float+0x2e8>)
 80079a0:	4b7f      	ldr	r3, [pc, #508]	; (8007ba0 <_printf_float+0x2ec>)
 80079a2:	e7d1      	b.n	8007948 <_printf_float+0x94>
 80079a4:	6863      	ldr	r3, [r4, #4]
 80079a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079aa:	9206      	str	r2, [sp, #24]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	d13f      	bne.n	8007a30 <_printf_float+0x17c>
 80079b0:	2306      	movs	r3, #6
 80079b2:	6063      	str	r3, [r4, #4]
 80079b4:	9b05      	ldr	r3, [sp, #20]
 80079b6:	6861      	ldr	r1, [r4, #4]
 80079b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079bc:	2300      	movs	r3, #0
 80079be:	9303      	str	r3, [sp, #12]
 80079c0:	ab0a      	add	r3, sp, #40	; 0x28
 80079c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079c6:	ab09      	add	r3, sp, #36	; 0x24
 80079c8:	ec49 8b10 	vmov	d0, r8, r9
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	6022      	str	r2, [r4, #0]
 80079d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079d4:	4628      	mov	r0, r5
 80079d6:	f7ff fecd 	bl	8007774 <__cvt>
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079de:	2b47      	cmp	r3, #71	; 0x47
 80079e0:	4680      	mov	r8, r0
 80079e2:	d108      	bne.n	80079f6 <_printf_float+0x142>
 80079e4:	1cc8      	adds	r0, r1, #3
 80079e6:	db02      	blt.n	80079ee <_printf_float+0x13a>
 80079e8:	6863      	ldr	r3, [r4, #4]
 80079ea:	4299      	cmp	r1, r3
 80079ec:	dd41      	ble.n	8007a72 <_printf_float+0x1be>
 80079ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80079f2:	fa5f fb8b 	uxtb.w	fp, fp
 80079f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079fa:	d820      	bhi.n	8007a3e <_printf_float+0x18a>
 80079fc:	3901      	subs	r1, #1
 80079fe:	465a      	mov	r2, fp
 8007a00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a04:	9109      	str	r1, [sp, #36]	; 0x24
 8007a06:	f7ff ff17 	bl	8007838 <__exponent>
 8007a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a0c:	1813      	adds	r3, r2, r0
 8007a0e:	2a01      	cmp	r2, #1
 8007a10:	4681      	mov	r9, r0
 8007a12:	6123      	str	r3, [r4, #16]
 8007a14:	dc02      	bgt.n	8007a1c <_printf_float+0x168>
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	07d2      	lsls	r2, r2, #31
 8007a1a:	d501      	bpl.n	8007a20 <_printf_float+0x16c>
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d09c      	beq.n	8007962 <_printf_float+0xae>
 8007a28:	232d      	movs	r3, #45	; 0x2d
 8007a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a2e:	e798      	b.n	8007962 <_printf_float+0xae>
 8007a30:	9a06      	ldr	r2, [sp, #24]
 8007a32:	2a47      	cmp	r2, #71	; 0x47
 8007a34:	d1be      	bne.n	80079b4 <_printf_float+0x100>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1bc      	bne.n	80079b4 <_printf_float+0x100>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e7b9      	b.n	80079b2 <_printf_float+0xfe>
 8007a3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a42:	d118      	bne.n	8007a76 <_printf_float+0x1c2>
 8007a44:	2900      	cmp	r1, #0
 8007a46:	6863      	ldr	r3, [r4, #4]
 8007a48:	dd0b      	ble.n	8007a62 <_printf_float+0x1ae>
 8007a4a:	6121      	str	r1, [r4, #16]
 8007a4c:	b913      	cbnz	r3, 8007a54 <_printf_float+0x1a0>
 8007a4e:	6822      	ldr	r2, [r4, #0]
 8007a50:	07d0      	lsls	r0, r2, #31
 8007a52:	d502      	bpl.n	8007a5a <_printf_float+0x1a6>
 8007a54:	3301      	adds	r3, #1
 8007a56:	440b      	add	r3, r1
 8007a58:	6123      	str	r3, [r4, #16]
 8007a5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a5c:	f04f 0900 	mov.w	r9, #0
 8007a60:	e7de      	b.n	8007a20 <_printf_float+0x16c>
 8007a62:	b913      	cbnz	r3, 8007a6a <_printf_float+0x1b6>
 8007a64:	6822      	ldr	r2, [r4, #0]
 8007a66:	07d2      	lsls	r2, r2, #31
 8007a68:	d501      	bpl.n	8007a6e <_printf_float+0x1ba>
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	e7f4      	b.n	8007a58 <_printf_float+0x1a4>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e7f2      	b.n	8007a58 <_printf_float+0x1a4>
 8007a72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a78:	4299      	cmp	r1, r3
 8007a7a:	db05      	blt.n	8007a88 <_printf_float+0x1d4>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	6121      	str	r1, [r4, #16]
 8007a80:	07d8      	lsls	r0, r3, #31
 8007a82:	d5ea      	bpl.n	8007a5a <_printf_float+0x1a6>
 8007a84:	1c4b      	adds	r3, r1, #1
 8007a86:	e7e7      	b.n	8007a58 <_printf_float+0x1a4>
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	bfd4      	ite	le
 8007a8c:	f1c1 0202 	rsble	r2, r1, #2
 8007a90:	2201      	movgt	r2, #1
 8007a92:	4413      	add	r3, r2
 8007a94:	e7e0      	b.n	8007a58 <_printf_float+0x1a4>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	055a      	lsls	r2, r3, #21
 8007a9a:	d407      	bmi.n	8007aac <_printf_float+0x1f8>
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	4642      	mov	r2, r8
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	47b8      	blx	r7
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d12c      	bne.n	8007b04 <_printf_float+0x250>
 8007aaa:	e764      	b.n	8007976 <_printf_float+0xc2>
 8007aac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ab0:	f240 80e0 	bls.w	8007c74 <_printf_float+0x3c0>
 8007ab4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2300      	movs	r3, #0
 8007abc:	f7f9 f81c 	bl	8000af8 <__aeabi_dcmpeq>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d034      	beq.n	8007b2e <_printf_float+0x27a>
 8007ac4:	4a37      	ldr	r2, [pc, #220]	; (8007ba4 <_printf_float+0x2f0>)
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	47b8      	blx	r7
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f43f af51 	beq.w	8007976 <_printf_float+0xc2>
 8007ad4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	db02      	blt.n	8007ae2 <_printf_float+0x22e>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	07d8      	lsls	r0, r3, #31
 8007ae0:	d510      	bpl.n	8007b04 <_printf_float+0x250>
 8007ae2:	ee18 3a10 	vmov	r3, s16
 8007ae6:	4652      	mov	r2, sl
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f af41 	beq.w	8007976 <_printf_float+0xc2>
 8007af4:	f04f 0800 	mov.w	r8, #0
 8007af8:	f104 091a 	add.w	r9, r4, #26
 8007afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007afe:	3b01      	subs	r3, #1
 8007b00:	4543      	cmp	r3, r8
 8007b02:	dc09      	bgt.n	8007b18 <_printf_float+0x264>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	079b      	lsls	r3, r3, #30
 8007b08:	f100 8105 	bmi.w	8007d16 <_printf_float+0x462>
 8007b0c:	68e0      	ldr	r0, [r4, #12]
 8007b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b10:	4298      	cmp	r0, r3
 8007b12:	bfb8      	it	lt
 8007b14:	4618      	movlt	r0, r3
 8007b16:	e730      	b.n	800797a <_printf_float+0xc6>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	464a      	mov	r2, r9
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f af27 	beq.w	8007976 <_printf_float+0xc2>
 8007b28:	f108 0801 	add.w	r8, r8, #1
 8007b2c:	e7e6      	b.n	8007afc <_printf_float+0x248>
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	dc39      	bgt.n	8007ba8 <_printf_float+0x2f4>
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <_printf_float+0x2f0>)
 8007b36:	2301      	movs	r3, #1
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	f43f af19 	beq.w	8007976 <_printf_float+0xc2>
 8007b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	d102      	bne.n	8007b52 <_printf_float+0x29e>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	07d9      	lsls	r1, r3, #31
 8007b50:	d5d8      	bpl.n	8007b04 <_printf_float+0x250>
 8007b52:	ee18 3a10 	vmov	r3, s16
 8007b56:	4652      	mov	r2, sl
 8007b58:	4631      	mov	r1, r6
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47b8      	blx	r7
 8007b5e:	3001      	adds	r0, #1
 8007b60:	f43f af09 	beq.w	8007976 <_printf_float+0xc2>
 8007b64:	f04f 0900 	mov.w	r9, #0
 8007b68:	f104 0a1a 	add.w	sl, r4, #26
 8007b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b6e:	425b      	negs	r3, r3
 8007b70:	454b      	cmp	r3, r9
 8007b72:	dc01      	bgt.n	8007b78 <_printf_float+0x2c4>
 8007b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b76:	e792      	b.n	8007a9e <_printf_float+0x1ea>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	4652      	mov	r2, sl
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f aef7 	beq.w	8007976 <_printf_float+0xc2>
 8007b88:	f109 0901 	add.w	r9, r9, #1
 8007b8c:	e7ee      	b.n	8007b6c <_printf_float+0x2b8>
 8007b8e:	bf00      	nop
 8007b90:	7fefffff 	.word	0x7fefffff
 8007b94:	0800aa80 	.word	0x0800aa80
 8007b98:	0800aa84 	.word	0x0800aa84
 8007b9c:	0800aa8c 	.word	0x0800aa8c
 8007ba0:	0800aa88 	.word	0x0800aa88
 8007ba4:	0800aa90 	.word	0x0800aa90
 8007ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007baa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bac:	429a      	cmp	r2, r3
 8007bae:	bfa8      	it	ge
 8007bb0:	461a      	movge	r2, r3
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	4691      	mov	r9, r2
 8007bb6:	dc37      	bgt.n	8007c28 <_printf_float+0x374>
 8007bb8:	f04f 0b00 	mov.w	fp, #0
 8007bbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bc0:	f104 021a 	add.w	r2, r4, #26
 8007bc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bc6:	9305      	str	r3, [sp, #20]
 8007bc8:	eba3 0309 	sub.w	r3, r3, r9
 8007bcc:	455b      	cmp	r3, fp
 8007bce:	dc33      	bgt.n	8007c38 <_printf_float+0x384>
 8007bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	db3b      	blt.n	8007c50 <_printf_float+0x39c>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	07da      	lsls	r2, r3, #31
 8007bdc:	d438      	bmi.n	8007c50 <_printf_float+0x39c>
 8007bde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007be0:	9b05      	ldr	r3, [sp, #20]
 8007be2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	eba2 0901 	sub.w	r9, r2, r1
 8007bea:	4599      	cmp	r9, r3
 8007bec:	bfa8      	it	ge
 8007bee:	4699      	movge	r9, r3
 8007bf0:	f1b9 0f00 	cmp.w	r9, #0
 8007bf4:	dc35      	bgt.n	8007c62 <_printf_float+0x3ae>
 8007bf6:	f04f 0800 	mov.w	r8, #0
 8007bfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bfe:	f104 0a1a 	add.w	sl, r4, #26
 8007c02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c06:	1a9b      	subs	r3, r3, r2
 8007c08:	eba3 0309 	sub.w	r3, r3, r9
 8007c0c:	4543      	cmp	r3, r8
 8007c0e:	f77f af79 	ble.w	8007b04 <_printf_float+0x250>
 8007c12:	2301      	movs	r3, #1
 8007c14:	4652      	mov	r2, sl
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	f43f aeaa 	beq.w	8007976 <_printf_float+0xc2>
 8007c22:	f108 0801 	add.w	r8, r8, #1
 8007c26:	e7ec      	b.n	8007c02 <_printf_float+0x34e>
 8007c28:	4613      	mov	r3, r2
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	4628      	mov	r0, r5
 8007c30:	47b8      	blx	r7
 8007c32:	3001      	adds	r0, #1
 8007c34:	d1c0      	bne.n	8007bb8 <_printf_float+0x304>
 8007c36:	e69e      	b.n	8007976 <_printf_float+0xc2>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	9205      	str	r2, [sp, #20]
 8007c40:	47b8      	blx	r7
 8007c42:	3001      	adds	r0, #1
 8007c44:	f43f ae97 	beq.w	8007976 <_printf_float+0xc2>
 8007c48:	9a05      	ldr	r2, [sp, #20]
 8007c4a:	f10b 0b01 	add.w	fp, fp, #1
 8007c4e:	e7b9      	b.n	8007bc4 <_printf_float+0x310>
 8007c50:	ee18 3a10 	vmov	r3, s16
 8007c54:	4652      	mov	r2, sl
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d1be      	bne.n	8007bde <_printf_float+0x32a>
 8007c60:	e689      	b.n	8007976 <_printf_float+0xc2>
 8007c62:	9a05      	ldr	r2, [sp, #20]
 8007c64:	464b      	mov	r3, r9
 8007c66:	4442      	add	r2, r8
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	d1c1      	bne.n	8007bf6 <_printf_float+0x342>
 8007c72:	e680      	b.n	8007976 <_printf_float+0xc2>
 8007c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c76:	2a01      	cmp	r2, #1
 8007c78:	dc01      	bgt.n	8007c7e <_printf_float+0x3ca>
 8007c7a:	07db      	lsls	r3, r3, #31
 8007c7c:	d538      	bpl.n	8007cf0 <_printf_float+0x43c>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4642      	mov	r2, r8
 8007c82:	4631      	mov	r1, r6
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b8      	blx	r7
 8007c88:	3001      	adds	r0, #1
 8007c8a:	f43f ae74 	beq.w	8007976 <_printf_float+0xc2>
 8007c8e:	ee18 3a10 	vmov	r3, s16
 8007c92:	4652      	mov	r2, sl
 8007c94:	4631      	mov	r1, r6
 8007c96:	4628      	mov	r0, r5
 8007c98:	47b8      	blx	r7
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	f43f ae6b 	beq.w	8007976 <_printf_float+0xc2>
 8007ca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f7f8 ff26 	bl	8000af8 <__aeabi_dcmpeq>
 8007cac:	b9d8      	cbnz	r0, 8007ce6 <_printf_float+0x432>
 8007cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb0:	f108 0201 	add.w	r2, r8, #1
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d10e      	bne.n	8007cde <_printf_float+0x42a>
 8007cc0:	e659      	b.n	8007976 <_printf_float+0xc2>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	f43f ae52 	beq.w	8007976 <_printf_float+0xc2>
 8007cd2:	f108 0801 	add.w	r8, r8, #1
 8007cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	4543      	cmp	r3, r8
 8007cdc:	dcf1      	bgt.n	8007cc2 <_printf_float+0x40e>
 8007cde:	464b      	mov	r3, r9
 8007ce0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ce4:	e6dc      	b.n	8007aa0 <_printf_float+0x1ec>
 8007ce6:	f04f 0800 	mov.w	r8, #0
 8007cea:	f104 0a1a 	add.w	sl, r4, #26
 8007cee:	e7f2      	b.n	8007cd6 <_printf_float+0x422>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4642      	mov	r2, r8
 8007cf4:	e7df      	b.n	8007cb6 <_printf_float+0x402>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	464a      	mov	r2, r9
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	f43f ae38 	beq.w	8007976 <_printf_float+0xc2>
 8007d06:	f108 0801 	add.w	r8, r8, #1
 8007d0a:	68e3      	ldr	r3, [r4, #12]
 8007d0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d0e:	1a5b      	subs	r3, r3, r1
 8007d10:	4543      	cmp	r3, r8
 8007d12:	dcf0      	bgt.n	8007cf6 <_printf_float+0x442>
 8007d14:	e6fa      	b.n	8007b0c <_printf_float+0x258>
 8007d16:	f04f 0800 	mov.w	r8, #0
 8007d1a:	f104 0919 	add.w	r9, r4, #25
 8007d1e:	e7f4      	b.n	8007d0a <_printf_float+0x456>

08007d20 <_printf_common>:
 8007d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d24:	4616      	mov	r6, r2
 8007d26:	4699      	mov	r9, r3
 8007d28:	688a      	ldr	r2, [r1, #8]
 8007d2a:	690b      	ldr	r3, [r1, #16]
 8007d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d30:	4293      	cmp	r3, r2
 8007d32:	bfb8      	it	lt
 8007d34:	4613      	movlt	r3, r2
 8007d36:	6033      	str	r3, [r6, #0]
 8007d38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d3c:	4607      	mov	r7, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	b10a      	cbz	r2, 8007d46 <_printf_common+0x26>
 8007d42:	3301      	adds	r3, #1
 8007d44:	6033      	str	r3, [r6, #0]
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	0699      	lsls	r1, r3, #26
 8007d4a:	bf42      	ittt	mi
 8007d4c:	6833      	ldrmi	r3, [r6, #0]
 8007d4e:	3302      	addmi	r3, #2
 8007d50:	6033      	strmi	r3, [r6, #0]
 8007d52:	6825      	ldr	r5, [r4, #0]
 8007d54:	f015 0506 	ands.w	r5, r5, #6
 8007d58:	d106      	bne.n	8007d68 <_printf_common+0x48>
 8007d5a:	f104 0a19 	add.w	sl, r4, #25
 8007d5e:	68e3      	ldr	r3, [r4, #12]
 8007d60:	6832      	ldr	r2, [r6, #0]
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	42ab      	cmp	r3, r5
 8007d66:	dc26      	bgt.n	8007db6 <_printf_common+0x96>
 8007d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d6c:	1e13      	subs	r3, r2, #0
 8007d6e:	6822      	ldr	r2, [r4, #0]
 8007d70:	bf18      	it	ne
 8007d72:	2301      	movne	r3, #1
 8007d74:	0692      	lsls	r2, r2, #26
 8007d76:	d42b      	bmi.n	8007dd0 <_printf_common+0xb0>
 8007d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	4638      	mov	r0, r7
 8007d80:	47c0      	blx	r8
 8007d82:	3001      	adds	r0, #1
 8007d84:	d01e      	beq.n	8007dc4 <_printf_common+0xa4>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	68e5      	ldr	r5, [r4, #12]
 8007d8a:	6832      	ldr	r2, [r6, #0]
 8007d8c:	f003 0306 	and.w	r3, r3, #6
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	bf08      	it	eq
 8007d94:	1aad      	subeq	r5, r5, r2
 8007d96:	68a3      	ldr	r3, [r4, #8]
 8007d98:	6922      	ldr	r2, [r4, #16]
 8007d9a:	bf0c      	ite	eq
 8007d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da0:	2500      	movne	r5, #0
 8007da2:	4293      	cmp	r3, r2
 8007da4:	bfc4      	itt	gt
 8007da6:	1a9b      	subgt	r3, r3, r2
 8007da8:	18ed      	addgt	r5, r5, r3
 8007daa:	2600      	movs	r6, #0
 8007dac:	341a      	adds	r4, #26
 8007dae:	42b5      	cmp	r5, r6
 8007db0:	d11a      	bne.n	8007de8 <_printf_common+0xc8>
 8007db2:	2000      	movs	r0, #0
 8007db4:	e008      	b.n	8007dc8 <_printf_common+0xa8>
 8007db6:	2301      	movs	r3, #1
 8007db8:	4652      	mov	r2, sl
 8007dba:	4649      	mov	r1, r9
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	47c0      	blx	r8
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d103      	bne.n	8007dcc <_printf_common+0xac>
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dcc:	3501      	adds	r5, #1
 8007dce:	e7c6      	b.n	8007d5e <_printf_common+0x3e>
 8007dd0:	18e1      	adds	r1, r4, r3
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	2030      	movs	r0, #48	; 0x30
 8007dd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dda:	4422      	add	r2, r4
 8007ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007de0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007de4:	3302      	adds	r3, #2
 8007de6:	e7c7      	b.n	8007d78 <_printf_common+0x58>
 8007de8:	2301      	movs	r3, #1
 8007dea:	4622      	mov	r2, r4
 8007dec:	4649      	mov	r1, r9
 8007dee:	4638      	mov	r0, r7
 8007df0:	47c0      	blx	r8
 8007df2:	3001      	adds	r0, #1
 8007df4:	d0e6      	beq.n	8007dc4 <_printf_common+0xa4>
 8007df6:	3601      	adds	r6, #1
 8007df8:	e7d9      	b.n	8007dae <_printf_common+0x8e>
	...

08007dfc <_printf_i>:
 8007dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e00:	460c      	mov	r4, r1
 8007e02:	4691      	mov	r9, r2
 8007e04:	7e27      	ldrb	r7, [r4, #24]
 8007e06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e08:	2f78      	cmp	r7, #120	; 0x78
 8007e0a:	4680      	mov	r8, r0
 8007e0c:	469a      	mov	sl, r3
 8007e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e12:	d807      	bhi.n	8007e24 <_printf_i+0x28>
 8007e14:	2f62      	cmp	r7, #98	; 0x62
 8007e16:	d80a      	bhi.n	8007e2e <_printf_i+0x32>
 8007e18:	2f00      	cmp	r7, #0
 8007e1a:	f000 80d8 	beq.w	8007fce <_printf_i+0x1d2>
 8007e1e:	2f58      	cmp	r7, #88	; 0x58
 8007e20:	f000 80a3 	beq.w	8007f6a <_printf_i+0x16e>
 8007e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e2c:	e03a      	b.n	8007ea4 <_printf_i+0xa8>
 8007e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e32:	2b15      	cmp	r3, #21
 8007e34:	d8f6      	bhi.n	8007e24 <_printf_i+0x28>
 8007e36:	a001      	add	r0, pc, #4	; (adr r0, 8007e3c <_printf_i+0x40>)
 8007e38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e3c:	08007e95 	.word	0x08007e95
 8007e40:	08007ea9 	.word	0x08007ea9
 8007e44:	08007e25 	.word	0x08007e25
 8007e48:	08007e25 	.word	0x08007e25
 8007e4c:	08007e25 	.word	0x08007e25
 8007e50:	08007e25 	.word	0x08007e25
 8007e54:	08007ea9 	.word	0x08007ea9
 8007e58:	08007e25 	.word	0x08007e25
 8007e5c:	08007e25 	.word	0x08007e25
 8007e60:	08007e25 	.word	0x08007e25
 8007e64:	08007e25 	.word	0x08007e25
 8007e68:	08007fb5 	.word	0x08007fb5
 8007e6c:	08007ed9 	.word	0x08007ed9
 8007e70:	08007f97 	.word	0x08007f97
 8007e74:	08007e25 	.word	0x08007e25
 8007e78:	08007e25 	.word	0x08007e25
 8007e7c:	08007fd7 	.word	0x08007fd7
 8007e80:	08007e25 	.word	0x08007e25
 8007e84:	08007ed9 	.word	0x08007ed9
 8007e88:	08007e25 	.word	0x08007e25
 8007e8c:	08007e25 	.word	0x08007e25
 8007e90:	08007f9f 	.word	0x08007f9f
 8007e94:	680b      	ldr	r3, [r1, #0]
 8007e96:	1d1a      	adds	r2, r3, #4
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	600a      	str	r2, [r1, #0]
 8007e9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e0a3      	b.n	8007ff0 <_printf_i+0x1f4>
 8007ea8:	6825      	ldr	r5, [r4, #0]
 8007eaa:	6808      	ldr	r0, [r1, #0]
 8007eac:	062e      	lsls	r6, r5, #24
 8007eae:	f100 0304 	add.w	r3, r0, #4
 8007eb2:	d50a      	bpl.n	8007eca <_printf_i+0xce>
 8007eb4:	6805      	ldr	r5, [r0, #0]
 8007eb6:	600b      	str	r3, [r1, #0]
 8007eb8:	2d00      	cmp	r5, #0
 8007eba:	da03      	bge.n	8007ec4 <_printf_i+0xc8>
 8007ebc:	232d      	movs	r3, #45	; 0x2d
 8007ebe:	426d      	negs	r5, r5
 8007ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec4:	485e      	ldr	r0, [pc, #376]	; (8008040 <_printf_i+0x244>)
 8007ec6:	230a      	movs	r3, #10
 8007ec8:	e019      	b.n	8007efe <_printf_i+0x102>
 8007eca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ece:	6805      	ldr	r5, [r0, #0]
 8007ed0:	600b      	str	r3, [r1, #0]
 8007ed2:	bf18      	it	ne
 8007ed4:	b22d      	sxthne	r5, r5
 8007ed6:	e7ef      	b.n	8007eb8 <_printf_i+0xbc>
 8007ed8:	680b      	ldr	r3, [r1, #0]
 8007eda:	6825      	ldr	r5, [r4, #0]
 8007edc:	1d18      	adds	r0, r3, #4
 8007ede:	6008      	str	r0, [r1, #0]
 8007ee0:	0628      	lsls	r0, r5, #24
 8007ee2:	d501      	bpl.n	8007ee8 <_printf_i+0xec>
 8007ee4:	681d      	ldr	r5, [r3, #0]
 8007ee6:	e002      	b.n	8007eee <_printf_i+0xf2>
 8007ee8:	0669      	lsls	r1, r5, #25
 8007eea:	d5fb      	bpl.n	8007ee4 <_printf_i+0xe8>
 8007eec:	881d      	ldrh	r5, [r3, #0]
 8007eee:	4854      	ldr	r0, [pc, #336]	; (8008040 <_printf_i+0x244>)
 8007ef0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2308      	moveq	r3, #8
 8007ef6:	230a      	movne	r3, #10
 8007ef8:	2100      	movs	r1, #0
 8007efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007efe:	6866      	ldr	r6, [r4, #4]
 8007f00:	60a6      	str	r6, [r4, #8]
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	bfa2      	ittt	ge
 8007f06:	6821      	ldrge	r1, [r4, #0]
 8007f08:	f021 0104 	bicge.w	r1, r1, #4
 8007f0c:	6021      	strge	r1, [r4, #0]
 8007f0e:	b90d      	cbnz	r5, 8007f14 <_printf_i+0x118>
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	d04d      	beq.n	8007fb0 <_printf_i+0x1b4>
 8007f14:	4616      	mov	r6, r2
 8007f16:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f1a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f1e:	5dc7      	ldrb	r7, [r0, r7]
 8007f20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f24:	462f      	mov	r7, r5
 8007f26:	42bb      	cmp	r3, r7
 8007f28:	460d      	mov	r5, r1
 8007f2a:	d9f4      	bls.n	8007f16 <_printf_i+0x11a>
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d10b      	bne.n	8007f48 <_printf_i+0x14c>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	07df      	lsls	r7, r3, #31
 8007f34:	d508      	bpl.n	8007f48 <_printf_i+0x14c>
 8007f36:	6923      	ldr	r3, [r4, #16]
 8007f38:	6861      	ldr	r1, [r4, #4]
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	bfde      	ittt	le
 8007f3e:	2330      	movle	r3, #48	; 0x30
 8007f40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f48:	1b92      	subs	r2, r2, r6
 8007f4a:	6122      	str	r2, [r4, #16]
 8007f4c:	f8cd a000 	str.w	sl, [sp]
 8007f50:	464b      	mov	r3, r9
 8007f52:	aa03      	add	r2, sp, #12
 8007f54:	4621      	mov	r1, r4
 8007f56:	4640      	mov	r0, r8
 8007f58:	f7ff fee2 	bl	8007d20 <_printf_common>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d14c      	bne.n	8007ffa <_printf_i+0x1fe>
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	b004      	add	sp, #16
 8007f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6a:	4835      	ldr	r0, [pc, #212]	; (8008040 <_printf_i+0x244>)
 8007f6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	680e      	ldr	r6, [r1, #0]
 8007f74:	061f      	lsls	r7, r3, #24
 8007f76:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f7a:	600e      	str	r6, [r1, #0]
 8007f7c:	d514      	bpl.n	8007fa8 <_printf_i+0x1ac>
 8007f7e:	07d9      	lsls	r1, r3, #31
 8007f80:	bf44      	itt	mi
 8007f82:	f043 0320 	orrmi.w	r3, r3, #32
 8007f86:	6023      	strmi	r3, [r4, #0]
 8007f88:	b91d      	cbnz	r5, 8007f92 <_printf_i+0x196>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	f023 0320 	bic.w	r3, r3, #32
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	2310      	movs	r3, #16
 8007f94:	e7b0      	b.n	8007ef8 <_printf_i+0xfc>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	f043 0320 	orr.w	r3, r3, #32
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	2378      	movs	r3, #120	; 0x78
 8007fa0:	4828      	ldr	r0, [pc, #160]	; (8008044 <_printf_i+0x248>)
 8007fa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fa6:	e7e3      	b.n	8007f70 <_printf_i+0x174>
 8007fa8:	065e      	lsls	r6, r3, #25
 8007faa:	bf48      	it	mi
 8007fac:	b2ad      	uxthmi	r5, r5
 8007fae:	e7e6      	b.n	8007f7e <_printf_i+0x182>
 8007fb0:	4616      	mov	r6, r2
 8007fb2:	e7bb      	b.n	8007f2c <_printf_i+0x130>
 8007fb4:	680b      	ldr	r3, [r1, #0]
 8007fb6:	6826      	ldr	r6, [r4, #0]
 8007fb8:	6960      	ldr	r0, [r4, #20]
 8007fba:	1d1d      	adds	r5, r3, #4
 8007fbc:	600d      	str	r5, [r1, #0]
 8007fbe:	0635      	lsls	r5, r6, #24
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	d501      	bpl.n	8007fc8 <_printf_i+0x1cc>
 8007fc4:	6018      	str	r0, [r3, #0]
 8007fc6:	e002      	b.n	8007fce <_printf_i+0x1d2>
 8007fc8:	0671      	lsls	r1, r6, #25
 8007fca:	d5fb      	bpl.n	8007fc4 <_printf_i+0x1c8>
 8007fcc:	8018      	strh	r0, [r3, #0]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	6123      	str	r3, [r4, #16]
 8007fd2:	4616      	mov	r6, r2
 8007fd4:	e7ba      	b.n	8007f4c <_printf_i+0x150>
 8007fd6:	680b      	ldr	r3, [r1, #0]
 8007fd8:	1d1a      	adds	r2, r3, #4
 8007fda:	600a      	str	r2, [r1, #0]
 8007fdc:	681e      	ldr	r6, [r3, #0]
 8007fde:	6862      	ldr	r2, [r4, #4]
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7f8 f914 	bl	8000210 <memchr>
 8007fe8:	b108      	cbz	r0, 8007fee <_printf_i+0x1f2>
 8007fea:	1b80      	subs	r0, r0, r6
 8007fec:	6060      	str	r0, [r4, #4]
 8007fee:	6863      	ldr	r3, [r4, #4]
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff8:	e7a8      	b.n	8007f4c <_printf_i+0x150>
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	4649      	mov	r1, r9
 8008000:	4640      	mov	r0, r8
 8008002:	47d0      	blx	sl
 8008004:	3001      	adds	r0, #1
 8008006:	d0ab      	beq.n	8007f60 <_printf_i+0x164>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	079b      	lsls	r3, r3, #30
 800800c:	d413      	bmi.n	8008036 <_printf_i+0x23a>
 800800e:	68e0      	ldr	r0, [r4, #12]
 8008010:	9b03      	ldr	r3, [sp, #12]
 8008012:	4298      	cmp	r0, r3
 8008014:	bfb8      	it	lt
 8008016:	4618      	movlt	r0, r3
 8008018:	e7a4      	b.n	8007f64 <_printf_i+0x168>
 800801a:	2301      	movs	r3, #1
 800801c:	4632      	mov	r2, r6
 800801e:	4649      	mov	r1, r9
 8008020:	4640      	mov	r0, r8
 8008022:	47d0      	blx	sl
 8008024:	3001      	adds	r0, #1
 8008026:	d09b      	beq.n	8007f60 <_printf_i+0x164>
 8008028:	3501      	adds	r5, #1
 800802a:	68e3      	ldr	r3, [r4, #12]
 800802c:	9903      	ldr	r1, [sp, #12]
 800802e:	1a5b      	subs	r3, r3, r1
 8008030:	42ab      	cmp	r3, r5
 8008032:	dcf2      	bgt.n	800801a <_printf_i+0x21e>
 8008034:	e7eb      	b.n	800800e <_printf_i+0x212>
 8008036:	2500      	movs	r5, #0
 8008038:	f104 0619 	add.w	r6, r4, #25
 800803c:	e7f5      	b.n	800802a <_printf_i+0x22e>
 800803e:	bf00      	nop
 8008040:	0800aa92 	.word	0x0800aa92
 8008044:	0800aaa3 	.word	0x0800aaa3

08008048 <siprintf>:
 8008048:	b40e      	push	{r1, r2, r3}
 800804a:	b500      	push	{lr}
 800804c:	b09c      	sub	sp, #112	; 0x70
 800804e:	ab1d      	add	r3, sp, #116	; 0x74
 8008050:	9002      	str	r0, [sp, #8]
 8008052:	9006      	str	r0, [sp, #24]
 8008054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008058:	4809      	ldr	r0, [pc, #36]	; (8008080 <siprintf+0x38>)
 800805a:	9107      	str	r1, [sp, #28]
 800805c:	9104      	str	r1, [sp, #16]
 800805e:	4909      	ldr	r1, [pc, #36]	; (8008084 <siprintf+0x3c>)
 8008060:	f853 2b04 	ldr.w	r2, [r3], #4
 8008064:	9105      	str	r1, [sp, #20]
 8008066:	6800      	ldr	r0, [r0, #0]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	a902      	add	r1, sp, #8
 800806c:	f001 fbc8 	bl	8009800 <_svfiprintf_r>
 8008070:	9b02      	ldr	r3, [sp, #8]
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	b01c      	add	sp, #112	; 0x70
 8008078:	f85d eb04 	ldr.w	lr, [sp], #4
 800807c:	b003      	add	sp, #12
 800807e:	4770      	bx	lr
 8008080:	2000000c 	.word	0x2000000c
 8008084:	ffff0208 	.word	0xffff0208

08008088 <strcpy>:
 8008088:	4603      	mov	r3, r0
 800808a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800808e:	f803 2b01 	strb.w	r2, [r3], #1
 8008092:	2a00      	cmp	r2, #0
 8008094:	d1f9      	bne.n	800808a <strcpy+0x2>
 8008096:	4770      	bx	lr

08008098 <strtok>:
 8008098:	4b16      	ldr	r3, [pc, #88]	; (80080f4 <strtok+0x5c>)
 800809a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800809c:	681e      	ldr	r6, [r3, #0]
 800809e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80080a0:	4605      	mov	r5, r0
 80080a2:	b9fc      	cbnz	r4, 80080e4 <strtok+0x4c>
 80080a4:	2050      	movs	r0, #80	; 0x50
 80080a6:	9101      	str	r1, [sp, #4]
 80080a8:	f000 ff00 	bl	8008eac <malloc>
 80080ac:	9901      	ldr	r1, [sp, #4]
 80080ae:	65b0      	str	r0, [r6, #88]	; 0x58
 80080b0:	4602      	mov	r2, r0
 80080b2:	b920      	cbnz	r0, 80080be <strtok+0x26>
 80080b4:	4b10      	ldr	r3, [pc, #64]	; (80080f8 <strtok+0x60>)
 80080b6:	4811      	ldr	r0, [pc, #68]	; (80080fc <strtok+0x64>)
 80080b8:	2157      	movs	r1, #87	; 0x57
 80080ba:	f000 f849 	bl	8008150 <__assert_func>
 80080be:	e9c0 4400 	strd	r4, r4, [r0]
 80080c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80080c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80080ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80080ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80080d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80080d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80080da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80080de:	6184      	str	r4, [r0, #24]
 80080e0:	7704      	strb	r4, [r0, #28]
 80080e2:	6244      	str	r4, [r0, #36]	; 0x24
 80080e4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80080e6:	2301      	movs	r3, #1
 80080e8:	4628      	mov	r0, r5
 80080ea:	b002      	add	sp, #8
 80080ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080f0:	f000 b806 	b.w	8008100 <__strtok_r>
 80080f4:	2000000c 	.word	0x2000000c
 80080f8:	0800aab4 	.word	0x0800aab4
 80080fc:	0800aacb 	.word	0x0800aacb

08008100 <__strtok_r>:
 8008100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008102:	b908      	cbnz	r0, 8008108 <__strtok_r+0x8>
 8008104:	6810      	ldr	r0, [r2, #0]
 8008106:	b188      	cbz	r0, 800812c <__strtok_r+0x2c>
 8008108:	4604      	mov	r4, r0
 800810a:	4620      	mov	r0, r4
 800810c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008110:	460f      	mov	r7, r1
 8008112:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008116:	b91e      	cbnz	r6, 8008120 <__strtok_r+0x20>
 8008118:	b965      	cbnz	r5, 8008134 <__strtok_r+0x34>
 800811a:	6015      	str	r5, [r2, #0]
 800811c:	4628      	mov	r0, r5
 800811e:	e005      	b.n	800812c <__strtok_r+0x2c>
 8008120:	42b5      	cmp	r5, r6
 8008122:	d1f6      	bne.n	8008112 <__strtok_r+0x12>
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1f0      	bne.n	800810a <__strtok_r+0xa>
 8008128:	6014      	str	r4, [r2, #0]
 800812a:	7003      	strb	r3, [r0, #0]
 800812c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800812e:	461c      	mov	r4, r3
 8008130:	e00c      	b.n	800814c <__strtok_r+0x4c>
 8008132:	b915      	cbnz	r5, 800813a <__strtok_r+0x3a>
 8008134:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008138:	460e      	mov	r6, r1
 800813a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800813e:	42ab      	cmp	r3, r5
 8008140:	d1f7      	bne.n	8008132 <__strtok_r+0x32>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0f3      	beq.n	800812e <__strtok_r+0x2e>
 8008146:	2300      	movs	r3, #0
 8008148:	f804 3c01 	strb.w	r3, [r4, #-1]
 800814c:	6014      	str	r4, [r2, #0]
 800814e:	e7ed      	b.n	800812c <__strtok_r+0x2c>

08008150 <__assert_func>:
 8008150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008152:	4614      	mov	r4, r2
 8008154:	461a      	mov	r2, r3
 8008156:	4b09      	ldr	r3, [pc, #36]	; (800817c <__assert_func+0x2c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4605      	mov	r5, r0
 800815c:	68d8      	ldr	r0, [r3, #12]
 800815e:	b14c      	cbz	r4, 8008174 <__assert_func+0x24>
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <__assert_func+0x30>)
 8008162:	9100      	str	r1, [sp, #0]
 8008164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008168:	4906      	ldr	r1, [pc, #24]	; (8008184 <__assert_func+0x34>)
 800816a:	462b      	mov	r3, r5
 800816c:	f000 fe88 	bl	8008e80 <fiprintf>
 8008170:	f001 fe70 	bl	8009e54 <abort>
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <__assert_func+0x38>)
 8008176:	461c      	mov	r4, r3
 8008178:	e7f3      	b.n	8008162 <__assert_func+0x12>
 800817a:	bf00      	nop
 800817c:	2000000c 	.word	0x2000000c
 8008180:	0800ab2c 	.word	0x0800ab2c
 8008184:	0800ab39 	.word	0x0800ab39
 8008188:	0800ab67 	.word	0x0800ab67

0800818c <quorem>:
 800818c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	6903      	ldr	r3, [r0, #16]
 8008192:	690c      	ldr	r4, [r1, #16]
 8008194:	42a3      	cmp	r3, r4
 8008196:	4607      	mov	r7, r0
 8008198:	f2c0 8081 	blt.w	800829e <quorem+0x112>
 800819c:	3c01      	subs	r4, #1
 800819e:	f101 0814 	add.w	r8, r1, #20
 80081a2:	f100 0514 	add.w	r5, r0, #20
 80081a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081b4:	3301      	adds	r3, #1
 80081b6:	429a      	cmp	r2, r3
 80081b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80081c4:	d331      	bcc.n	800822a <quorem+0x9e>
 80081c6:	f04f 0e00 	mov.w	lr, #0
 80081ca:	4640      	mov	r0, r8
 80081cc:	46ac      	mov	ip, r5
 80081ce:	46f2      	mov	sl, lr
 80081d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80081d4:	b293      	uxth	r3, r2
 80081d6:	fb06 e303 	mla	r3, r6, r3, lr
 80081da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081de:	b29b      	uxth	r3, r3
 80081e0:	ebaa 0303 	sub.w	r3, sl, r3
 80081e4:	0c12      	lsrs	r2, r2, #16
 80081e6:	f8dc a000 	ldr.w	sl, [ip]
 80081ea:	fb06 e202 	mla	r2, r6, r2, lr
 80081ee:	fa13 f38a 	uxtah	r3, r3, sl
 80081f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081f6:	fa1f fa82 	uxth.w	sl, r2
 80081fa:	f8dc 2000 	ldr.w	r2, [ip]
 80081fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008202:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008206:	b29b      	uxth	r3, r3
 8008208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800820c:	4581      	cmp	r9, r0
 800820e:	f84c 3b04 	str.w	r3, [ip], #4
 8008212:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008216:	d2db      	bcs.n	80081d0 <quorem+0x44>
 8008218:	f855 300b 	ldr.w	r3, [r5, fp]
 800821c:	b92b      	cbnz	r3, 800822a <quorem+0x9e>
 800821e:	9b01      	ldr	r3, [sp, #4]
 8008220:	3b04      	subs	r3, #4
 8008222:	429d      	cmp	r5, r3
 8008224:	461a      	mov	r2, r3
 8008226:	d32e      	bcc.n	8008286 <quorem+0xfa>
 8008228:	613c      	str	r4, [r7, #16]
 800822a:	4638      	mov	r0, r7
 800822c:	f001 f8d2 	bl	80093d4 <__mcmp>
 8008230:	2800      	cmp	r0, #0
 8008232:	db24      	blt.n	800827e <quorem+0xf2>
 8008234:	3601      	adds	r6, #1
 8008236:	4628      	mov	r0, r5
 8008238:	f04f 0c00 	mov.w	ip, #0
 800823c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008240:	f8d0 e000 	ldr.w	lr, [r0]
 8008244:	b293      	uxth	r3, r2
 8008246:	ebac 0303 	sub.w	r3, ip, r3
 800824a:	0c12      	lsrs	r2, r2, #16
 800824c:	fa13 f38e 	uxtah	r3, r3, lr
 8008250:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008254:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008258:	b29b      	uxth	r3, r3
 800825a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800825e:	45c1      	cmp	r9, r8
 8008260:	f840 3b04 	str.w	r3, [r0], #4
 8008264:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008268:	d2e8      	bcs.n	800823c <quorem+0xb0>
 800826a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800826e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008272:	b922      	cbnz	r2, 800827e <quorem+0xf2>
 8008274:	3b04      	subs	r3, #4
 8008276:	429d      	cmp	r5, r3
 8008278:	461a      	mov	r2, r3
 800827a:	d30a      	bcc.n	8008292 <quorem+0x106>
 800827c:	613c      	str	r4, [r7, #16]
 800827e:	4630      	mov	r0, r6
 8008280:	b003      	add	sp, #12
 8008282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	3b04      	subs	r3, #4
 800828a:	2a00      	cmp	r2, #0
 800828c:	d1cc      	bne.n	8008228 <quorem+0x9c>
 800828e:	3c01      	subs	r4, #1
 8008290:	e7c7      	b.n	8008222 <quorem+0x96>
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	3b04      	subs	r3, #4
 8008296:	2a00      	cmp	r2, #0
 8008298:	d1f0      	bne.n	800827c <quorem+0xf0>
 800829a:	3c01      	subs	r4, #1
 800829c:	e7eb      	b.n	8008276 <quorem+0xea>
 800829e:	2000      	movs	r0, #0
 80082a0:	e7ee      	b.n	8008280 <quorem+0xf4>
 80082a2:	0000      	movs	r0, r0
 80082a4:	0000      	movs	r0, r0
	...

080082a8 <_dtoa_r>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	ed2d 8b02 	vpush	{d8}
 80082b0:	ec57 6b10 	vmov	r6, r7, d0
 80082b4:	b095      	sub	sp, #84	; 0x54
 80082b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082bc:	9105      	str	r1, [sp, #20]
 80082be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80082c2:	4604      	mov	r4, r0
 80082c4:	9209      	str	r2, [sp, #36]	; 0x24
 80082c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c8:	b975      	cbnz	r5, 80082e8 <_dtoa_r+0x40>
 80082ca:	2010      	movs	r0, #16
 80082cc:	f000 fdee 	bl	8008eac <malloc>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6260      	str	r0, [r4, #36]	; 0x24
 80082d4:	b920      	cbnz	r0, 80082e0 <_dtoa_r+0x38>
 80082d6:	4bb2      	ldr	r3, [pc, #712]	; (80085a0 <_dtoa_r+0x2f8>)
 80082d8:	21ea      	movs	r1, #234	; 0xea
 80082da:	48b2      	ldr	r0, [pc, #712]	; (80085a4 <_dtoa_r+0x2fc>)
 80082dc:	f7ff ff38 	bl	8008150 <__assert_func>
 80082e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082e4:	6005      	str	r5, [r0, #0]
 80082e6:	60c5      	str	r5, [r0, #12]
 80082e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ea:	6819      	ldr	r1, [r3, #0]
 80082ec:	b151      	cbz	r1, 8008304 <_dtoa_r+0x5c>
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	604a      	str	r2, [r1, #4]
 80082f2:	2301      	movs	r3, #1
 80082f4:	4093      	lsls	r3, r2
 80082f6:	608b      	str	r3, [r1, #8]
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 fe2d 	bl	8008f58 <_Bfree>
 80082fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	1e3b      	subs	r3, r7, #0
 8008306:	bfb9      	ittee	lt
 8008308:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800830c:	9303      	strlt	r3, [sp, #12]
 800830e:	2300      	movge	r3, #0
 8008310:	f8c8 3000 	strge.w	r3, [r8]
 8008314:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008318:	4ba3      	ldr	r3, [pc, #652]	; (80085a8 <_dtoa_r+0x300>)
 800831a:	bfbc      	itt	lt
 800831c:	2201      	movlt	r2, #1
 800831e:	f8c8 2000 	strlt.w	r2, [r8]
 8008322:	ea33 0309 	bics.w	r3, r3, r9
 8008326:	d11b      	bne.n	8008360 <_dtoa_r+0xb8>
 8008328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800832a:	f242 730f 	movw	r3, #9999	; 0x270f
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008334:	4333      	orrs	r3, r6
 8008336:	f000 857a 	beq.w	8008e2e <_dtoa_r+0xb86>
 800833a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800833c:	b963      	cbnz	r3, 8008358 <_dtoa_r+0xb0>
 800833e:	4b9b      	ldr	r3, [pc, #620]	; (80085ac <_dtoa_r+0x304>)
 8008340:	e024      	b.n	800838c <_dtoa_r+0xe4>
 8008342:	4b9b      	ldr	r3, [pc, #620]	; (80085b0 <_dtoa_r+0x308>)
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	9800      	ldr	r0, [sp, #0]
 800834e:	b015      	add	sp, #84	; 0x54
 8008350:	ecbd 8b02 	vpop	{d8}
 8008354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008358:	4b94      	ldr	r3, [pc, #592]	; (80085ac <_dtoa_r+0x304>)
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	3303      	adds	r3, #3
 800835e:	e7f3      	b.n	8008348 <_dtoa_r+0xa0>
 8008360:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	ec51 0b17 	vmov	r0, r1, d7
 800836a:	2300      	movs	r3, #0
 800836c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008370:	f7f8 fbc2 	bl	8000af8 <__aeabi_dcmpeq>
 8008374:	4680      	mov	r8, r0
 8008376:	b158      	cbz	r0, 8008390 <_dtoa_r+0xe8>
 8008378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800837a:	2301      	movs	r3, #1
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 8551 	beq.w	8008e28 <_dtoa_r+0xb80>
 8008386:	488b      	ldr	r0, [pc, #556]	; (80085b4 <_dtoa_r+0x30c>)
 8008388:	6018      	str	r0, [r3, #0]
 800838a:	1e43      	subs	r3, r0, #1
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	e7dd      	b.n	800834c <_dtoa_r+0xa4>
 8008390:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008394:	aa12      	add	r2, sp, #72	; 0x48
 8008396:	a913      	add	r1, sp, #76	; 0x4c
 8008398:	4620      	mov	r0, r4
 800839a:	f001 f8bf 	bl	800951c <__d2b>
 800839e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083a2:	4683      	mov	fp, r0
 80083a4:	2d00      	cmp	r5, #0
 80083a6:	d07c      	beq.n	80084a2 <_dtoa_r+0x1fa>
 80083a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80083ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80083b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083c2:	4b7d      	ldr	r3, [pc, #500]	; (80085b8 <_dtoa_r+0x310>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f7 ff75 	bl	80002b8 <__aeabi_dsub>
 80083ce:	a36e      	add	r3, pc, #440	; (adr r3, 8008588 <_dtoa_r+0x2e0>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f7f8 f928 	bl	8000628 <__aeabi_dmul>
 80083d8:	a36d      	add	r3, pc, #436	; (adr r3, 8008590 <_dtoa_r+0x2e8>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f7 ff6d 	bl	80002bc <__adddf3>
 80083e2:	4606      	mov	r6, r0
 80083e4:	4628      	mov	r0, r5
 80083e6:	460f      	mov	r7, r1
 80083e8:	f7f8 f8b4 	bl	8000554 <__aeabi_i2d>
 80083ec:	a36a      	add	r3, pc, #424	; (adr r3, 8008598 <_dtoa_r+0x2f0>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f8 f919 	bl	8000628 <__aeabi_dmul>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4630      	mov	r0, r6
 80083fc:	4639      	mov	r1, r7
 80083fe:	f7f7 ff5d 	bl	80002bc <__adddf3>
 8008402:	4606      	mov	r6, r0
 8008404:	460f      	mov	r7, r1
 8008406:	f7f8 fbbf 	bl	8000b88 <__aeabi_d2iz>
 800840a:	2200      	movs	r2, #0
 800840c:	4682      	mov	sl, r0
 800840e:	2300      	movs	r3, #0
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f8 fb7a 	bl	8000b0c <__aeabi_dcmplt>
 8008418:	b148      	cbz	r0, 800842e <_dtoa_r+0x186>
 800841a:	4650      	mov	r0, sl
 800841c:	f7f8 f89a 	bl	8000554 <__aeabi_i2d>
 8008420:	4632      	mov	r2, r6
 8008422:	463b      	mov	r3, r7
 8008424:	f7f8 fb68 	bl	8000af8 <__aeabi_dcmpeq>
 8008428:	b908      	cbnz	r0, 800842e <_dtoa_r+0x186>
 800842a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800842e:	f1ba 0f16 	cmp.w	sl, #22
 8008432:	d854      	bhi.n	80084de <_dtoa_r+0x236>
 8008434:	4b61      	ldr	r3, [pc, #388]	; (80085bc <_dtoa_r+0x314>)
 8008436:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008442:	f7f8 fb63 	bl	8000b0c <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	d04b      	beq.n	80084e2 <_dtoa_r+0x23a>
 800844a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800844e:	2300      	movs	r3, #0
 8008450:	930e      	str	r3, [sp, #56]	; 0x38
 8008452:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008454:	1b5d      	subs	r5, r3, r5
 8008456:	1e6b      	subs	r3, r5, #1
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	bf43      	ittte	mi
 800845c:	2300      	movmi	r3, #0
 800845e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008462:	9304      	strmi	r3, [sp, #16]
 8008464:	f04f 0800 	movpl.w	r8, #0
 8008468:	f1ba 0f00 	cmp.w	sl, #0
 800846c:	db3b      	blt.n	80084e6 <_dtoa_r+0x23e>
 800846e:	9b04      	ldr	r3, [sp, #16]
 8008470:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008474:	4453      	add	r3, sl
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	2300      	movs	r3, #0
 800847a:	9306      	str	r3, [sp, #24]
 800847c:	9b05      	ldr	r3, [sp, #20]
 800847e:	2b09      	cmp	r3, #9
 8008480:	d869      	bhi.n	8008556 <_dtoa_r+0x2ae>
 8008482:	2b05      	cmp	r3, #5
 8008484:	bfc4      	itt	gt
 8008486:	3b04      	subgt	r3, #4
 8008488:	9305      	strgt	r3, [sp, #20]
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	f1a3 0302 	sub.w	r3, r3, #2
 8008490:	bfcc      	ite	gt
 8008492:	2500      	movgt	r5, #0
 8008494:	2501      	movle	r5, #1
 8008496:	2b03      	cmp	r3, #3
 8008498:	d869      	bhi.n	800856e <_dtoa_r+0x2c6>
 800849a:	e8df f003 	tbb	[pc, r3]
 800849e:	4e2c      	.short	0x4e2c
 80084a0:	5a4c      	.short	0x5a4c
 80084a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80084a6:	441d      	add	r5, r3
 80084a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	bfc1      	itttt	gt
 80084b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80084bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084c0:	bfda      	itte	le
 80084c2:	f1c3 0320 	rsble	r3, r3, #32
 80084c6:	fa06 f003 	lslle.w	r0, r6, r3
 80084ca:	4318      	orrgt	r0, r3
 80084cc:	f7f8 f832 	bl	8000534 <__aeabi_ui2d>
 80084d0:	2301      	movs	r3, #1
 80084d2:	4606      	mov	r6, r0
 80084d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80084d8:	3d01      	subs	r5, #1
 80084da:	9310      	str	r3, [sp, #64]	; 0x40
 80084dc:	e771      	b.n	80083c2 <_dtoa_r+0x11a>
 80084de:	2301      	movs	r3, #1
 80084e0:	e7b6      	b.n	8008450 <_dtoa_r+0x1a8>
 80084e2:	900e      	str	r0, [sp, #56]	; 0x38
 80084e4:	e7b5      	b.n	8008452 <_dtoa_r+0x1aa>
 80084e6:	f1ca 0300 	rsb	r3, sl, #0
 80084ea:	9306      	str	r3, [sp, #24]
 80084ec:	2300      	movs	r3, #0
 80084ee:	eba8 080a 	sub.w	r8, r8, sl
 80084f2:	930d      	str	r3, [sp, #52]	; 0x34
 80084f4:	e7c2      	b.n	800847c <_dtoa_r+0x1d4>
 80084f6:	2300      	movs	r3, #0
 80084f8:	9308      	str	r3, [sp, #32]
 80084fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dc39      	bgt.n	8008574 <_dtoa_r+0x2cc>
 8008500:	f04f 0901 	mov.w	r9, #1
 8008504:	f8cd 9004 	str.w	r9, [sp, #4]
 8008508:	464b      	mov	r3, r9
 800850a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800850e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008510:	2200      	movs	r2, #0
 8008512:	6042      	str	r2, [r0, #4]
 8008514:	2204      	movs	r2, #4
 8008516:	f102 0614 	add.w	r6, r2, #20
 800851a:	429e      	cmp	r6, r3
 800851c:	6841      	ldr	r1, [r0, #4]
 800851e:	d92f      	bls.n	8008580 <_dtoa_r+0x2d8>
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fcd9 	bl	8008ed8 <_Balloc>
 8008526:	9000      	str	r0, [sp, #0]
 8008528:	2800      	cmp	r0, #0
 800852a:	d14b      	bne.n	80085c4 <_dtoa_r+0x31c>
 800852c:	4b24      	ldr	r3, [pc, #144]	; (80085c0 <_dtoa_r+0x318>)
 800852e:	4602      	mov	r2, r0
 8008530:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008534:	e6d1      	b.n	80082da <_dtoa_r+0x32>
 8008536:	2301      	movs	r3, #1
 8008538:	e7de      	b.n	80084f8 <_dtoa_r+0x250>
 800853a:	2300      	movs	r3, #0
 800853c:	9308      	str	r3, [sp, #32]
 800853e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008540:	eb0a 0903 	add.w	r9, sl, r3
 8008544:	f109 0301 	add.w	r3, r9, #1
 8008548:	2b01      	cmp	r3, #1
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	bfb8      	it	lt
 800854e:	2301      	movlt	r3, #1
 8008550:	e7dd      	b.n	800850e <_dtoa_r+0x266>
 8008552:	2301      	movs	r3, #1
 8008554:	e7f2      	b.n	800853c <_dtoa_r+0x294>
 8008556:	2501      	movs	r5, #1
 8008558:	2300      	movs	r3, #0
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	9508      	str	r5, [sp, #32]
 800855e:	f04f 39ff 	mov.w	r9, #4294967295
 8008562:	2200      	movs	r2, #0
 8008564:	f8cd 9004 	str.w	r9, [sp, #4]
 8008568:	2312      	movs	r3, #18
 800856a:	9209      	str	r2, [sp, #36]	; 0x24
 800856c:	e7cf      	b.n	800850e <_dtoa_r+0x266>
 800856e:	2301      	movs	r3, #1
 8008570:	9308      	str	r3, [sp, #32]
 8008572:	e7f4      	b.n	800855e <_dtoa_r+0x2b6>
 8008574:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008578:	f8cd 9004 	str.w	r9, [sp, #4]
 800857c:	464b      	mov	r3, r9
 800857e:	e7c6      	b.n	800850e <_dtoa_r+0x266>
 8008580:	3101      	adds	r1, #1
 8008582:	6041      	str	r1, [r0, #4]
 8008584:	0052      	lsls	r2, r2, #1
 8008586:	e7c6      	b.n	8008516 <_dtoa_r+0x26e>
 8008588:	636f4361 	.word	0x636f4361
 800858c:	3fd287a7 	.word	0x3fd287a7
 8008590:	8b60c8b3 	.word	0x8b60c8b3
 8008594:	3fc68a28 	.word	0x3fc68a28
 8008598:	509f79fb 	.word	0x509f79fb
 800859c:	3fd34413 	.word	0x3fd34413
 80085a0:	0800aab4 	.word	0x0800aab4
 80085a4:	0800ab75 	.word	0x0800ab75
 80085a8:	7ff00000 	.word	0x7ff00000
 80085ac:	0800ab71 	.word	0x0800ab71
 80085b0:	0800ab68 	.word	0x0800ab68
 80085b4:	0800aa91 	.word	0x0800aa91
 80085b8:	3ff80000 	.word	0x3ff80000
 80085bc:	0800ac70 	.word	0x0800ac70
 80085c0:	0800abd4 	.word	0x0800abd4
 80085c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c6:	9a00      	ldr	r2, [sp, #0]
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	9b01      	ldr	r3, [sp, #4]
 80085cc:	2b0e      	cmp	r3, #14
 80085ce:	f200 80ad 	bhi.w	800872c <_dtoa_r+0x484>
 80085d2:	2d00      	cmp	r5, #0
 80085d4:	f000 80aa 	beq.w	800872c <_dtoa_r+0x484>
 80085d8:	f1ba 0f00 	cmp.w	sl, #0
 80085dc:	dd36      	ble.n	800864c <_dtoa_r+0x3a4>
 80085de:	4ac3      	ldr	r2, [pc, #780]	; (80088ec <_dtoa_r+0x644>)
 80085e0:	f00a 030f 	and.w	r3, sl, #15
 80085e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085e8:	ed93 7b00 	vldr	d7, [r3]
 80085ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80085f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80085f4:	eeb0 8a47 	vmov.f32	s16, s14
 80085f8:	eef0 8a67 	vmov.f32	s17, s15
 80085fc:	d016      	beq.n	800862c <_dtoa_r+0x384>
 80085fe:	4bbc      	ldr	r3, [pc, #752]	; (80088f0 <_dtoa_r+0x648>)
 8008600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008608:	f7f8 f938 	bl	800087c <__aeabi_ddiv>
 800860c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008610:	f007 070f 	and.w	r7, r7, #15
 8008614:	2503      	movs	r5, #3
 8008616:	4eb6      	ldr	r6, [pc, #728]	; (80088f0 <_dtoa_r+0x648>)
 8008618:	b957      	cbnz	r7, 8008630 <_dtoa_r+0x388>
 800861a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800861e:	ec53 2b18 	vmov	r2, r3, d8
 8008622:	f7f8 f92b 	bl	800087c <__aeabi_ddiv>
 8008626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800862a:	e029      	b.n	8008680 <_dtoa_r+0x3d8>
 800862c:	2502      	movs	r5, #2
 800862e:	e7f2      	b.n	8008616 <_dtoa_r+0x36e>
 8008630:	07f9      	lsls	r1, r7, #31
 8008632:	d508      	bpl.n	8008646 <_dtoa_r+0x39e>
 8008634:	ec51 0b18 	vmov	r0, r1, d8
 8008638:	e9d6 2300 	ldrd	r2, r3, [r6]
 800863c:	f7f7 fff4 	bl	8000628 <__aeabi_dmul>
 8008640:	ec41 0b18 	vmov	d8, r0, r1
 8008644:	3501      	adds	r5, #1
 8008646:	107f      	asrs	r7, r7, #1
 8008648:	3608      	adds	r6, #8
 800864a:	e7e5      	b.n	8008618 <_dtoa_r+0x370>
 800864c:	f000 80a6 	beq.w	800879c <_dtoa_r+0x4f4>
 8008650:	f1ca 0600 	rsb	r6, sl, #0
 8008654:	4ba5      	ldr	r3, [pc, #660]	; (80088ec <_dtoa_r+0x644>)
 8008656:	4fa6      	ldr	r7, [pc, #664]	; (80088f0 <_dtoa_r+0x648>)
 8008658:	f006 020f 	and.w	r2, r6, #15
 800865c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008668:	f7f7 ffde 	bl	8000628 <__aeabi_dmul>
 800866c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008670:	1136      	asrs	r6, r6, #4
 8008672:	2300      	movs	r3, #0
 8008674:	2502      	movs	r5, #2
 8008676:	2e00      	cmp	r6, #0
 8008678:	f040 8085 	bne.w	8008786 <_dtoa_r+0x4de>
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1d2      	bne.n	8008626 <_dtoa_r+0x37e>
 8008680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 808c 	beq.w	80087a0 <_dtoa_r+0x4f8>
 8008688:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800868c:	4b99      	ldr	r3, [pc, #612]	; (80088f4 <_dtoa_r+0x64c>)
 800868e:	2200      	movs	r2, #0
 8008690:	4630      	mov	r0, r6
 8008692:	4639      	mov	r1, r7
 8008694:	f7f8 fa3a 	bl	8000b0c <__aeabi_dcmplt>
 8008698:	2800      	cmp	r0, #0
 800869a:	f000 8081 	beq.w	80087a0 <_dtoa_r+0x4f8>
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d07d      	beq.n	80087a0 <_dtoa_r+0x4f8>
 80086a4:	f1b9 0f00 	cmp.w	r9, #0
 80086a8:	dd3c      	ble.n	8008724 <_dtoa_r+0x47c>
 80086aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80086ae:	9307      	str	r3, [sp, #28]
 80086b0:	2200      	movs	r2, #0
 80086b2:	4b91      	ldr	r3, [pc, #580]	; (80088f8 <_dtoa_r+0x650>)
 80086b4:	4630      	mov	r0, r6
 80086b6:	4639      	mov	r1, r7
 80086b8:	f7f7 ffb6 	bl	8000628 <__aeabi_dmul>
 80086bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c0:	3501      	adds	r5, #1
 80086c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80086c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80086ca:	4628      	mov	r0, r5
 80086cc:	f7f7 ff42 	bl	8000554 <__aeabi_i2d>
 80086d0:	4632      	mov	r2, r6
 80086d2:	463b      	mov	r3, r7
 80086d4:	f7f7 ffa8 	bl	8000628 <__aeabi_dmul>
 80086d8:	4b88      	ldr	r3, [pc, #544]	; (80088fc <_dtoa_r+0x654>)
 80086da:	2200      	movs	r2, #0
 80086dc:	f7f7 fdee 	bl	80002bc <__adddf3>
 80086e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80086e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e8:	9303      	str	r3, [sp, #12]
 80086ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d15c      	bne.n	80087aa <_dtoa_r+0x502>
 80086f0:	4b83      	ldr	r3, [pc, #524]	; (8008900 <_dtoa_r+0x658>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f7 fdde 	bl	80002b8 <__aeabi_dsub>
 80086fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008700:	4606      	mov	r6, r0
 8008702:	460f      	mov	r7, r1
 8008704:	f7f8 fa20 	bl	8000b48 <__aeabi_dcmpgt>
 8008708:	2800      	cmp	r0, #0
 800870a:	f040 8296 	bne.w	8008c3a <_dtoa_r+0x992>
 800870e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008712:	4630      	mov	r0, r6
 8008714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008718:	4639      	mov	r1, r7
 800871a:	f7f8 f9f7 	bl	8000b0c <__aeabi_dcmplt>
 800871e:	2800      	cmp	r0, #0
 8008720:	f040 8288 	bne.w	8008c34 <_dtoa_r+0x98c>
 8008724:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008728:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800872c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800872e:	2b00      	cmp	r3, #0
 8008730:	f2c0 8158 	blt.w	80089e4 <_dtoa_r+0x73c>
 8008734:	f1ba 0f0e 	cmp.w	sl, #14
 8008738:	f300 8154 	bgt.w	80089e4 <_dtoa_r+0x73c>
 800873c:	4b6b      	ldr	r3, [pc, #428]	; (80088ec <_dtoa_r+0x644>)
 800873e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008742:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	f280 80e3 	bge.w	8008914 <_dtoa_r+0x66c>
 800874e:	9b01      	ldr	r3, [sp, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f300 80df 	bgt.w	8008914 <_dtoa_r+0x66c>
 8008756:	f040 826d 	bne.w	8008c34 <_dtoa_r+0x98c>
 800875a:	4b69      	ldr	r3, [pc, #420]	; (8008900 <_dtoa_r+0x658>)
 800875c:	2200      	movs	r2, #0
 800875e:	4640      	mov	r0, r8
 8008760:	4649      	mov	r1, r9
 8008762:	f7f7 ff61 	bl	8000628 <__aeabi_dmul>
 8008766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800876a:	f7f8 f9e3 	bl	8000b34 <__aeabi_dcmpge>
 800876e:	9e01      	ldr	r6, [sp, #4]
 8008770:	4637      	mov	r7, r6
 8008772:	2800      	cmp	r0, #0
 8008774:	f040 8243 	bne.w	8008bfe <_dtoa_r+0x956>
 8008778:	9d00      	ldr	r5, [sp, #0]
 800877a:	2331      	movs	r3, #49	; 0x31
 800877c:	f805 3b01 	strb.w	r3, [r5], #1
 8008780:	f10a 0a01 	add.w	sl, sl, #1
 8008784:	e23f      	b.n	8008c06 <_dtoa_r+0x95e>
 8008786:	07f2      	lsls	r2, r6, #31
 8008788:	d505      	bpl.n	8008796 <_dtoa_r+0x4ee>
 800878a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800878e:	f7f7 ff4b 	bl	8000628 <__aeabi_dmul>
 8008792:	3501      	adds	r5, #1
 8008794:	2301      	movs	r3, #1
 8008796:	1076      	asrs	r6, r6, #1
 8008798:	3708      	adds	r7, #8
 800879a:	e76c      	b.n	8008676 <_dtoa_r+0x3ce>
 800879c:	2502      	movs	r5, #2
 800879e:	e76f      	b.n	8008680 <_dtoa_r+0x3d8>
 80087a0:	9b01      	ldr	r3, [sp, #4]
 80087a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80087a6:	930c      	str	r3, [sp, #48]	; 0x30
 80087a8:	e78d      	b.n	80086c6 <_dtoa_r+0x41e>
 80087aa:	9900      	ldr	r1, [sp, #0]
 80087ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80087ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087b0:	4b4e      	ldr	r3, [pc, #312]	; (80088ec <_dtoa_r+0x644>)
 80087b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087b6:	4401      	add	r1, r0
 80087b8:	9102      	str	r1, [sp, #8]
 80087ba:	9908      	ldr	r1, [sp, #32]
 80087bc:	eeb0 8a47 	vmov.f32	s16, s14
 80087c0:	eef0 8a67 	vmov.f32	s17, s15
 80087c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087cc:	2900      	cmp	r1, #0
 80087ce:	d045      	beq.n	800885c <_dtoa_r+0x5b4>
 80087d0:	494c      	ldr	r1, [pc, #304]	; (8008904 <_dtoa_r+0x65c>)
 80087d2:	2000      	movs	r0, #0
 80087d4:	f7f8 f852 	bl	800087c <__aeabi_ddiv>
 80087d8:	ec53 2b18 	vmov	r2, r3, d8
 80087dc:	f7f7 fd6c 	bl	80002b8 <__aeabi_dsub>
 80087e0:	9d00      	ldr	r5, [sp, #0]
 80087e2:	ec41 0b18 	vmov	d8, r0, r1
 80087e6:	4639      	mov	r1, r7
 80087e8:	4630      	mov	r0, r6
 80087ea:	f7f8 f9cd 	bl	8000b88 <__aeabi_d2iz>
 80087ee:	900c      	str	r0, [sp, #48]	; 0x30
 80087f0:	f7f7 feb0 	bl	8000554 <__aeabi_i2d>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4630      	mov	r0, r6
 80087fa:	4639      	mov	r1, r7
 80087fc:	f7f7 fd5c 	bl	80002b8 <__aeabi_dsub>
 8008800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008802:	3330      	adds	r3, #48	; 0x30
 8008804:	f805 3b01 	strb.w	r3, [r5], #1
 8008808:	ec53 2b18 	vmov	r2, r3, d8
 800880c:	4606      	mov	r6, r0
 800880e:	460f      	mov	r7, r1
 8008810:	f7f8 f97c 	bl	8000b0c <__aeabi_dcmplt>
 8008814:	2800      	cmp	r0, #0
 8008816:	d165      	bne.n	80088e4 <_dtoa_r+0x63c>
 8008818:	4632      	mov	r2, r6
 800881a:	463b      	mov	r3, r7
 800881c:	4935      	ldr	r1, [pc, #212]	; (80088f4 <_dtoa_r+0x64c>)
 800881e:	2000      	movs	r0, #0
 8008820:	f7f7 fd4a 	bl	80002b8 <__aeabi_dsub>
 8008824:	ec53 2b18 	vmov	r2, r3, d8
 8008828:	f7f8 f970 	bl	8000b0c <__aeabi_dcmplt>
 800882c:	2800      	cmp	r0, #0
 800882e:	f040 80b9 	bne.w	80089a4 <_dtoa_r+0x6fc>
 8008832:	9b02      	ldr	r3, [sp, #8]
 8008834:	429d      	cmp	r5, r3
 8008836:	f43f af75 	beq.w	8008724 <_dtoa_r+0x47c>
 800883a:	4b2f      	ldr	r3, [pc, #188]	; (80088f8 <_dtoa_r+0x650>)
 800883c:	ec51 0b18 	vmov	r0, r1, d8
 8008840:	2200      	movs	r2, #0
 8008842:	f7f7 fef1 	bl	8000628 <__aeabi_dmul>
 8008846:	4b2c      	ldr	r3, [pc, #176]	; (80088f8 <_dtoa_r+0x650>)
 8008848:	ec41 0b18 	vmov	d8, r0, r1
 800884c:	2200      	movs	r2, #0
 800884e:	4630      	mov	r0, r6
 8008850:	4639      	mov	r1, r7
 8008852:	f7f7 fee9 	bl	8000628 <__aeabi_dmul>
 8008856:	4606      	mov	r6, r0
 8008858:	460f      	mov	r7, r1
 800885a:	e7c4      	b.n	80087e6 <_dtoa_r+0x53e>
 800885c:	ec51 0b17 	vmov	r0, r1, d7
 8008860:	f7f7 fee2 	bl	8000628 <__aeabi_dmul>
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	9d00      	ldr	r5, [sp, #0]
 8008868:	930c      	str	r3, [sp, #48]	; 0x30
 800886a:	ec41 0b18 	vmov	d8, r0, r1
 800886e:	4639      	mov	r1, r7
 8008870:	4630      	mov	r0, r6
 8008872:	f7f8 f989 	bl	8000b88 <__aeabi_d2iz>
 8008876:	9011      	str	r0, [sp, #68]	; 0x44
 8008878:	f7f7 fe6c 	bl	8000554 <__aeabi_i2d>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4630      	mov	r0, r6
 8008882:	4639      	mov	r1, r7
 8008884:	f7f7 fd18 	bl	80002b8 <__aeabi_dsub>
 8008888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800888a:	3330      	adds	r3, #48	; 0x30
 800888c:	f805 3b01 	strb.w	r3, [r5], #1
 8008890:	9b02      	ldr	r3, [sp, #8]
 8008892:	429d      	cmp	r5, r3
 8008894:	4606      	mov	r6, r0
 8008896:	460f      	mov	r7, r1
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	d134      	bne.n	8008908 <_dtoa_r+0x660>
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <_dtoa_r+0x65c>)
 80088a0:	ec51 0b18 	vmov	r0, r1, d8
 80088a4:	f7f7 fd0a 	bl	80002bc <__adddf3>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4630      	mov	r0, r6
 80088ae:	4639      	mov	r1, r7
 80088b0:	f7f8 f94a 	bl	8000b48 <__aeabi_dcmpgt>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d175      	bne.n	80089a4 <_dtoa_r+0x6fc>
 80088b8:	ec53 2b18 	vmov	r2, r3, d8
 80088bc:	4911      	ldr	r1, [pc, #68]	; (8008904 <_dtoa_r+0x65c>)
 80088be:	2000      	movs	r0, #0
 80088c0:	f7f7 fcfa 	bl	80002b8 <__aeabi_dsub>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4630      	mov	r0, r6
 80088ca:	4639      	mov	r1, r7
 80088cc:	f7f8 f91e 	bl	8000b0c <__aeabi_dcmplt>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f43f af27 	beq.w	8008724 <_dtoa_r+0x47c>
 80088d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088d8:	1e6b      	subs	r3, r5, #1
 80088da:	930c      	str	r3, [sp, #48]	; 0x30
 80088dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088e0:	2b30      	cmp	r3, #48	; 0x30
 80088e2:	d0f8      	beq.n	80088d6 <_dtoa_r+0x62e>
 80088e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80088e8:	e04a      	b.n	8008980 <_dtoa_r+0x6d8>
 80088ea:	bf00      	nop
 80088ec:	0800ac70 	.word	0x0800ac70
 80088f0:	0800ac48 	.word	0x0800ac48
 80088f4:	3ff00000 	.word	0x3ff00000
 80088f8:	40240000 	.word	0x40240000
 80088fc:	401c0000 	.word	0x401c0000
 8008900:	40140000 	.word	0x40140000
 8008904:	3fe00000 	.word	0x3fe00000
 8008908:	4baf      	ldr	r3, [pc, #700]	; (8008bc8 <_dtoa_r+0x920>)
 800890a:	f7f7 fe8d 	bl	8000628 <__aeabi_dmul>
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	e7ac      	b.n	800886e <_dtoa_r+0x5c6>
 8008914:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008918:	9d00      	ldr	r5, [sp, #0]
 800891a:	4642      	mov	r2, r8
 800891c:	464b      	mov	r3, r9
 800891e:	4630      	mov	r0, r6
 8008920:	4639      	mov	r1, r7
 8008922:	f7f7 ffab 	bl	800087c <__aeabi_ddiv>
 8008926:	f7f8 f92f 	bl	8000b88 <__aeabi_d2iz>
 800892a:	9002      	str	r0, [sp, #8]
 800892c:	f7f7 fe12 	bl	8000554 <__aeabi_i2d>
 8008930:	4642      	mov	r2, r8
 8008932:	464b      	mov	r3, r9
 8008934:	f7f7 fe78 	bl	8000628 <__aeabi_dmul>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4630      	mov	r0, r6
 800893e:	4639      	mov	r1, r7
 8008940:	f7f7 fcba 	bl	80002b8 <__aeabi_dsub>
 8008944:	9e02      	ldr	r6, [sp, #8]
 8008946:	9f01      	ldr	r7, [sp, #4]
 8008948:	3630      	adds	r6, #48	; 0x30
 800894a:	f805 6b01 	strb.w	r6, [r5], #1
 800894e:	9e00      	ldr	r6, [sp, #0]
 8008950:	1bae      	subs	r6, r5, r6
 8008952:	42b7      	cmp	r7, r6
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	d137      	bne.n	80089ca <_dtoa_r+0x722>
 800895a:	f7f7 fcaf 	bl	80002bc <__adddf3>
 800895e:	4642      	mov	r2, r8
 8008960:	464b      	mov	r3, r9
 8008962:	4606      	mov	r6, r0
 8008964:	460f      	mov	r7, r1
 8008966:	f7f8 f8ef 	bl	8000b48 <__aeabi_dcmpgt>
 800896a:	b9c8      	cbnz	r0, 80089a0 <_dtoa_r+0x6f8>
 800896c:	4642      	mov	r2, r8
 800896e:	464b      	mov	r3, r9
 8008970:	4630      	mov	r0, r6
 8008972:	4639      	mov	r1, r7
 8008974:	f7f8 f8c0 	bl	8000af8 <__aeabi_dcmpeq>
 8008978:	b110      	cbz	r0, 8008980 <_dtoa_r+0x6d8>
 800897a:	9b02      	ldr	r3, [sp, #8]
 800897c:	07d9      	lsls	r1, r3, #31
 800897e:	d40f      	bmi.n	80089a0 <_dtoa_r+0x6f8>
 8008980:	4620      	mov	r0, r4
 8008982:	4659      	mov	r1, fp
 8008984:	f000 fae8 	bl	8008f58 <_Bfree>
 8008988:	2300      	movs	r3, #0
 800898a:	702b      	strb	r3, [r5, #0]
 800898c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800898e:	f10a 0001 	add.w	r0, sl, #1
 8008992:	6018      	str	r0, [r3, #0]
 8008994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008996:	2b00      	cmp	r3, #0
 8008998:	f43f acd8 	beq.w	800834c <_dtoa_r+0xa4>
 800899c:	601d      	str	r5, [r3, #0]
 800899e:	e4d5      	b.n	800834c <_dtoa_r+0xa4>
 80089a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80089a4:	462b      	mov	r3, r5
 80089a6:	461d      	mov	r5, r3
 80089a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ac:	2a39      	cmp	r2, #57	; 0x39
 80089ae:	d108      	bne.n	80089c2 <_dtoa_r+0x71a>
 80089b0:	9a00      	ldr	r2, [sp, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d1f7      	bne.n	80089a6 <_dtoa_r+0x6fe>
 80089b6:	9a07      	ldr	r2, [sp, #28]
 80089b8:	9900      	ldr	r1, [sp, #0]
 80089ba:	3201      	adds	r2, #1
 80089bc:	9207      	str	r2, [sp, #28]
 80089be:	2230      	movs	r2, #48	; 0x30
 80089c0:	700a      	strb	r2, [r1, #0]
 80089c2:	781a      	ldrb	r2, [r3, #0]
 80089c4:	3201      	adds	r2, #1
 80089c6:	701a      	strb	r2, [r3, #0]
 80089c8:	e78c      	b.n	80088e4 <_dtoa_r+0x63c>
 80089ca:	4b7f      	ldr	r3, [pc, #508]	; (8008bc8 <_dtoa_r+0x920>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	f7f7 fe2b 	bl	8000628 <__aeabi_dmul>
 80089d2:	2200      	movs	r2, #0
 80089d4:	2300      	movs	r3, #0
 80089d6:	4606      	mov	r6, r0
 80089d8:	460f      	mov	r7, r1
 80089da:	f7f8 f88d 	bl	8000af8 <__aeabi_dcmpeq>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d09b      	beq.n	800891a <_dtoa_r+0x672>
 80089e2:	e7cd      	b.n	8008980 <_dtoa_r+0x6d8>
 80089e4:	9a08      	ldr	r2, [sp, #32]
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	f000 80c4 	beq.w	8008b74 <_dtoa_r+0x8cc>
 80089ec:	9a05      	ldr	r2, [sp, #20]
 80089ee:	2a01      	cmp	r2, #1
 80089f0:	f300 80a8 	bgt.w	8008b44 <_dtoa_r+0x89c>
 80089f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089f6:	2a00      	cmp	r2, #0
 80089f8:	f000 80a0 	beq.w	8008b3c <_dtoa_r+0x894>
 80089fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a00:	9e06      	ldr	r6, [sp, #24]
 8008a02:	4645      	mov	r5, r8
 8008a04:	9a04      	ldr	r2, [sp, #16]
 8008a06:	2101      	movs	r1, #1
 8008a08:	441a      	add	r2, r3
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4498      	add	r8, r3
 8008a0e:	9204      	str	r2, [sp, #16]
 8008a10:	f000 fb5e 	bl	80090d0 <__i2b>
 8008a14:	4607      	mov	r7, r0
 8008a16:	2d00      	cmp	r5, #0
 8008a18:	dd0b      	ble.n	8008a32 <_dtoa_r+0x78a>
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd08      	ble.n	8008a32 <_dtoa_r+0x78a>
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	9a04      	ldr	r2, [sp, #16]
 8008a24:	bfa8      	it	ge
 8008a26:	462b      	movge	r3, r5
 8008a28:	eba8 0803 	sub.w	r8, r8, r3
 8008a2c:	1aed      	subs	r5, r5, r3
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	9304      	str	r3, [sp, #16]
 8008a32:	9b06      	ldr	r3, [sp, #24]
 8008a34:	b1fb      	cbz	r3, 8008a76 <_dtoa_r+0x7ce>
 8008a36:	9b08      	ldr	r3, [sp, #32]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 809f 	beq.w	8008b7c <_dtoa_r+0x8d4>
 8008a3e:	2e00      	cmp	r6, #0
 8008a40:	dd11      	ble.n	8008a66 <_dtoa_r+0x7be>
 8008a42:	4639      	mov	r1, r7
 8008a44:	4632      	mov	r2, r6
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 fbfe 	bl	8009248 <__pow5mult>
 8008a4c:	465a      	mov	r2, fp
 8008a4e:	4601      	mov	r1, r0
 8008a50:	4607      	mov	r7, r0
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fb52 	bl	80090fc <__multiply>
 8008a58:	4659      	mov	r1, fp
 8008a5a:	9007      	str	r0, [sp, #28]
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 fa7b 	bl	8008f58 <_Bfree>
 8008a62:	9b07      	ldr	r3, [sp, #28]
 8008a64:	469b      	mov	fp, r3
 8008a66:	9b06      	ldr	r3, [sp, #24]
 8008a68:	1b9a      	subs	r2, r3, r6
 8008a6a:	d004      	beq.n	8008a76 <_dtoa_r+0x7ce>
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 fbea 	bl	8009248 <__pow5mult>
 8008a74:	4683      	mov	fp, r0
 8008a76:	2101      	movs	r1, #1
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f000 fb29 	bl	80090d0 <__i2b>
 8008a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	4606      	mov	r6, r0
 8008a84:	dd7c      	ble.n	8008b80 <_dtoa_r+0x8d8>
 8008a86:	461a      	mov	r2, r3
 8008a88:	4601      	mov	r1, r0
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 fbdc 	bl	8009248 <__pow5mult>
 8008a90:	9b05      	ldr	r3, [sp, #20]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	4606      	mov	r6, r0
 8008a96:	dd76      	ble.n	8008b86 <_dtoa_r+0x8de>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9306      	str	r3, [sp, #24]
 8008a9c:	6933      	ldr	r3, [r6, #16]
 8008a9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008aa2:	6918      	ldr	r0, [r3, #16]
 8008aa4:	f000 fac4 	bl	8009030 <__hi0bits>
 8008aa8:	f1c0 0020 	rsb	r0, r0, #32
 8008aac:	9b04      	ldr	r3, [sp, #16]
 8008aae:	4418      	add	r0, r3
 8008ab0:	f010 001f 	ands.w	r0, r0, #31
 8008ab4:	f000 8086 	beq.w	8008bc4 <_dtoa_r+0x91c>
 8008ab8:	f1c0 0320 	rsb	r3, r0, #32
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	dd7f      	ble.n	8008bc0 <_dtoa_r+0x918>
 8008ac0:	f1c0 001c 	rsb	r0, r0, #28
 8008ac4:	9b04      	ldr	r3, [sp, #16]
 8008ac6:	4403      	add	r3, r0
 8008ac8:	4480      	add	r8, r0
 8008aca:	4405      	add	r5, r0
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	f1b8 0f00 	cmp.w	r8, #0
 8008ad2:	dd05      	ble.n	8008ae0 <_dtoa_r+0x838>
 8008ad4:	4659      	mov	r1, fp
 8008ad6:	4642      	mov	r2, r8
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fc0f 	bl	80092fc <__lshift>
 8008ade:	4683      	mov	fp, r0
 8008ae0:	9b04      	ldr	r3, [sp, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	dd05      	ble.n	8008af2 <_dtoa_r+0x84a>
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fc06 	bl	80092fc <__lshift>
 8008af0:	4606      	mov	r6, r0
 8008af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d069      	beq.n	8008bcc <_dtoa_r+0x924>
 8008af8:	4631      	mov	r1, r6
 8008afa:	4658      	mov	r0, fp
 8008afc:	f000 fc6a 	bl	80093d4 <__mcmp>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	da63      	bge.n	8008bcc <_dtoa_r+0x924>
 8008b04:	2300      	movs	r3, #0
 8008b06:	4659      	mov	r1, fp
 8008b08:	220a      	movs	r2, #10
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f000 fa46 	bl	8008f9c <__multadd>
 8008b10:	9b08      	ldr	r3, [sp, #32]
 8008b12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b16:	4683      	mov	fp, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 818f 	beq.w	8008e3c <_dtoa_r+0xb94>
 8008b1e:	4639      	mov	r1, r7
 8008b20:	2300      	movs	r3, #0
 8008b22:	220a      	movs	r2, #10
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fa39 	bl	8008f9c <__multadd>
 8008b2a:	f1b9 0f00 	cmp.w	r9, #0
 8008b2e:	4607      	mov	r7, r0
 8008b30:	f300 808e 	bgt.w	8008c50 <_dtoa_r+0x9a8>
 8008b34:	9b05      	ldr	r3, [sp, #20]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	dc50      	bgt.n	8008bdc <_dtoa_r+0x934>
 8008b3a:	e089      	b.n	8008c50 <_dtoa_r+0x9a8>
 8008b3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b42:	e75d      	b.n	8008a00 <_dtoa_r+0x758>
 8008b44:	9b01      	ldr	r3, [sp, #4]
 8008b46:	1e5e      	subs	r6, r3, #1
 8008b48:	9b06      	ldr	r3, [sp, #24]
 8008b4a:	42b3      	cmp	r3, r6
 8008b4c:	bfbf      	itttt	lt
 8008b4e:	9b06      	ldrlt	r3, [sp, #24]
 8008b50:	9606      	strlt	r6, [sp, #24]
 8008b52:	1af2      	sublt	r2, r6, r3
 8008b54:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008b56:	bfb6      	itet	lt
 8008b58:	189b      	addlt	r3, r3, r2
 8008b5a:	1b9e      	subge	r6, r3, r6
 8008b5c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008b5e:	9b01      	ldr	r3, [sp, #4]
 8008b60:	bfb8      	it	lt
 8008b62:	2600      	movlt	r6, #0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	bfb5      	itete	lt
 8008b68:	eba8 0503 	sublt.w	r5, r8, r3
 8008b6c:	9b01      	ldrge	r3, [sp, #4]
 8008b6e:	2300      	movlt	r3, #0
 8008b70:	4645      	movge	r5, r8
 8008b72:	e747      	b.n	8008a04 <_dtoa_r+0x75c>
 8008b74:	9e06      	ldr	r6, [sp, #24]
 8008b76:	9f08      	ldr	r7, [sp, #32]
 8008b78:	4645      	mov	r5, r8
 8008b7a:	e74c      	b.n	8008a16 <_dtoa_r+0x76e>
 8008b7c:	9a06      	ldr	r2, [sp, #24]
 8008b7e:	e775      	b.n	8008a6c <_dtoa_r+0x7c4>
 8008b80:	9b05      	ldr	r3, [sp, #20]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	dc18      	bgt.n	8008bb8 <_dtoa_r+0x910>
 8008b86:	9b02      	ldr	r3, [sp, #8]
 8008b88:	b9b3      	cbnz	r3, 8008bb8 <_dtoa_r+0x910>
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b90:	b9a3      	cbnz	r3, 8008bbc <_dtoa_r+0x914>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b98:	0d1b      	lsrs	r3, r3, #20
 8008b9a:	051b      	lsls	r3, r3, #20
 8008b9c:	b12b      	cbz	r3, 8008baa <_dtoa_r+0x902>
 8008b9e:	9b04      	ldr	r3, [sp, #16]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	f108 0801 	add.w	r8, r8, #1
 8008ba8:	2301      	movs	r3, #1
 8008baa:	9306      	str	r3, [sp, #24]
 8008bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f47f af74 	bne.w	8008a9c <_dtoa_r+0x7f4>
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	e779      	b.n	8008aac <_dtoa_r+0x804>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e7f6      	b.n	8008baa <_dtoa_r+0x902>
 8008bbc:	9b02      	ldr	r3, [sp, #8]
 8008bbe:	e7f4      	b.n	8008baa <_dtoa_r+0x902>
 8008bc0:	d085      	beq.n	8008ace <_dtoa_r+0x826>
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	301c      	adds	r0, #28
 8008bc6:	e77d      	b.n	8008ac4 <_dtoa_r+0x81c>
 8008bc8:	40240000 	.word	0x40240000
 8008bcc:	9b01      	ldr	r3, [sp, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	dc38      	bgt.n	8008c44 <_dtoa_r+0x99c>
 8008bd2:	9b05      	ldr	r3, [sp, #20]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	dd35      	ble.n	8008c44 <_dtoa_r+0x99c>
 8008bd8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008bdc:	f1b9 0f00 	cmp.w	r9, #0
 8008be0:	d10d      	bne.n	8008bfe <_dtoa_r+0x956>
 8008be2:	4631      	mov	r1, r6
 8008be4:	464b      	mov	r3, r9
 8008be6:	2205      	movs	r2, #5
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 f9d7 	bl	8008f9c <__multadd>
 8008bee:	4601      	mov	r1, r0
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	4658      	mov	r0, fp
 8008bf4:	f000 fbee 	bl	80093d4 <__mcmp>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	f73f adbd 	bgt.w	8008778 <_dtoa_r+0x4d0>
 8008bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c00:	9d00      	ldr	r5, [sp, #0]
 8008c02:	ea6f 0a03 	mvn.w	sl, r3
 8008c06:	f04f 0800 	mov.w	r8, #0
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f000 f9a3 	bl	8008f58 <_Bfree>
 8008c12:	2f00      	cmp	r7, #0
 8008c14:	f43f aeb4 	beq.w	8008980 <_dtoa_r+0x6d8>
 8008c18:	f1b8 0f00 	cmp.w	r8, #0
 8008c1c:	d005      	beq.n	8008c2a <_dtoa_r+0x982>
 8008c1e:	45b8      	cmp	r8, r7
 8008c20:	d003      	beq.n	8008c2a <_dtoa_r+0x982>
 8008c22:	4641      	mov	r1, r8
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 f997 	bl	8008f58 <_Bfree>
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 f993 	bl	8008f58 <_Bfree>
 8008c32:	e6a5      	b.n	8008980 <_dtoa_r+0x6d8>
 8008c34:	2600      	movs	r6, #0
 8008c36:	4637      	mov	r7, r6
 8008c38:	e7e1      	b.n	8008bfe <_dtoa_r+0x956>
 8008c3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008c40:	4637      	mov	r7, r6
 8008c42:	e599      	b.n	8008778 <_dtoa_r+0x4d0>
 8008c44:	9b08      	ldr	r3, [sp, #32]
 8008c46:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 80fd 	beq.w	8008e4a <_dtoa_r+0xba2>
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	dd05      	ble.n	8008c60 <_dtoa_r+0x9b8>
 8008c54:	4639      	mov	r1, r7
 8008c56:	462a      	mov	r2, r5
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 fb4f 	bl	80092fc <__lshift>
 8008c5e:	4607      	mov	r7, r0
 8008c60:	9b06      	ldr	r3, [sp, #24]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d05c      	beq.n	8008d20 <_dtoa_r+0xa78>
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 f935 	bl	8008ed8 <_Balloc>
 8008c6e:	4605      	mov	r5, r0
 8008c70:	b928      	cbnz	r0, 8008c7e <_dtoa_r+0x9d6>
 8008c72:	4b80      	ldr	r3, [pc, #512]	; (8008e74 <_dtoa_r+0xbcc>)
 8008c74:	4602      	mov	r2, r0
 8008c76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c7a:	f7ff bb2e 	b.w	80082da <_dtoa_r+0x32>
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	3202      	adds	r2, #2
 8008c82:	0092      	lsls	r2, r2, #2
 8008c84:	f107 010c 	add.w	r1, r7, #12
 8008c88:	300c      	adds	r0, #12
 8008c8a:	f000 f917 	bl	8008ebc <memcpy>
 8008c8e:	2201      	movs	r2, #1
 8008c90:	4629      	mov	r1, r5
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 fb32 	bl	80092fc <__lshift>
 8008c98:	9b00      	ldr	r3, [sp, #0]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	444b      	add	r3, r9
 8008ca2:	9307      	str	r3, [sp, #28]
 8008ca4:	9b02      	ldr	r3, [sp, #8]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	46b8      	mov	r8, r7
 8008cac:	9306      	str	r3, [sp, #24]
 8008cae:	4607      	mov	r7, r0
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	4658      	mov	r0, fp
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	f7ff fa67 	bl	800818c <quorem>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	3330      	adds	r3, #48	; 0x30
 8008cc2:	9004      	str	r0, [sp, #16]
 8008cc4:	4641      	mov	r1, r8
 8008cc6:	4658      	mov	r0, fp
 8008cc8:	9308      	str	r3, [sp, #32]
 8008cca:	f000 fb83 	bl	80093d4 <__mcmp>
 8008cce:	463a      	mov	r2, r7
 8008cd0:	4681      	mov	r9, r0
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 fb99 	bl	800940c <__mdiff>
 8008cda:	68c2      	ldr	r2, [r0, #12]
 8008cdc:	9b08      	ldr	r3, [sp, #32]
 8008cde:	4605      	mov	r5, r0
 8008ce0:	bb02      	cbnz	r2, 8008d24 <_dtoa_r+0xa7c>
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	4658      	mov	r0, fp
 8008ce6:	f000 fb75 	bl	80093d4 <__mcmp>
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	4602      	mov	r2, r0
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008cf6:	f000 f92f 	bl	8008f58 <_Bfree>
 8008cfa:	9b05      	ldr	r3, [sp, #20]
 8008cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cfe:	9d01      	ldr	r5, [sp, #4]
 8008d00:	ea43 0102 	orr.w	r1, r3, r2
 8008d04:	9b06      	ldr	r3, [sp, #24]
 8008d06:	430b      	orrs	r3, r1
 8008d08:	9b08      	ldr	r3, [sp, #32]
 8008d0a:	d10d      	bne.n	8008d28 <_dtoa_r+0xa80>
 8008d0c:	2b39      	cmp	r3, #57	; 0x39
 8008d0e:	d029      	beq.n	8008d64 <_dtoa_r+0xabc>
 8008d10:	f1b9 0f00 	cmp.w	r9, #0
 8008d14:	dd01      	ble.n	8008d1a <_dtoa_r+0xa72>
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	3331      	adds	r3, #49	; 0x31
 8008d1a:	9a02      	ldr	r2, [sp, #8]
 8008d1c:	7013      	strb	r3, [r2, #0]
 8008d1e:	e774      	b.n	8008c0a <_dtoa_r+0x962>
 8008d20:	4638      	mov	r0, r7
 8008d22:	e7b9      	b.n	8008c98 <_dtoa_r+0x9f0>
 8008d24:	2201      	movs	r2, #1
 8008d26:	e7e2      	b.n	8008cee <_dtoa_r+0xa46>
 8008d28:	f1b9 0f00 	cmp.w	r9, #0
 8008d2c:	db06      	blt.n	8008d3c <_dtoa_r+0xa94>
 8008d2e:	9905      	ldr	r1, [sp, #20]
 8008d30:	ea41 0909 	orr.w	r9, r1, r9
 8008d34:	9906      	ldr	r1, [sp, #24]
 8008d36:	ea59 0101 	orrs.w	r1, r9, r1
 8008d3a:	d120      	bne.n	8008d7e <_dtoa_r+0xad6>
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	ddec      	ble.n	8008d1a <_dtoa_r+0xa72>
 8008d40:	4659      	mov	r1, fp
 8008d42:	2201      	movs	r2, #1
 8008d44:	4620      	mov	r0, r4
 8008d46:	9301      	str	r3, [sp, #4]
 8008d48:	f000 fad8 	bl	80092fc <__lshift>
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	4683      	mov	fp, r0
 8008d50:	f000 fb40 	bl	80093d4 <__mcmp>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	dc02      	bgt.n	8008d60 <_dtoa_r+0xab8>
 8008d5a:	d1de      	bne.n	8008d1a <_dtoa_r+0xa72>
 8008d5c:	07da      	lsls	r2, r3, #31
 8008d5e:	d5dc      	bpl.n	8008d1a <_dtoa_r+0xa72>
 8008d60:	2b39      	cmp	r3, #57	; 0x39
 8008d62:	d1d8      	bne.n	8008d16 <_dtoa_r+0xa6e>
 8008d64:	9a02      	ldr	r2, [sp, #8]
 8008d66:	2339      	movs	r3, #57	; 0x39
 8008d68:	7013      	strb	r3, [r2, #0]
 8008d6a:	462b      	mov	r3, r5
 8008d6c:	461d      	mov	r5, r3
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d74:	2a39      	cmp	r2, #57	; 0x39
 8008d76:	d050      	beq.n	8008e1a <_dtoa_r+0xb72>
 8008d78:	3201      	adds	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e745      	b.n	8008c0a <_dtoa_r+0x962>
 8008d7e:	2a00      	cmp	r2, #0
 8008d80:	dd03      	ble.n	8008d8a <_dtoa_r+0xae2>
 8008d82:	2b39      	cmp	r3, #57	; 0x39
 8008d84:	d0ee      	beq.n	8008d64 <_dtoa_r+0xabc>
 8008d86:	3301      	adds	r3, #1
 8008d88:	e7c7      	b.n	8008d1a <_dtoa_r+0xa72>
 8008d8a:	9a01      	ldr	r2, [sp, #4]
 8008d8c:	9907      	ldr	r1, [sp, #28]
 8008d8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d92:	428a      	cmp	r2, r1
 8008d94:	d02a      	beq.n	8008dec <_dtoa_r+0xb44>
 8008d96:	4659      	mov	r1, fp
 8008d98:	2300      	movs	r3, #0
 8008d9a:	220a      	movs	r2, #10
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 f8fd 	bl	8008f9c <__multadd>
 8008da2:	45b8      	cmp	r8, r7
 8008da4:	4683      	mov	fp, r0
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	f04f 020a 	mov.w	r2, #10
 8008dae:	4641      	mov	r1, r8
 8008db0:	4620      	mov	r0, r4
 8008db2:	d107      	bne.n	8008dc4 <_dtoa_r+0xb1c>
 8008db4:	f000 f8f2 	bl	8008f9c <__multadd>
 8008db8:	4680      	mov	r8, r0
 8008dba:	4607      	mov	r7, r0
 8008dbc:	9b01      	ldr	r3, [sp, #4]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	e775      	b.n	8008cb0 <_dtoa_r+0xa08>
 8008dc4:	f000 f8ea 	bl	8008f9c <__multadd>
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4680      	mov	r8, r0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	220a      	movs	r2, #10
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 f8e3 	bl	8008f9c <__multadd>
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	e7f0      	b.n	8008dbc <_dtoa_r+0xb14>
 8008dda:	f1b9 0f00 	cmp.w	r9, #0
 8008dde:	9a00      	ldr	r2, [sp, #0]
 8008de0:	bfcc      	ite	gt
 8008de2:	464d      	movgt	r5, r9
 8008de4:	2501      	movle	r5, #1
 8008de6:	4415      	add	r5, r2
 8008de8:	f04f 0800 	mov.w	r8, #0
 8008dec:	4659      	mov	r1, fp
 8008dee:	2201      	movs	r2, #1
 8008df0:	4620      	mov	r0, r4
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	f000 fa82 	bl	80092fc <__lshift>
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4683      	mov	fp, r0
 8008dfc:	f000 faea 	bl	80093d4 <__mcmp>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	dcb2      	bgt.n	8008d6a <_dtoa_r+0xac2>
 8008e04:	d102      	bne.n	8008e0c <_dtoa_r+0xb64>
 8008e06:	9b01      	ldr	r3, [sp, #4]
 8008e08:	07db      	lsls	r3, r3, #31
 8008e0a:	d4ae      	bmi.n	8008d6a <_dtoa_r+0xac2>
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	461d      	mov	r5, r3
 8008e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e14:	2a30      	cmp	r2, #48	; 0x30
 8008e16:	d0fa      	beq.n	8008e0e <_dtoa_r+0xb66>
 8008e18:	e6f7      	b.n	8008c0a <_dtoa_r+0x962>
 8008e1a:	9a00      	ldr	r2, [sp, #0]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d1a5      	bne.n	8008d6c <_dtoa_r+0xac4>
 8008e20:	f10a 0a01 	add.w	sl, sl, #1
 8008e24:	2331      	movs	r3, #49	; 0x31
 8008e26:	e779      	b.n	8008d1c <_dtoa_r+0xa74>
 8008e28:	4b13      	ldr	r3, [pc, #76]	; (8008e78 <_dtoa_r+0xbd0>)
 8008e2a:	f7ff baaf 	b.w	800838c <_dtoa_r+0xe4>
 8008e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f47f aa86 	bne.w	8008342 <_dtoa_r+0x9a>
 8008e36:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <_dtoa_r+0xbd4>)
 8008e38:	f7ff baa8 	b.w	800838c <_dtoa_r+0xe4>
 8008e3c:	f1b9 0f00 	cmp.w	r9, #0
 8008e40:	dc03      	bgt.n	8008e4a <_dtoa_r+0xba2>
 8008e42:	9b05      	ldr	r3, [sp, #20]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	f73f aec9 	bgt.w	8008bdc <_dtoa_r+0x934>
 8008e4a:	9d00      	ldr	r5, [sp, #0]
 8008e4c:	4631      	mov	r1, r6
 8008e4e:	4658      	mov	r0, fp
 8008e50:	f7ff f99c 	bl	800818c <quorem>
 8008e54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008e58:	f805 3b01 	strb.w	r3, [r5], #1
 8008e5c:	9a00      	ldr	r2, [sp, #0]
 8008e5e:	1aaa      	subs	r2, r5, r2
 8008e60:	4591      	cmp	r9, r2
 8008e62:	ddba      	ble.n	8008dda <_dtoa_r+0xb32>
 8008e64:	4659      	mov	r1, fp
 8008e66:	2300      	movs	r3, #0
 8008e68:	220a      	movs	r2, #10
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f000 f896 	bl	8008f9c <__multadd>
 8008e70:	4683      	mov	fp, r0
 8008e72:	e7eb      	b.n	8008e4c <_dtoa_r+0xba4>
 8008e74:	0800abd4 	.word	0x0800abd4
 8008e78:	0800aa90 	.word	0x0800aa90
 8008e7c:	0800ab68 	.word	0x0800ab68

08008e80 <fiprintf>:
 8008e80:	b40e      	push	{r1, r2, r3}
 8008e82:	b503      	push	{r0, r1, lr}
 8008e84:	4601      	mov	r1, r0
 8008e86:	ab03      	add	r3, sp, #12
 8008e88:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <fiprintf+0x20>)
 8008e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e8e:	6800      	ldr	r0, [r0, #0]
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	f000 fddf 	bl	8009a54 <_vfiprintf_r>
 8008e96:	b002      	add	sp, #8
 8008e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e9c:	b003      	add	sp, #12
 8008e9e:	4770      	bx	lr
 8008ea0:	2000000c 	.word	0x2000000c

08008ea4 <_localeconv_r>:
 8008ea4:	4800      	ldr	r0, [pc, #0]	; (8008ea8 <_localeconv_r+0x4>)
 8008ea6:	4770      	bx	lr
 8008ea8:	20000160 	.word	0x20000160

08008eac <malloc>:
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <malloc+0xc>)
 8008eae:	4601      	mov	r1, r0
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	f000 bbef 	b.w	8009694 <_malloc_r>
 8008eb6:	bf00      	nop
 8008eb8:	2000000c 	.word	0x2000000c

08008ebc <memcpy>:
 8008ebc:	440a      	add	r2, r1
 8008ebe:	4291      	cmp	r1, r2
 8008ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ec4:	d100      	bne.n	8008ec8 <memcpy+0xc>
 8008ec6:	4770      	bx	lr
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed2:	4291      	cmp	r1, r2
 8008ed4:	d1f9      	bne.n	8008eca <memcpy+0xe>
 8008ed6:	bd10      	pop	{r4, pc}

08008ed8 <_Balloc>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008edc:	4604      	mov	r4, r0
 8008ede:	460d      	mov	r5, r1
 8008ee0:	b976      	cbnz	r6, 8008f00 <_Balloc+0x28>
 8008ee2:	2010      	movs	r0, #16
 8008ee4:	f7ff ffe2 	bl	8008eac <malloc>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	6260      	str	r0, [r4, #36]	; 0x24
 8008eec:	b920      	cbnz	r0, 8008ef8 <_Balloc+0x20>
 8008eee:	4b18      	ldr	r3, [pc, #96]	; (8008f50 <_Balloc+0x78>)
 8008ef0:	4818      	ldr	r0, [pc, #96]	; (8008f54 <_Balloc+0x7c>)
 8008ef2:	2166      	movs	r1, #102	; 0x66
 8008ef4:	f7ff f92c 	bl	8008150 <__assert_func>
 8008ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008efc:	6006      	str	r6, [r0, #0]
 8008efe:	60c6      	str	r6, [r0, #12]
 8008f00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f02:	68f3      	ldr	r3, [r6, #12]
 8008f04:	b183      	cbz	r3, 8008f28 <_Balloc+0x50>
 8008f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f0e:	b9b8      	cbnz	r0, 8008f40 <_Balloc+0x68>
 8008f10:	2101      	movs	r1, #1
 8008f12:	fa01 f605 	lsl.w	r6, r1, r5
 8008f16:	1d72      	adds	r2, r6, #5
 8008f18:	0092      	lsls	r2, r2, #2
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fb5a 	bl	80095d4 <_calloc_r>
 8008f20:	b160      	cbz	r0, 8008f3c <_Balloc+0x64>
 8008f22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f26:	e00e      	b.n	8008f46 <_Balloc+0x6e>
 8008f28:	2221      	movs	r2, #33	; 0x21
 8008f2a:	2104      	movs	r1, #4
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fb51 	bl	80095d4 <_calloc_r>
 8008f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f34:	60f0      	str	r0, [r6, #12]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e4      	bne.n	8008f06 <_Balloc+0x2e>
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	6802      	ldr	r2, [r0, #0]
 8008f42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f46:	2300      	movs	r3, #0
 8008f48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f4c:	e7f7      	b.n	8008f3e <_Balloc+0x66>
 8008f4e:	bf00      	nop
 8008f50:	0800aab4 	.word	0x0800aab4
 8008f54:	0800abe5 	.word	0x0800abe5

08008f58 <_Bfree>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	460c      	mov	r4, r1
 8008f60:	b976      	cbnz	r6, 8008f80 <_Bfree+0x28>
 8008f62:	2010      	movs	r0, #16
 8008f64:	f7ff ffa2 	bl	8008eac <malloc>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	6268      	str	r0, [r5, #36]	; 0x24
 8008f6c:	b920      	cbnz	r0, 8008f78 <_Bfree+0x20>
 8008f6e:	4b09      	ldr	r3, [pc, #36]	; (8008f94 <_Bfree+0x3c>)
 8008f70:	4809      	ldr	r0, [pc, #36]	; (8008f98 <_Bfree+0x40>)
 8008f72:	218a      	movs	r1, #138	; 0x8a
 8008f74:	f7ff f8ec 	bl	8008150 <__assert_func>
 8008f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f7c:	6006      	str	r6, [r0, #0]
 8008f7e:	60c6      	str	r6, [r0, #12]
 8008f80:	b13c      	cbz	r4, 8008f92 <_Bfree+0x3a>
 8008f82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f84:	6862      	ldr	r2, [r4, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f8c:	6021      	str	r1, [r4, #0]
 8008f8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	0800aab4 	.word	0x0800aab4
 8008f98:	0800abe5 	.word	0x0800abe5

08008f9c <__multadd>:
 8008f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa0:	690e      	ldr	r6, [r1, #16]
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	4698      	mov	r8, r3
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	f101 0014 	add.w	r0, r1, #20
 8008fac:	2300      	movs	r3, #0
 8008fae:	6805      	ldr	r5, [r0, #0]
 8008fb0:	b2a9      	uxth	r1, r5
 8008fb2:	fb02 8101 	mla	r1, r2, r1, r8
 8008fb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008fba:	0c2d      	lsrs	r5, r5, #16
 8008fbc:	fb02 c505 	mla	r5, r2, r5, ip
 8008fc0:	b289      	uxth	r1, r1
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008fc8:	429e      	cmp	r6, r3
 8008fca:	f840 1b04 	str.w	r1, [r0], #4
 8008fce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008fd2:	dcec      	bgt.n	8008fae <__multadd+0x12>
 8008fd4:	f1b8 0f00 	cmp.w	r8, #0
 8008fd8:	d022      	beq.n	8009020 <__multadd+0x84>
 8008fda:	68a3      	ldr	r3, [r4, #8]
 8008fdc:	42b3      	cmp	r3, r6
 8008fde:	dc19      	bgt.n	8009014 <__multadd+0x78>
 8008fe0:	6861      	ldr	r1, [r4, #4]
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	3101      	adds	r1, #1
 8008fe6:	f7ff ff77 	bl	8008ed8 <_Balloc>
 8008fea:	4605      	mov	r5, r0
 8008fec:	b928      	cbnz	r0, 8008ffa <__multadd+0x5e>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	4b0d      	ldr	r3, [pc, #52]	; (8009028 <__multadd+0x8c>)
 8008ff2:	480e      	ldr	r0, [pc, #56]	; (800902c <__multadd+0x90>)
 8008ff4:	21b5      	movs	r1, #181	; 0xb5
 8008ff6:	f7ff f8ab 	bl	8008150 <__assert_func>
 8008ffa:	6922      	ldr	r2, [r4, #16]
 8008ffc:	3202      	adds	r2, #2
 8008ffe:	f104 010c 	add.w	r1, r4, #12
 8009002:	0092      	lsls	r2, r2, #2
 8009004:	300c      	adds	r0, #12
 8009006:	f7ff ff59 	bl	8008ebc <memcpy>
 800900a:	4621      	mov	r1, r4
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff ffa3 	bl	8008f58 <_Bfree>
 8009012:	462c      	mov	r4, r5
 8009014:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009018:	3601      	adds	r6, #1
 800901a:	f8c3 8014 	str.w	r8, [r3, #20]
 800901e:	6126      	str	r6, [r4, #16]
 8009020:	4620      	mov	r0, r4
 8009022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009026:	bf00      	nop
 8009028:	0800abd4 	.word	0x0800abd4
 800902c:	0800abe5 	.word	0x0800abe5

08009030 <__hi0bits>:
 8009030:	0c03      	lsrs	r3, r0, #16
 8009032:	041b      	lsls	r3, r3, #16
 8009034:	b9d3      	cbnz	r3, 800906c <__hi0bits+0x3c>
 8009036:	0400      	lsls	r0, r0, #16
 8009038:	2310      	movs	r3, #16
 800903a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800903e:	bf04      	itt	eq
 8009040:	0200      	lsleq	r0, r0, #8
 8009042:	3308      	addeq	r3, #8
 8009044:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009048:	bf04      	itt	eq
 800904a:	0100      	lsleq	r0, r0, #4
 800904c:	3304      	addeq	r3, #4
 800904e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009052:	bf04      	itt	eq
 8009054:	0080      	lsleq	r0, r0, #2
 8009056:	3302      	addeq	r3, #2
 8009058:	2800      	cmp	r0, #0
 800905a:	db05      	blt.n	8009068 <__hi0bits+0x38>
 800905c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009060:	f103 0301 	add.w	r3, r3, #1
 8009064:	bf08      	it	eq
 8009066:	2320      	moveq	r3, #32
 8009068:	4618      	mov	r0, r3
 800906a:	4770      	bx	lr
 800906c:	2300      	movs	r3, #0
 800906e:	e7e4      	b.n	800903a <__hi0bits+0xa>

08009070 <__lo0bits>:
 8009070:	6803      	ldr	r3, [r0, #0]
 8009072:	f013 0207 	ands.w	r2, r3, #7
 8009076:	4601      	mov	r1, r0
 8009078:	d00b      	beq.n	8009092 <__lo0bits+0x22>
 800907a:	07da      	lsls	r2, r3, #31
 800907c:	d424      	bmi.n	80090c8 <__lo0bits+0x58>
 800907e:	0798      	lsls	r0, r3, #30
 8009080:	bf49      	itett	mi
 8009082:	085b      	lsrmi	r3, r3, #1
 8009084:	089b      	lsrpl	r3, r3, #2
 8009086:	2001      	movmi	r0, #1
 8009088:	600b      	strmi	r3, [r1, #0]
 800908a:	bf5c      	itt	pl
 800908c:	600b      	strpl	r3, [r1, #0]
 800908e:	2002      	movpl	r0, #2
 8009090:	4770      	bx	lr
 8009092:	b298      	uxth	r0, r3
 8009094:	b9b0      	cbnz	r0, 80090c4 <__lo0bits+0x54>
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	2010      	movs	r0, #16
 800909a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800909e:	bf04      	itt	eq
 80090a0:	0a1b      	lsreq	r3, r3, #8
 80090a2:	3008      	addeq	r0, #8
 80090a4:	071a      	lsls	r2, r3, #28
 80090a6:	bf04      	itt	eq
 80090a8:	091b      	lsreq	r3, r3, #4
 80090aa:	3004      	addeq	r0, #4
 80090ac:	079a      	lsls	r2, r3, #30
 80090ae:	bf04      	itt	eq
 80090b0:	089b      	lsreq	r3, r3, #2
 80090b2:	3002      	addeq	r0, #2
 80090b4:	07da      	lsls	r2, r3, #31
 80090b6:	d403      	bmi.n	80090c0 <__lo0bits+0x50>
 80090b8:	085b      	lsrs	r3, r3, #1
 80090ba:	f100 0001 	add.w	r0, r0, #1
 80090be:	d005      	beq.n	80090cc <__lo0bits+0x5c>
 80090c0:	600b      	str	r3, [r1, #0]
 80090c2:	4770      	bx	lr
 80090c4:	4610      	mov	r0, r2
 80090c6:	e7e8      	b.n	800909a <__lo0bits+0x2a>
 80090c8:	2000      	movs	r0, #0
 80090ca:	4770      	bx	lr
 80090cc:	2020      	movs	r0, #32
 80090ce:	4770      	bx	lr

080090d0 <__i2b>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	460c      	mov	r4, r1
 80090d4:	2101      	movs	r1, #1
 80090d6:	f7ff feff 	bl	8008ed8 <_Balloc>
 80090da:	4602      	mov	r2, r0
 80090dc:	b928      	cbnz	r0, 80090ea <__i2b+0x1a>
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <__i2b+0x24>)
 80090e0:	4805      	ldr	r0, [pc, #20]	; (80090f8 <__i2b+0x28>)
 80090e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090e6:	f7ff f833 	bl	8008150 <__assert_func>
 80090ea:	2301      	movs	r3, #1
 80090ec:	6144      	str	r4, [r0, #20]
 80090ee:	6103      	str	r3, [r0, #16]
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	bf00      	nop
 80090f4:	0800abd4 	.word	0x0800abd4
 80090f8:	0800abe5 	.word	0x0800abe5

080090fc <__multiply>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	4614      	mov	r4, r2
 8009102:	690a      	ldr	r2, [r1, #16]
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	429a      	cmp	r2, r3
 8009108:	bfb8      	it	lt
 800910a:	460b      	movlt	r3, r1
 800910c:	460d      	mov	r5, r1
 800910e:	bfbc      	itt	lt
 8009110:	4625      	movlt	r5, r4
 8009112:	461c      	movlt	r4, r3
 8009114:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009118:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800911c:	68ab      	ldr	r3, [r5, #8]
 800911e:	6869      	ldr	r1, [r5, #4]
 8009120:	eb0a 0709 	add.w	r7, sl, r9
 8009124:	42bb      	cmp	r3, r7
 8009126:	b085      	sub	sp, #20
 8009128:	bfb8      	it	lt
 800912a:	3101      	addlt	r1, #1
 800912c:	f7ff fed4 	bl	8008ed8 <_Balloc>
 8009130:	b930      	cbnz	r0, 8009140 <__multiply+0x44>
 8009132:	4602      	mov	r2, r0
 8009134:	4b42      	ldr	r3, [pc, #264]	; (8009240 <__multiply+0x144>)
 8009136:	4843      	ldr	r0, [pc, #268]	; (8009244 <__multiply+0x148>)
 8009138:	f240 115d 	movw	r1, #349	; 0x15d
 800913c:	f7ff f808 	bl	8008150 <__assert_func>
 8009140:	f100 0614 	add.w	r6, r0, #20
 8009144:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009148:	4633      	mov	r3, r6
 800914a:	2200      	movs	r2, #0
 800914c:	4543      	cmp	r3, r8
 800914e:	d31e      	bcc.n	800918e <__multiply+0x92>
 8009150:	f105 0c14 	add.w	ip, r5, #20
 8009154:	f104 0314 	add.w	r3, r4, #20
 8009158:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800915c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009160:	9202      	str	r2, [sp, #8]
 8009162:	ebac 0205 	sub.w	r2, ip, r5
 8009166:	3a15      	subs	r2, #21
 8009168:	f022 0203 	bic.w	r2, r2, #3
 800916c:	3204      	adds	r2, #4
 800916e:	f105 0115 	add.w	r1, r5, #21
 8009172:	458c      	cmp	ip, r1
 8009174:	bf38      	it	cc
 8009176:	2204      	movcc	r2, #4
 8009178:	9201      	str	r2, [sp, #4]
 800917a:	9a02      	ldr	r2, [sp, #8]
 800917c:	9303      	str	r3, [sp, #12]
 800917e:	429a      	cmp	r2, r3
 8009180:	d808      	bhi.n	8009194 <__multiply+0x98>
 8009182:	2f00      	cmp	r7, #0
 8009184:	dc55      	bgt.n	8009232 <__multiply+0x136>
 8009186:	6107      	str	r7, [r0, #16]
 8009188:	b005      	add	sp, #20
 800918a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918e:	f843 2b04 	str.w	r2, [r3], #4
 8009192:	e7db      	b.n	800914c <__multiply+0x50>
 8009194:	f8b3 a000 	ldrh.w	sl, [r3]
 8009198:	f1ba 0f00 	cmp.w	sl, #0
 800919c:	d020      	beq.n	80091e0 <__multiply+0xe4>
 800919e:	f105 0e14 	add.w	lr, r5, #20
 80091a2:	46b1      	mov	r9, r6
 80091a4:	2200      	movs	r2, #0
 80091a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80091aa:	f8d9 b000 	ldr.w	fp, [r9]
 80091ae:	b2a1      	uxth	r1, r4
 80091b0:	fa1f fb8b 	uxth.w	fp, fp
 80091b4:	fb0a b101 	mla	r1, sl, r1, fp
 80091b8:	4411      	add	r1, r2
 80091ba:	f8d9 2000 	ldr.w	r2, [r9]
 80091be:	0c24      	lsrs	r4, r4, #16
 80091c0:	0c12      	lsrs	r2, r2, #16
 80091c2:	fb0a 2404 	mla	r4, sl, r4, r2
 80091c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80091ca:	b289      	uxth	r1, r1
 80091cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80091d0:	45f4      	cmp	ip, lr
 80091d2:	f849 1b04 	str.w	r1, [r9], #4
 80091d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80091da:	d8e4      	bhi.n	80091a6 <__multiply+0xaa>
 80091dc:	9901      	ldr	r1, [sp, #4]
 80091de:	5072      	str	r2, [r6, r1]
 80091e0:	9a03      	ldr	r2, [sp, #12]
 80091e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091e6:	3304      	adds	r3, #4
 80091e8:	f1b9 0f00 	cmp.w	r9, #0
 80091ec:	d01f      	beq.n	800922e <__multiply+0x132>
 80091ee:	6834      	ldr	r4, [r6, #0]
 80091f0:	f105 0114 	add.w	r1, r5, #20
 80091f4:	46b6      	mov	lr, r6
 80091f6:	f04f 0a00 	mov.w	sl, #0
 80091fa:	880a      	ldrh	r2, [r1, #0]
 80091fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009200:	fb09 b202 	mla	r2, r9, r2, fp
 8009204:	4492      	add	sl, r2
 8009206:	b2a4      	uxth	r4, r4
 8009208:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800920c:	f84e 4b04 	str.w	r4, [lr], #4
 8009210:	f851 4b04 	ldr.w	r4, [r1], #4
 8009214:	f8be 2000 	ldrh.w	r2, [lr]
 8009218:	0c24      	lsrs	r4, r4, #16
 800921a:	fb09 2404 	mla	r4, r9, r4, r2
 800921e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009222:	458c      	cmp	ip, r1
 8009224:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009228:	d8e7      	bhi.n	80091fa <__multiply+0xfe>
 800922a:	9a01      	ldr	r2, [sp, #4]
 800922c:	50b4      	str	r4, [r6, r2]
 800922e:	3604      	adds	r6, #4
 8009230:	e7a3      	b.n	800917a <__multiply+0x7e>
 8009232:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1a5      	bne.n	8009186 <__multiply+0x8a>
 800923a:	3f01      	subs	r7, #1
 800923c:	e7a1      	b.n	8009182 <__multiply+0x86>
 800923e:	bf00      	nop
 8009240:	0800abd4 	.word	0x0800abd4
 8009244:	0800abe5 	.word	0x0800abe5

08009248 <__pow5mult>:
 8009248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800924c:	4615      	mov	r5, r2
 800924e:	f012 0203 	ands.w	r2, r2, #3
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	d007      	beq.n	8009268 <__pow5mult+0x20>
 8009258:	4c25      	ldr	r4, [pc, #148]	; (80092f0 <__pow5mult+0xa8>)
 800925a:	3a01      	subs	r2, #1
 800925c:	2300      	movs	r3, #0
 800925e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009262:	f7ff fe9b 	bl	8008f9c <__multadd>
 8009266:	4607      	mov	r7, r0
 8009268:	10ad      	asrs	r5, r5, #2
 800926a:	d03d      	beq.n	80092e8 <__pow5mult+0xa0>
 800926c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800926e:	b97c      	cbnz	r4, 8009290 <__pow5mult+0x48>
 8009270:	2010      	movs	r0, #16
 8009272:	f7ff fe1b 	bl	8008eac <malloc>
 8009276:	4602      	mov	r2, r0
 8009278:	6270      	str	r0, [r6, #36]	; 0x24
 800927a:	b928      	cbnz	r0, 8009288 <__pow5mult+0x40>
 800927c:	4b1d      	ldr	r3, [pc, #116]	; (80092f4 <__pow5mult+0xac>)
 800927e:	481e      	ldr	r0, [pc, #120]	; (80092f8 <__pow5mult+0xb0>)
 8009280:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009284:	f7fe ff64 	bl	8008150 <__assert_func>
 8009288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800928c:	6004      	str	r4, [r0, #0]
 800928e:	60c4      	str	r4, [r0, #12]
 8009290:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009298:	b94c      	cbnz	r4, 80092ae <__pow5mult+0x66>
 800929a:	f240 2171 	movw	r1, #625	; 0x271
 800929e:	4630      	mov	r0, r6
 80092a0:	f7ff ff16 	bl	80090d0 <__i2b>
 80092a4:	2300      	movs	r3, #0
 80092a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092aa:	4604      	mov	r4, r0
 80092ac:	6003      	str	r3, [r0, #0]
 80092ae:	f04f 0900 	mov.w	r9, #0
 80092b2:	07eb      	lsls	r3, r5, #31
 80092b4:	d50a      	bpl.n	80092cc <__pow5mult+0x84>
 80092b6:	4639      	mov	r1, r7
 80092b8:	4622      	mov	r2, r4
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7ff ff1e 	bl	80090fc <__multiply>
 80092c0:	4639      	mov	r1, r7
 80092c2:	4680      	mov	r8, r0
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff fe47 	bl	8008f58 <_Bfree>
 80092ca:	4647      	mov	r7, r8
 80092cc:	106d      	asrs	r5, r5, #1
 80092ce:	d00b      	beq.n	80092e8 <__pow5mult+0xa0>
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	b938      	cbnz	r0, 80092e4 <__pow5mult+0x9c>
 80092d4:	4622      	mov	r2, r4
 80092d6:	4621      	mov	r1, r4
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff ff0f 	bl	80090fc <__multiply>
 80092de:	6020      	str	r0, [r4, #0]
 80092e0:	f8c0 9000 	str.w	r9, [r0]
 80092e4:	4604      	mov	r4, r0
 80092e6:	e7e4      	b.n	80092b2 <__pow5mult+0x6a>
 80092e8:	4638      	mov	r0, r7
 80092ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ee:	bf00      	nop
 80092f0:	0800ad38 	.word	0x0800ad38
 80092f4:	0800aab4 	.word	0x0800aab4
 80092f8:	0800abe5 	.word	0x0800abe5

080092fc <__lshift>:
 80092fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009300:	460c      	mov	r4, r1
 8009302:	6849      	ldr	r1, [r1, #4]
 8009304:	6923      	ldr	r3, [r4, #16]
 8009306:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	4607      	mov	r7, r0
 800930e:	4691      	mov	r9, r2
 8009310:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009314:	f108 0601 	add.w	r6, r8, #1
 8009318:	42b3      	cmp	r3, r6
 800931a:	db0b      	blt.n	8009334 <__lshift+0x38>
 800931c:	4638      	mov	r0, r7
 800931e:	f7ff fddb 	bl	8008ed8 <_Balloc>
 8009322:	4605      	mov	r5, r0
 8009324:	b948      	cbnz	r0, 800933a <__lshift+0x3e>
 8009326:	4602      	mov	r2, r0
 8009328:	4b28      	ldr	r3, [pc, #160]	; (80093cc <__lshift+0xd0>)
 800932a:	4829      	ldr	r0, [pc, #164]	; (80093d0 <__lshift+0xd4>)
 800932c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009330:	f7fe ff0e 	bl	8008150 <__assert_func>
 8009334:	3101      	adds	r1, #1
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	e7ee      	b.n	8009318 <__lshift+0x1c>
 800933a:	2300      	movs	r3, #0
 800933c:	f100 0114 	add.w	r1, r0, #20
 8009340:	f100 0210 	add.w	r2, r0, #16
 8009344:	4618      	mov	r0, r3
 8009346:	4553      	cmp	r3, sl
 8009348:	db33      	blt.n	80093b2 <__lshift+0xb6>
 800934a:	6920      	ldr	r0, [r4, #16]
 800934c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009350:	f104 0314 	add.w	r3, r4, #20
 8009354:	f019 091f 	ands.w	r9, r9, #31
 8009358:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800935c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009360:	d02b      	beq.n	80093ba <__lshift+0xbe>
 8009362:	f1c9 0e20 	rsb	lr, r9, #32
 8009366:	468a      	mov	sl, r1
 8009368:	2200      	movs	r2, #0
 800936a:	6818      	ldr	r0, [r3, #0]
 800936c:	fa00 f009 	lsl.w	r0, r0, r9
 8009370:	4302      	orrs	r2, r0
 8009372:	f84a 2b04 	str.w	r2, [sl], #4
 8009376:	f853 2b04 	ldr.w	r2, [r3], #4
 800937a:	459c      	cmp	ip, r3
 800937c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009380:	d8f3      	bhi.n	800936a <__lshift+0x6e>
 8009382:	ebac 0304 	sub.w	r3, ip, r4
 8009386:	3b15      	subs	r3, #21
 8009388:	f023 0303 	bic.w	r3, r3, #3
 800938c:	3304      	adds	r3, #4
 800938e:	f104 0015 	add.w	r0, r4, #21
 8009392:	4584      	cmp	ip, r0
 8009394:	bf38      	it	cc
 8009396:	2304      	movcc	r3, #4
 8009398:	50ca      	str	r2, [r1, r3]
 800939a:	b10a      	cbz	r2, 80093a0 <__lshift+0xa4>
 800939c:	f108 0602 	add.w	r6, r8, #2
 80093a0:	3e01      	subs	r6, #1
 80093a2:	4638      	mov	r0, r7
 80093a4:	612e      	str	r6, [r5, #16]
 80093a6:	4621      	mov	r1, r4
 80093a8:	f7ff fdd6 	bl	8008f58 <_Bfree>
 80093ac:	4628      	mov	r0, r5
 80093ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093b6:	3301      	adds	r3, #1
 80093b8:	e7c5      	b.n	8009346 <__lshift+0x4a>
 80093ba:	3904      	subs	r1, #4
 80093bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093c4:	459c      	cmp	ip, r3
 80093c6:	d8f9      	bhi.n	80093bc <__lshift+0xc0>
 80093c8:	e7ea      	b.n	80093a0 <__lshift+0xa4>
 80093ca:	bf00      	nop
 80093cc:	0800abd4 	.word	0x0800abd4
 80093d0:	0800abe5 	.word	0x0800abe5

080093d4 <__mcmp>:
 80093d4:	b530      	push	{r4, r5, lr}
 80093d6:	6902      	ldr	r2, [r0, #16]
 80093d8:	690c      	ldr	r4, [r1, #16]
 80093da:	1b12      	subs	r2, r2, r4
 80093dc:	d10e      	bne.n	80093fc <__mcmp+0x28>
 80093de:	f100 0314 	add.w	r3, r0, #20
 80093e2:	3114      	adds	r1, #20
 80093e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093f4:	42a5      	cmp	r5, r4
 80093f6:	d003      	beq.n	8009400 <__mcmp+0x2c>
 80093f8:	d305      	bcc.n	8009406 <__mcmp+0x32>
 80093fa:	2201      	movs	r2, #1
 80093fc:	4610      	mov	r0, r2
 80093fe:	bd30      	pop	{r4, r5, pc}
 8009400:	4283      	cmp	r3, r0
 8009402:	d3f3      	bcc.n	80093ec <__mcmp+0x18>
 8009404:	e7fa      	b.n	80093fc <__mcmp+0x28>
 8009406:	f04f 32ff 	mov.w	r2, #4294967295
 800940a:	e7f7      	b.n	80093fc <__mcmp+0x28>

0800940c <__mdiff>:
 800940c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	460c      	mov	r4, r1
 8009412:	4606      	mov	r6, r0
 8009414:	4611      	mov	r1, r2
 8009416:	4620      	mov	r0, r4
 8009418:	4617      	mov	r7, r2
 800941a:	f7ff ffdb 	bl	80093d4 <__mcmp>
 800941e:	1e05      	subs	r5, r0, #0
 8009420:	d110      	bne.n	8009444 <__mdiff+0x38>
 8009422:	4629      	mov	r1, r5
 8009424:	4630      	mov	r0, r6
 8009426:	f7ff fd57 	bl	8008ed8 <_Balloc>
 800942a:	b930      	cbnz	r0, 800943a <__mdiff+0x2e>
 800942c:	4b39      	ldr	r3, [pc, #228]	; (8009514 <__mdiff+0x108>)
 800942e:	4602      	mov	r2, r0
 8009430:	f240 2132 	movw	r1, #562	; 0x232
 8009434:	4838      	ldr	r0, [pc, #224]	; (8009518 <__mdiff+0x10c>)
 8009436:	f7fe fe8b 	bl	8008150 <__assert_func>
 800943a:	2301      	movs	r3, #1
 800943c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009444:	bfa4      	itt	ge
 8009446:	463b      	movge	r3, r7
 8009448:	4627      	movge	r7, r4
 800944a:	4630      	mov	r0, r6
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	bfa6      	itte	ge
 8009450:	461c      	movge	r4, r3
 8009452:	2500      	movge	r5, #0
 8009454:	2501      	movlt	r5, #1
 8009456:	f7ff fd3f 	bl	8008ed8 <_Balloc>
 800945a:	b920      	cbnz	r0, 8009466 <__mdiff+0x5a>
 800945c:	4b2d      	ldr	r3, [pc, #180]	; (8009514 <__mdiff+0x108>)
 800945e:	4602      	mov	r2, r0
 8009460:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009464:	e7e6      	b.n	8009434 <__mdiff+0x28>
 8009466:	693e      	ldr	r6, [r7, #16]
 8009468:	60c5      	str	r5, [r0, #12]
 800946a:	6925      	ldr	r5, [r4, #16]
 800946c:	f107 0114 	add.w	r1, r7, #20
 8009470:	f104 0914 	add.w	r9, r4, #20
 8009474:	f100 0e14 	add.w	lr, r0, #20
 8009478:	f107 0210 	add.w	r2, r7, #16
 800947c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009480:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009484:	46f2      	mov	sl, lr
 8009486:	2700      	movs	r7, #0
 8009488:	f859 3b04 	ldr.w	r3, [r9], #4
 800948c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009490:	fa1f f883 	uxth.w	r8, r3
 8009494:	fa17 f78b 	uxtah	r7, r7, fp
 8009498:	0c1b      	lsrs	r3, r3, #16
 800949a:	eba7 0808 	sub.w	r8, r7, r8
 800949e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094a6:	fa1f f888 	uxth.w	r8, r8
 80094aa:	141f      	asrs	r7, r3, #16
 80094ac:	454d      	cmp	r5, r9
 80094ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094b2:	f84a 3b04 	str.w	r3, [sl], #4
 80094b6:	d8e7      	bhi.n	8009488 <__mdiff+0x7c>
 80094b8:	1b2b      	subs	r3, r5, r4
 80094ba:	3b15      	subs	r3, #21
 80094bc:	f023 0303 	bic.w	r3, r3, #3
 80094c0:	3304      	adds	r3, #4
 80094c2:	3415      	adds	r4, #21
 80094c4:	42a5      	cmp	r5, r4
 80094c6:	bf38      	it	cc
 80094c8:	2304      	movcc	r3, #4
 80094ca:	4419      	add	r1, r3
 80094cc:	4473      	add	r3, lr
 80094ce:	469e      	mov	lr, r3
 80094d0:	460d      	mov	r5, r1
 80094d2:	4565      	cmp	r5, ip
 80094d4:	d30e      	bcc.n	80094f4 <__mdiff+0xe8>
 80094d6:	f10c 0203 	add.w	r2, ip, #3
 80094da:	1a52      	subs	r2, r2, r1
 80094dc:	f022 0203 	bic.w	r2, r2, #3
 80094e0:	3903      	subs	r1, #3
 80094e2:	458c      	cmp	ip, r1
 80094e4:	bf38      	it	cc
 80094e6:	2200      	movcc	r2, #0
 80094e8:	441a      	add	r2, r3
 80094ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094ee:	b17b      	cbz	r3, 8009510 <__mdiff+0x104>
 80094f0:	6106      	str	r6, [r0, #16]
 80094f2:	e7a5      	b.n	8009440 <__mdiff+0x34>
 80094f4:	f855 8b04 	ldr.w	r8, [r5], #4
 80094f8:	fa17 f488 	uxtah	r4, r7, r8
 80094fc:	1422      	asrs	r2, r4, #16
 80094fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009502:	b2a4      	uxth	r4, r4
 8009504:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009508:	f84e 4b04 	str.w	r4, [lr], #4
 800950c:	1417      	asrs	r7, r2, #16
 800950e:	e7e0      	b.n	80094d2 <__mdiff+0xc6>
 8009510:	3e01      	subs	r6, #1
 8009512:	e7ea      	b.n	80094ea <__mdiff+0xde>
 8009514:	0800abd4 	.word	0x0800abd4
 8009518:	0800abe5 	.word	0x0800abe5

0800951c <__d2b>:
 800951c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009520:	4689      	mov	r9, r1
 8009522:	2101      	movs	r1, #1
 8009524:	ec57 6b10 	vmov	r6, r7, d0
 8009528:	4690      	mov	r8, r2
 800952a:	f7ff fcd5 	bl	8008ed8 <_Balloc>
 800952e:	4604      	mov	r4, r0
 8009530:	b930      	cbnz	r0, 8009540 <__d2b+0x24>
 8009532:	4602      	mov	r2, r0
 8009534:	4b25      	ldr	r3, [pc, #148]	; (80095cc <__d2b+0xb0>)
 8009536:	4826      	ldr	r0, [pc, #152]	; (80095d0 <__d2b+0xb4>)
 8009538:	f240 310a 	movw	r1, #778	; 0x30a
 800953c:	f7fe fe08 	bl	8008150 <__assert_func>
 8009540:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009544:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009548:	bb35      	cbnz	r5, 8009598 <__d2b+0x7c>
 800954a:	2e00      	cmp	r6, #0
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	d028      	beq.n	80095a2 <__d2b+0x86>
 8009550:	4668      	mov	r0, sp
 8009552:	9600      	str	r6, [sp, #0]
 8009554:	f7ff fd8c 	bl	8009070 <__lo0bits>
 8009558:	9900      	ldr	r1, [sp, #0]
 800955a:	b300      	cbz	r0, 800959e <__d2b+0x82>
 800955c:	9a01      	ldr	r2, [sp, #4]
 800955e:	f1c0 0320 	rsb	r3, r0, #32
 8009562:	fa02 f303 	lsl.w	r3, r2, r3
 8009566:	430b      	orrs	r3, r1
 8009568:	40c2      	lsrs	r2, r0
 800956a:	6163      	str	r3, [r4, #20]
 800956c:	9201      	str	r2, [sp, #4]
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	61a3      	str	r3, [r4, #24]
 8009572:	2b00      	cmp	r3, #0
 8009574:	bf14      	ite	ne
 8009576:	2202      	movne	r2, #2
 8009578:	2201      	moveq	r2, #1
 800957a:	6122      	str	r2, [r4, #16]
 800957c:	b1d5      	cbz	r5, 80095b4 <__d2b+0x98>
 800957e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009582:	4405      	add	r5, r0
 8009584:	f8c9 5000 	str.w	r5, [r9]
 8009588:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800958c:	f8c8 0000 	str.w	r0, [r8]
 8009590:	4620      	mov	r0, r4
 8009592:	b003      	add	sp, #12
 8009594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800959c:	e7d5      	b.n	800954a <__d2b+0x2e>
 800959e:	6161      	str	r1, [r4, #20]
 80095a0:	e7e5      	b.n	800956e <__d2b+0x52>
 80095a2:	a801      	add	r0, sp, #4
 80095a4:	f7ff fd64 	bl	8009070 <__lo0bits>
 80095a8:	9b01      	ldr	r3, [sp, #4]
 80095aa:	6163      	str	r3, [r4, #20]
 80095ac:	2201      	movs	r2, #1
 80095ae:	6122      	str	r2, [r4, #16]
 80095b0:	3020      	adds	r0, #32
 80095b2:	e7e3      	b.n	800957c <__d2b+0x60>
 80095b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095bc:	f8c9 0000 	str.w	r0, [r9]
 80095c0:	6918      	ldr	r0, [r3, #16]
 80095c2:	f7ff fd35 	bl	8009030 <__hi0bits>
 80095c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095ca:	e7df      	b.n	800958c <__d2b+0x70>
 80095cc:	0800abd4 	.word	0x0800abd4
 80095d0:	0800abe5 	.word	0x0800abe5

080095d4 <_calloc_r>:
 80095d4:	b513      	push	{r0, r1, r4, lr}
 80095d6:	434a      	muls	r2, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	9201      	str	r2, [sp, #4]
 80095dc:	f000 f85a 	bl	8009694 <_malloc_r>
 80095e0:	4604      	mov	r4, r0
 80095e2:	b118      	cbz	r0, 80095ec <_calloc_r+0x18>
 80095e4:	9a01      	ldr	r2, [sp, #4]
 80095e6:	2100      	movs	r1, #0
 80095e8:	f7fe f8bc 	bl	8007764 <memset>
 80095ec:	4620      	mov	r0, r4
 80095ee:	b002      	add	sp, #8
 80095f0:	bd10      	pop	{r4, pc}
	...

080095f4 <_free_r>:
 80095f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095f6:	2900      	cmp	r1, #0
 80095f8:	d048      	beq.n	800968c <_free_r+0x98>
 80095fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095fe:	9001      	str	r0, [sp, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f1a1 0404 	sub.w	r4, r1, #4
 8009606:	bfb8      	it	lt
 8009608:	18e4      	addlt	r4, r4, r3
 800960a:	f000 fe75 	bl	800a2f8 <__malloc_lock>
 800960e:	4a20      	ldr	r2, [pc, #128]	; (8009690 <_free_r+0x9c>)
 8009610:	9801      	ldr	r0, [sp, #4]
 8009612:	6813      	ldr	r3, [r2, #0]
 8009614:	4615      	mov	r5, r2
 8009616:	b933      	cbnz	r3, 8009626 <_free_r+0x32>
 8009618:	6063      	str	r3, [r4, #4]
 800961a:	6014      	str	r4, [r2, #0]
 800961c:	b003      	add	sp, #12
 800961e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009622:	f000 be6f 	b.w	800a304 <__malloc_unlock>
 8009626:	42a3      	cmp	r3, r4
 8009628:	d90b      	bls.n	8009642 <_free_r+0x4e>
 800962a:	6821      	ldr	r1, [r4, #0]
 800962c:	1862      	adds	r2, r4, r1
 800962e:	4293      	cmp	r3, r2
 8009630:	bf04      	itt	eq
 8009632:	681a      	ldreq	r2, [r3, #0]
 8009634:	685b      	ldreq	r3, [r3, #4]
 8009636:	6063      	str	r3, [r4, #4]
 8009638:	bf04      	itt	eq
 800963a:	1852      	addeq	r2, r2, r1
 800963c:	6022      	streq	r2, [r4, #0]
 800963e:	602c      	str	r4, [r5, #0]
 8009640:	e7ec      	b.n	800961c <_free_r+0x28>
 8009642:	461a      	mov	r2, r3
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	b10b      	cbz	r3, 800964c <_free_r+0x58>
 8009648:	42a3      	cmp	r3, r4
 800964a:	d9fa      	bls.n	8009642 <_free_r+0x4e>
 800964c:	6811      	ldr	r1, [r2, #0]
 800964e:	1855      	adds	r5, r2, r1
 8009650:	42a5      	cmp	r5, r4
 8009652:	d10b      	bne.n	800966c <_free_r+0x78>
 8009654:	6824      	ldr	r4, [r4, #0]
 8009656:	4421      	add	r1, r4
 8009658:	1854      	adds	r4, r2, r1
 800965a:	42a3      	cmp	r3, r4
 800965c:	6011      	str	r1, [r2, #0]
 800965e:	d1dd      	bne.n	800961c <_free_r+0x28>
 8009660:	681c      	ldr	r4, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	6053      	str	r3, [r2, #4]
 8009666:	4421      	add	r1, r4
 8009668:	6011      	str	r1, [r2, #0]
 800966a:	e7d7      	b.n	800961c <_free_r+0x28>
 800966c:	d902      	bls.n	8009674 <_free_r+0x80>
 800966e:	230c      	movs	r3, #12
 8009670:	6003      	str	r3, [r0, #0]
 8009672:	e7d3      	b.n	800961c <_free_r+0x28>
 8009674:	6825      	ldr	r5, [r4, #0]
 8009676:	1961      	adds	r1, r4, r5
 8009678:	428b      	cmp	r3, r1
 800967a:	bf04      	itt	eq
 800967c:	6819      	ldreq	r1, [r3, #0]
 800967e:	685b      	ldreq	r3, [r3, #4]
 8009680:	6063      	str	r3, [r4, #4]
 8009682:	bf04      	itt	eq
 8009684:	1949      	addeq	r1, r1, r5
 8009686:	6021      	streq	r1, [r4, #0]
 8009688:	6054      	str	r4, [r2, #4]
 800968a:	e7c7      	b.n	800961c <_free_r+0x28>
 800968c:	b003      	add	sp, #12
 800968e:	bd30      	pop	{r4, r5, pc}
 8009690:	200001fc 	.word	0x200001fc

08009694 <_malloc_r>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	1ccd      	adds	r5, r1, #3
 8009698:	f025 0503 	bic.w	r5, r5, #3
 800969c:	3508      	adds	r5, #8
 800969e:	2d0c      	cmp	r5, #12
 80096a0:	bf38      	it	cc
 80096a2:	250c      	movcc	r5, #12
 80096a4:	2d00      	cmp	r5, #0
 80096a6:	4606      	mov	r6, r0
 80096a8:	db01      	blt.n	80096ae <_malloc_r+0x1a>
 80096aa:	42a9      	cmp	r1, r5
 80096ac:	d903      	bls.n	80096b6 <_malloc_r+0x22>
 80096ae:	230c      	movs	r3, #12
 80096b0:	6033      	str	r3, [r6, #0]
 80096b2:	2000      	movs	r0, #0
 80096b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b6:	f000 fe1f 	bl	800a2f8 <__malloc_lock>
 80096ba:	4921      	ldr	r1, [pc, #132]	; (8009740 <_malloc_r+0xac>)
 80096bc:	680a      	ldr	r2, [r1, #0]
 80096be:	4614      	mov	r4, r2
 80096c0:	b99c      	cbnz	r4, 80096ea <_malloc_r+0x56>
 80096c2:	4f20      	ldr	r7, [pc, #128]	; (8009744 <_malloc_r+0xb0>)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	b923      	cbnz	r3, 80096d2 <_malloc_r+0x3e>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4630      	mov	r0, r6
 80096cc:	f000 faf2 	bl	8009cb4 <_sbrk_r>
 80096d0:	6038      	str	r0, [r7, #0]
 80096d2:	4629      	mov	r1, r5
 80096d4:	4630      	mov	r0, r6
 80096d6:	f000 faed 	bl	8009cb4 <_sbrk_r>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	d123      	bne.n	8009726 <_malloc_r+0x92>
 80096de:	230c      	movs	r3, #12
 80096e0:	6033      	str	r3, [r6, #0]
 80096e2:	4630      	mov	r0, r6
 80096e4:	f000 fe0e 	bl	800a304 <__malloc_unlock>
 80096e8:	e7e3      	b.n	80096b2 <_malloc_r+0x1e>
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	1b5b      	subs	r3, r3, r5
 80096ee:	d417      	bmi.n	8009720 <_malloc_r+0x8c>
 80096f0:	2b0b      	cmp	r3, #11
 80096f2:	d903      	bls.n	80096fc <_malloc_r+0x68>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	441c      	add	r4, r3
 80096f8:	6025      	str	r5, [r4, #0]
 80096fa:	e004      	b.n	8009706 <_malloc_r+0x72>
 80096fc:	6863      	ldr	r3, [r4, #4]
 80096fe:	42a2      	cmp	r2, r4
 8009700:	bf0c      	ite	eq
 8009702:	600b      	streq	r3, [r1, #0]
 8009704:	6053      	strne	r3, [r2, #4]
 8009706:	4630      	mov	r0, r6
 8009708:	f000 fdfc 	bl	800a304 <__malloc_unlock>
 800970c:	f104 000b 	add.w	r0, r4, #11
 8009710:	1d23      	adds	r3, r4, #4
 8009712:	f020 0007 	bic.w	r0, r0, #7
 8009716:	1ac2      	subs	r2, r0, r3
 8009718:	d0cc      	beq.n	80096b4 <_malloc_r+0x20>
 800971a:	1a1b      	subs	r3, r3, r0
 800971c:	50a3      	str	r3, [r4, r2]
 800971e:	e7c9      	b.n	80096b4 <_malloc_r+0x20>
 8009720:	4622      	mov	r2, r4
 8009722:	6864      	ldr	r4, [r4, #4]
 8009724:	e7cc      	b.n	80096c0 <_malloc_r+0x2c>
 8009726:	1cc4      	adds	r4, r0, #3
 8009728:	f024 0403 	bic.w	r4, r4, #3
 800972c:	42a0      	cmp	r0, r4
 800972e:	d0e3      	beq.n	80096f8 <_malloc_r+0x64>
 8009730:	1a21      	subs	r1, r4, r0
 8009732:	4630      	mov	r0, r6
 8009734:	f000 fabe 	bl	8009cb4 <_sbrk_r>
 8009738:	3001      	adds	r0, #1
 800973a:	d1dd      	bne.n	80096f8 <_malloc_r+0x64>
 800973c:	e7cf      	b.n	80096de <_malloc_r+0x4a>
 800973e:	bf00      	nop
 8009740:	200001fc 	.word	0x200001fc
 8009744:	20000200 	.word	0x20000200

08009748 <__ssputs_r>:
 8009748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800974c:	688e      	ldr	r6, [r1, #8]
 800974e:	429e      	cmp	r6, r3
 8009750:	4682      	mov	sl, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4690      	mov	r8, r2
 8009756:	461f      	mov	r7, r3
 8009758:	d838      	bhi.n	80097cc <__ssputs_r+0x84>
 800975a:	898a      	ldrh	r2, [r1, #12]
 800975c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009760:	d032      	beq.n	80097c8 <__ssputs_r+0x80>
 8009762:	6825      	ldr	r5, [r4, #0]
 8009764:	6909      	ldr	r1, [r1, #16]
 8009766:	eba5 0901 	sub.w	r9, r5, r1
 800976a:	6965      	ldr	r5, [r4, #20]
 800976c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009774:	3301      	adds	r3, #1
 8009776:	444b      	add	r3, r9
 8009778:	106d      	asrs	r5, r5, #1
 800977a:	429d      	cmp	r5, r3
 800977c:	bf38      	it	cc
 800977e:	461d      	movcc	r5, r3
 8009780:	0553      	lsls	r3, r2, #21
 8009782:	d531      	bpl.n	80097e8 <__ssputs_r+0xa0>
 8009784:	4629      	mov	r1, r5
 8009786:	f7ff ff85 	bl	8009694 <_malloc_r>
 800978a:	4606      	mov	r6, r0
 800978c:	b950      	cbnz	r0, 80097a4 <__ssputs_r+0x5c>
 800978e:	230c      	movs	r3, #12
 8009790:	f8ca 3000 	str.w	r3, [sl]
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800979a:	81a3      	strh	r3, [r4, #12]
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a4:	6921      	ldr	r1, [r4, #16]
 80097a6:	464a      	mov	r2, r9
 80097a8:	f7ff fb88 	bl	8008ebc <memcpy>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	6126      	str	r6, [r4, #16]
 80097ba:	6165      	str	r5, [r4, #20]
 80097bc:	444e      	add	r6, r9
 80097be:	eba5 0509 	sub.w	r5, r5, r9
 80097c2:	6026      	str	r6, [r4, #0]
 80097c4:	60a5      	str	r5, [r4, #8]
 80097c6:	463e      	mov	r6, r7
 80097c8:	42be      	cmp	r6, r7
 80097ca:	d900      	bls.n	80097ce <__ssputs_r+0x86>
 80097cc:	463e      	mov	r6, r7
 80097ce:	4632      	mov	r2, r6
 80097d0:	6820      	ldr	r0, [r4, #0]
 80097d2:	4641      	mov	r1, r8
 80097d4:	f000 fd76 	bl	800a2c4 <memmove>
 80097d8:	68a3      	ldr	r3, [r4, #8]
 80097da:	6822      	ldr	r2, [r4, #0]
 80097dc:	1b9b      	subs	r3, r3, r6
 80097de:	4432      	add	r2, r6
 80097e0:	60a3      	str	r3, [r4, #8]
 80097e2:	6022      	str	r2, [r4, #0]
 80097e4:	2000      	movs	r0, #0
 80097e6:	e7db      	b.n	80097a0 <__ssputs_r+0x58>
 80097e8:	462a      	mov	r2, r5
 80097ea:	f000 fd91 	bl	800a310 <_realloc_r>
 80097ee:	4606      	mov	r6, r0
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d1e1      	bne.n	80097b8 <__ssputs_r+0x70>
 80097f4:	6921      	ldr	r1, [r4, #16]
 80097f6:	4650      	mov	r0, sl
 80097f8:	f7ff fefc 	bl	80095f4 <_free_r>
 80097fc:	e7c7      	b.n	800978e <__ssputs_r+0x46>
	...

08009800 <_svfiprintf_r>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	4698      	mov	r8, r3
 8009806:	898b      	ldrh	r3, [r1, #12]
 8009808:	061b      	lsls	r3, r3, #24
 800980a:	b09d      	sub	sp, #116	; 0x74
 800980c:	4607      	mov	r7, r0
 800980e:	460d      	mov	r5, r1
 8009810:	4614      	mov	r4, r2
 8009812:	d50e      	bpl.n	8009832 <_svfiprintf_r+0x32>
 8009814:	690b      	ldr	r3, [r1, #16]
 8009816:	b963      	cbnz	r3, 8009832 <_svfiprintf_r+0x32>
 8009818:	2140      	movs	r1, #64	; 0x40
 800981a:	f7ff ff3b 	bl	8009694 <_malloc_r>
 800981e:	6028      	str	r0, [r5, #0]
 8009820:	6128      	str	r0, [r5, #16]
 8009822:	b920      	cbnz	r0, 800982e <_svfiprintf_r+0x2e>
 8009824:	230c      	movs	r3, #12
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	f04f 30ff 	mov.w	r0, #4294967295
 800982c:	e0d1      	b.n	80099d2 <_svfiprintf_r+0x1d2>
 800982e:	2340      	movs	r3, #64	; 0x40
 8009830:	616b      	str	r3, [r5, #20]
 8009832:	2300      	movs	r3, #0
 8009834:	9309      	str	r3, [sp, #36]	; 0x24
 8009836:	2320      	movs	r3, #32
 8009838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800983c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009840:	2330      	movs	r3, #48	; 0x30
 8009842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099ec <_svfiprintf_r+0x1ec>
 8009846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800984a:	f04f 0901 	mov.w	r9, #1
 800984e:	4623      	mov	r3, r4
 8009850:	469a      	mov	sl, r3
 8009852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009856:	b10a      	cbz	r2, 800985c <_svfiprintf_r+0x5c>
 8009858:	2a25      	cmp	r2, #37	; 0x25
 800985a:	d1f9      	bne.n	8009850 <_svfiprintf_r+0x50>
 800985c:	ebba 0b04 	subs.w	fp, sl, r4
 8009860:	d00b      	beq.n	800987a <_svfiprintf_r+0x7a>
 8009862:	465b      	mov	r3, fp
 8009864:	4622      	mov	r2, r4
 8009866:	4629      	mov	r1, r5
 8009868:	4638      	mov	r0, r7
 800986a:	f7ff ff6d 	bl	8009748 <__ssputs_r>
 800986e:	3001      	adds	r0, #1
 8009870:	f000 80aa 	beq.w	80099c8 <_svfiprintf_r+0x1c8>
 8009874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009876:	445a      	add	r2, fp
 8009878:	9209      	str	r2, [sp, #36]	; 0x24
 800987a:	f89a 3000 	ldrb.w	r3, [sl]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80a2 	beq.w	80099c8 <_svfiprintf_r+0x1c8>
 8009884:	2300      	movs	r3, #0
 8009886:	f04f 32ff 	mov.w	r2, #4294967295
 800988a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800988e:	f10a 0a01 	add.w	sl, sl, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	9307      	str	r3, [sp, #28]
 8009896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800989a:	931a      	str	r3, [sp, #104]	; 0x68
 800989c:	4654      	mov	r4, sl
 800989e:	2205      	movs	r2, #5
 80098a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a4:	4851      	ldr	r0, [pc, #324]	; (80099ec <_svfiprintf_r+0x1ec>)
 80098a6:	f7f6 fcb3 	bl	8000210 <memchr>
 80098aa:	9a04      	ldr	r2, [sp, #16]
 80098ac:	b9d8      	cbnz	r0, 80098e6 <_svfiprintf_r+0xe6>
 80098ae:	06d0      	lsls	r0, r2, #27
 80098b0:	bf44      	itt	mi
 80098b2:	2320      	movmi	r3, #32
 80098b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b8:	0711      	lsls	r1, r2, #28
 80098ba:	bf44      	itt	mi
 80098bc:	232b      	movmi	r3, #43	; 0x2b
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c2:	f89a 3000 	ldrb.w	r3, [sl]
 80098c6:	2b2a      	cmp	r3, #42	; 0x2a
 80098c8:	d015      	beq.n	80098f6 <_svfiprintf_r+0xf6>
 80098ca:	9a07      	ldr	r2, [sp, #28]
 80098cc:	4654      	mov	r4, sl
 80098ce:	2000      	movs	r0, #0
 80098d0:	f04f 0c0a 	mov.w	ip, #10
 80098d4:	4621      	mov	r1, r4
 80098d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098da:	3b30      	subs	r3, #48	; 0x30
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d94e      	bls.n	800997e <_svfiprintf_r+0x17e>
 80098e0:	b1b0      	cbz	r0, 8009910 <_svfiprintf_r+0x110>
 80098e2:	9207      	str	r2, [sp, #28]
 80098e4:	e014      	b.n	8009910 <_svfiprintf_r+0x110>
 80098e6:	eba0 0308 	sub.w	r3, r0, r8
 80098ea:	fa09 f303 	lsl.w	r3, r9, r3
 80098ee:	4313      	orrs	r3, r2
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	46a2      	mov	sl, r4
 80098f4:	e7d2      	b.n	800989c <_svfiprintf_r+0x9c>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d19      	adds	r1, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9103      	str	r1, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfbb      	ittet	lt
 8009902:	425b      	neglt	r3, r3
 8009904:	f042 0202 	orrlt.w	r2, r2, #2
 8009908:	9307      	strge	r3, [sp, #28]
 800990a:	9307      	strlt	r3, [sp, #28]
 800990c:	bfb8      	it	lt
 800990e:	9204      	strlt	r2, [sp, #16]
 8009910:	7823      	ldrb	r3, [r4, #0]
 8009912:	2b2e      	cmp	r3, #46	; 0x2e
 8009914:	d10c      	bne.n	8009930 <_svfiprintf_r+0x130>
 8009916:	7863      	ldrb	r3, [r4, #1]
 8009918:	2b2a      	cmp	r3, #42	; 0x2a
 800991a:	d135      	bne.n	8009988 <_svfiprintf_r+0x188>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	1d1a      	adds	r2, r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	9203      	str	r2, [sp, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfb8      	it	lt
 8009928:	f04f 33ff 	movlt.w	r3, #4294967295
 800992c:	3402      	adds	r4, #2
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099fc <_svfiprintf_r+0x1fc>
 8009934:	7821      	ldrb	r1, [r4, #0]
 8009936:	2203      	movs	r2, #3
 8009938:	4650      	mov	r0, sl
 800993a:	f7f6 fc69 	bl	8000210 <memchr>
 800993e:	b140      	cbz	r0, 8009952 <_svfiprintf_r+0x152>
 8009940:	2340      	movs	r3, #64	; 0x40
 8009942:	eba0 000a 	sub.w	r0, r0, sl
 8009946:	fa03 f000 	lsl.w	r0, r3, r0
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	4303      	orrs	r3, r0
 800994e:	3401      	adds	r4, #1
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009956:	4826      	ldr	r0, [pc, #152]	; (80099f0 <_svfiprintf_r+0x1f0>)
 8009958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800995c:	2206      	movs	r2, #6
 800995e:	f7f6 fc57 	bl	8000210 <memchr>
 8009962:	2800      	cmp	r0, #0
 8009964:	d038      	beq.n	80099d8 <_svfiprintf_r+0x1d8>
 8009966:	4b23      	ldr	r3, [pc, #140]	; (80099f4 <_svfiprintf_r+0x1f4>)
 8009968:	bb1b      	cbnz	r3, 80099b2 <_svfiprintf_r+0x1b2>
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	3307      	adds	r3, #7
 800996e:	f023 0307 	bic.w	r3, r3, #7
 8009972:	3308      	adds	r3, #8
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009978:	4433      	add	r3, r6
 800997a:	9309      	str	r3, [sp, #36]	; 0x24
 800997c:	e767      	b.n	800984e <_svfiprintf_r+0x4e>
 800997e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009982:	460c      	mov	r4, r1
 8009984:	2001      	movs	r0, #1
 8009986:	e7a5      	b.n	80098d4 <_svfiprintf_r+0xd4>
 8009988:	2300      	movs	r3, #0
 800998a:	3401      	adds	r4, #1
 800998c:	9305      	str	r3, [sp, #20]
 800998e:	4619      	mov	r1, r3
 8009990:	f04f 0c0a 	mov.w	ip, #10
 8009994:	4620      	mov	r0, r4
 8009996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800999a:	3a30      	subs	r2, #48	; 0x30
 800999c:	2a09      	cmp	r2, #9
 800999e:	d903      	bls.n	80099a8 <_svfiprintf_r+0x1a8>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0c5      	beq.n	8009930 <_svfiprintf_r+0x130>
 80099a4:	9105      	str	r1, [sp, #20]
 80099a6:	e7c3      	b.n	8009930 <_svfiprintf_r+0x130>
 80099a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ac:	4604      	mov	r4, r0
 80099ae:	2301      	movs	r3, #1
 80099b0:	e7f0      	b.n	8009994 <_svfiprintf_r+0x194>
 80099b2:	ab03      	add	r3, sp, #12
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	462a      	mov	r2, r5
 80099b8:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <_svfiprintf_r+0x1f8>)
 80099ba:	a904      	add	r1, sp, #16
 80099bc:	4638      	mov	r0, r7
 80099be:	f7fd ff79 	bl	80078b4 <_printf_float>
 80099c2:	1c42      	adds	r2, r0, #1
 80099c4:	4606      	mov	r6, r0
 80099c6:	d1d6      	bne.n	8009976 <_svfiprintf_r+0x176>
 80099c8:	89ab      	ldrh	r3, [r5, #12]
 80099ca:	065b      	lsls	r3, r3, #25
 80099cc:	f53f af2c 	bmi.w	8009828 <_svfiprintf_r+0x28>
 80099d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d2:	b01d      	add	sp, #116	; 0x74
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d8:	ab03      	add	r3, sp, #12
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	462a      	mov	r2, r5
 80099de:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <_svfiprintf_r+0x1f8>)
 80099e0:	a904      	add	r1, sp, #16
 80099e2:	4638      	mov	r0, r7
 80099e4:	f7fe fa0a 	bl	8007dfc <_printf_i>
 80099e8:	e7eb      	b.n	80099c2 <_svfiprintf_r+0x1c2>
 80099ea:	bf00      	nop
 80099ec:	0800ad44 	.word	0x0800ad44
 80099f0:	0800ad4e 	.word	0x0800ad4e
 80099f4:	080078b5 	.word	0x080078b5
 80099f8:	08009749 	.word	0x08009749
 80099fc:	0800ad4a 	.word	0x0800ad4a

08009a00 <__sfputc_r>:
 8009a00:	6893      	ldr	r3, [r2, #8]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	b410      	push	{r4}
 8009a08:	6093      	str	r3, [r2, #8]
 8009a0a:	da08      	bge.n	8009a1e <__sfputc_r+0x1e>
 8009a0c:	6994      	ldr	r4, [r2, #24]
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	db01      	blt.n	8009a16 <__sfputc_r+0x16>
 8009a12:	290a      	cmp	r1, #10
 8009a14:	d103      	bne.n	8009a1e <__sfputc_r+0x1e>
 8009a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a1a:	f000 b95b 	b.w	8009cd4 <__swbuf_r>
 8009a1e:	6813      	ldr	r3, [r2, #0]
 8009a20:	1c58      	adds	r0, r3, #1
 8009a22:	6010      	str	r0, [r2, #0]
 8009a24:	7019      	strb	r1, [r3, #0]
 8009a26:	4608      	mov	r0, r1
 8009a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <__sfputs_r>:
 8009a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a30:	4606      	mov	r6, r0
 8009a32:	460f      	mov	r7, r1
 8009a34:	4614      	mov	r4, r2
 8009a36:	18d5      	adds	r5, r2, r3
 8009a38:	42ac      	cmp	r4, r5
 8009a3a:	d101      	bne.n	8009a40 <__sfputs_r+0x12>
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e007      	b.n	8009a50 <__sfputs_r+0x22>
 8009a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a44:	463a      	mov	r2, r7
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7ff ffda 	bl	8009a00 <__sfputc_r>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d1f3      	bne.n	8009a38 <__sfputs_r+0xa>
 8009a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a54 <_vfiprintf_r>:
 8009a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	460d      	mov	r5, r1
 8009a5a:	b09d      	sub	sp, #116	; 0x74
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	4698      	mov	r8, r3
 8009a60:	4606      	mov	r6, r0
 8009a62:	b118      	cbz	r0, 8009a6c <_vfiprintf_r+0x18>
 8009a64:	6983      	ldr	r3, [r0, #24]
 8009a66:	b90b      	cbnz	r3, 8009a6c <_vfiprintf_r+0x18>
 8009a68:	f000 fb16 	bl	800a098 <__sinit>
 8009a6c:	4b89      	ldr	r3, [pc, #548]	; (8009c94 <_vfiprintf_r+0x240>)
 8009a6e:	429d      	cmp	r5, r3
 8009a70:	d11b      	bne.n	8009aaa <_vfiprintf_r+0x56>
 8009a72:	6875      	ldr	r5, [r6, #4]
 8009a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a76:	07d9      	lsls	r1, r3, #31
 8009a78:	d405      	bmi.n	8009a86 <_vfiprintf_r+0x32>
 8009a7a:	89ab      	ldrh	r3, [r5, #12]
 8009a7c:	059a      	lsls	r2, r3, #22
 8009a7e:	d402      	bmi.n	8009a86 <_vfiprintf_r+0x32>
 8009a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a82:	f000 fba7 	bl	800a1d4 <__retarget_lock_acquire_recursive>
 8009a86:	89ab      	ldrh	r3, [r5, #12]
 8009a88:	071b      	lsls	r3, r3, #28
 8009a8a:	d501      	bpl.n	8009a90 <_vfiprintf_r+0x3c>
 8009a8c:	692b      	ldr	r3, [r5, #16]
 8009a8e:	b9eb      	cbnz	r3, 8009acc <_vfiprintf_r+0x78>
 8009a90:	4629      	mov	r1, r5
 8009a92:	4630      	mov	r0, r6
 8009a94:	f000 f970 	bl	8009d78 <__swsetup_r>
 8009a98:	b1c0      	cbz	r0, 8009acc <_vfiprintf_r+0x78>
 8009a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a9c:	07dc      	lsls	r4, r3, #31
 8009a9e:	d50e      	bpl.n	8009abe <_vfiprintf_r+0x6a>
 8009aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa4:	b01d      	add	sp, #116	; 0x74
 8009aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aaa:	4b7b      	ldr	r3, [pc, #492]	; (8009c98 <_vfiprintf_r+0x244>)
 8009aac:	429d      	cmp	r5, r3
 8009aae:	d101      	bne.n	8009ab4 <_vfiprintf_r+0x60>
 8009ab0:	68b5      	ldr	r5, [r6, #8]
 8009ab2:	e7df      	b.n	8009a74 <_vfiprintf_r+0x20>
 8009ab4:	4b79      	ldr	r3, [pc, #484]	; (8009c9c <_vfiprintf_r+0x248>)
 8009ab6:	429d      	cmp	r5, r3
 8009ab8:	bf08      	it	eq
 8009aba:	68f5      	ldreq	r5, [r6, #12]
 8009abc:	e7da      	b.n	8009a74 <_vfiprintf_r+0x20>
 8009abe:	89ab      	ldrh	r3, [r5, #12]
 8009ac0:	0598      	lsls	r0, r3, #22
 8009ac2:	d4ed      	bmi.n	8009aa0 <_vfiprintf_r+0x4c>
 8009ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ac6:	f000 fb86 	bl	800a1d6 <__retarget_lock_release_recursive>
 8009aca:	e7e9      	b.n	8009aa0 <_vfiprintf_r+0x4c>
 8009acc:	2300      	movs	r3, #0
 8009ace:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad0:	2320      	movs	r3, #32
 8009ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ada:	2330      	movs	r3, #48	; 0x30
 8009adc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ca0 <_vfiprintf_r+0x24c>
 8009ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ae4:	f04f 0901 	mov.w	r9, #1
 8009ae8:	4623      	mov	r3, r4
 8009aea:	469a      	mov	sl, r3
 8009aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af0:	b10a      	cbz	r2, 8009af6 <_vfiprintf_r+0xa2>
 8009af2:	2a25      	cmp	r2, #37	; 0x25
 8009af4:	d1f9      	bne.n	8009aea <_vfiprintf_r+0x96>
 8009af6:	ebba 0b04 	subs.w	fp, sl, r4
 8009afa:	d00b      	beq.n	8009b14 <_vfiprintf_r+0xc0>
 8009afc:	465b      	mov	r3, fp
 8009afe:	4622      	mov	r2, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	4630      	mov	r0, r6
 8009b04:	f7ff ff93 	bl	8009a2e <__sfputs_r>
 8009b08:	3001      	adds	r0, #1
 8009b0a:	f000 80aa 	beq.w	8009c62 <_vfiprintf_r+0x20e>
 8009b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b10:	445a      	add	r2, fp
 8009b12:	9209      	str	r2, [sp, #36]	; 0x24
 8009b14:	f89a 3000 	ldrb.w	r3, [sl]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 80a2 	beq.w	8009c62 <_vfiprintf_r+0x20e>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f04f 32ff 	mov.w	r2, #4294967295
 8009b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b28:	f10a 0a01 	add.w	sl, sl, #1
 8009b2c:	9304      	str	r3, [sp, #16]
 8009b2e:	9307      	str	r3, [sp, #28]
 8009b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b34:	931a      	str	r3, [sp, #104]	; 0x68
 8009b36:	4654      	mov	r4, sl
 8009b38:	2205      	movs	r2, #5
 8009b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b3e:	4858      	ldr	r0, [pc, #352]	; (8009ca0 <_vfiprintf_r+0x24c>)
 8009b40:	f7f6 fb66 	bl	8000210 <memchr>
 8009b44:	9a04      	ldr	r2, [sp, #16]
 8009b46:	b9d8      	cbnz	r0, 8009b80 <_vfiprintf_r+0x12c>
 8009b48:	06d1      	lsls	r1, r2, #27
 8009b4a:	bf44      	itt	mi
 8009b4c:	2320      	movmi	r3, #32
 8009b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b52:	0713      	lsls	r3, r2, #28
 8009b54:	bf44      	itt	mi
 8009b56:	232b      	movmi	r3, #43	; 0x2b
 8009b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b60:	2b2a      	cmp	r3, #42	; 0x2a
 8009b62:	d015      	beq.n	8009b90 <_vfiprintf_r+0x13c>
 8009b64:	9a07      	ldr	r2, [sp, #28]
 8009b66:	4654      	mov	r4, sl
 8009b68:	2000      	movs	r0, #0
 8009b6a:	f04f 0c0a 	mov.w	ip, #10
 8009b6e:	4621      	mov	r1, r4
 8009b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b74:	3b30      	subs	r3, #48	; 0x30
 8009b76:	2b09      	cmp	r3, #9
 8009b78:	d94e      	bls.n	8009c18 <_vfiprintf_r+0x1c4>
 8009b7a:	b1b0      	cbz	r0, 8009baa <_vfiprintf_r+0x156>
 8009b7c:	9207      	str	r2, [sp, #28]
 8009b7e:	e014      	b.n	8009baa <_vfiprintf_r+0x156>
 8009b80:	eba0 0308 	sub.w	r3, r0, r8
 8009b84:	fa09 f303 	lsl.w	r3, r9, r3
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	9304      	str	r3, [sp, #16]
 8009b8c:	46a2      	mov	sl, r4
 8009b8e:	e7d2      	b.n	8009b36 <_vfiprintf_r+0xe2>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	1d19      	adds	r1, r3, #4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	9103      	str	r1, [sp, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfbb      	ittet	lt
 8009b9c:	425b      	neglt	r3, r3
 8009b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009ba2:	9307      	strge	r3, [sp, #28]
 8009ba4:	9307      	strlt	r3, [sp, #28]
 8009ba6:	bfb8      	it	lt
 8009ba8:	9204      	strlt	r2, [sp, #16]
 8009baa:	7823      	ldrb	r3, [r4, #0]
 8009bac:	2b2e      	cmp	r3, #46	; 0x2e
 8009bae:	d10c      	bne.n	8009bca <_vfiprintf_r+0x176>
 8009bb0:	7863      	ldrb	r3, [r4, #1]
 8009bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009bb4:	d135      	bne.n	8009c22 <_vfiprintf_r+0x1ce>
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	1d1a      	adds	r2, r3, #4
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	9203      	str	r2, [sp, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bfb8      	it	lt
 8009bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bc6:	3402      	adds	r4, #2
 8009bc8:	9305      	str	r3, [sp, #20]
 8009bca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cb0 <_vfiprintf_r+0x25c>
 8009bce:	7821      	ldrb	r1, [r4, #0]
 8009bd0:	2203      	movs	r2, #3
 8009bd2:	4650      	mov	r0, sl
 8009bd4:	f7f6 fb1c 	bl	8000210 <memchr>
 8009bd8:	b140      	cbz	r0, 8009bec <_vfiprintf_r+0x198>
 8009bda:	2340      	movs	r3, #64	; 0x40
 8009bdc:	eba0 000a 	sub.w	r0, r0, sl
 8009be0:	fa03 f000 	lsl.w	r0, r3, r0
 8009be4:	9b04      	ldr	r3, [sp, #16]
 8009be6:	4303      	orrs	r3, r0
 8009be8:	3401      	adds	r4, #1
 8009bea:	9304      	str	r3, [sp, #16]
 8009bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf0:	482c      	ldr	r0, [pc, #176]	; (8009ca4 <_vfiprintf_r+0x250>)
 8009bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bf6:	2206      	movs	r2, #6
 8009bf8:	f7f6 fb0a 	bl	8000210 <memchr>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d03f      	beq.n	8009c80 <_vfiprintf_r+0x22c>
 8009c00:	4b29      	ldr	r3, [pc, #164]	; (8009ca8 <_vfiprintf_r+0x254>)
 8009c02:	bb1b      	cbnz	r3, 8009c4c <_vfiprintf_r+0x1f8>
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	3307      	adds	r3, #7
 8009c08:	f023 0307 	bic.w	r3, r3, #7
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	9303      	str	r3, [sp, #12]
 8009c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c12:	443b      	add	r3, r7
 8009c14:	9309      	str	r3, [sp, #36]	; 0x24
 8009c16:	e767      	b.n	8009ae8 <_vfiprintf_r+0x94>
 8009c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	2001      	movs	r0, #1
 8009c20:	e7a5      	b.n	8009b6e <_vfiprintf_r+0x11a>
 8009c22:	2300      	movs	r3, #0
 8009c24:	3401      	adds	r4, #1
 8009c26:	9305      	str	r3, [sp, #20]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f04f 0c0a 	mov.w	ip, #10
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c34:	3a30      	subs	r2, #48	; 0x30
 8009c36:	2a09      	cmp	r2, #9
 8009c38:	d903      	bls.n	8009c42 <_vfiprintf_r+0x1ee>
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0c5      	beq.n	8009bca <_vfiprintf_r+0x176>
 8009c3e:	9105      	str	r1, [sp, #20]
 8009c40:	e7c3      	b.n	8009bca <_vfiprintf_r+0x176>
 8009c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c46:	4604      	mov	r4, r0
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e7f0      	b.n	8009c2e <_vfiprintf_r+0x1da>
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b16      	ldr	r3, [pc, #88]	; (8009cac <_vfiprintf_r+0x258>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4630      	mov	r0, r6
 8009c58:	f7fd fe2c 	bl	80078b4 <_printf_float>
 8009c5c:	4607      	mov	r7, r0
 8009c5e:	1c78      	adds	r0, r7, #1
 8009c60:	d1d6      	bne.n	8009c10 <_vfiprintf_r+0x1bc>
 8009c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c64:	07d9      	lsls	r1, r3, #31
 8009c66:	d405      	bmi.n	8009c74 <_vfiprintf_r+0x220>
 8009c68:	89ab      	ldrh	r3, [r5, #12]
 8009c6a:	059a      	lsls	r2, r3, #22
 8009c6c:	d402      	bmi.n	8009c74 <_vfiprintf_r+0x220>
 8009c6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c70:	f000 fab1 	bl	800a1d6 <__retarget_lock_release_recursive>
 8009c74:	89ab      	ldrh	r3, [r5, #12]
 8009c76:	065b      	lsls	r3, r3, #25
 8009c78:	f53f af12 	bmi.w	8009aa0 <_vfiprintf_r+0x4c>
 8009c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c7e:	e711      	b.n	8009aa4 <_vfiprintf_r+0x50>
 8009c80:	ab03      	add	r3, sp, #12
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	462a      	mov	r2, r5
 8009c86:	4b09      	ldr	r3, [pc, #36]	; (8009cac <_vfiprintf_r+0x258>)
 8009c88:	a904      	add	r1, sp, #16
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7fe f8b6 	bl	8007dfc <_printf_i>
 8009c90:	e7e4      	b.n	8009c5c <_vfiprintf_r+0x208>
 8009c92:	bf00      	nop
 8009c94:	0800ad78 	.word	0x0800ad78
 8009c98:	0800ad98 	.word	0x0800ad98
 8009c9c:	0800ad58 	.word	0x0800ad58
 8009ca0:	0800ad44 	.word	0x0800ad44
 8009ca4:	0800ad4e 	.word	0x0800ad4e
 8009ca8:	080078b5 	.word	0x080078b5
 8009cac:	08009a2f 	.word	0x08009a2f
 8009cb0:	0800ad4a 	.word	0x0800ad4a

08009cb4 <_sbrk_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4d06      	ldr	r5, [pc, #24]	; (8009cd0 <_sbrk_r+0x1c>)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4604      	mov	r4, r0
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	602b      	str	r3, [r5, #0]
 8009cc0:	f7f8 fab2 	bl	8002228 <_sbrk>
 8009cc4:	1c43      	adds	r3, r0, #1
 8009cc6:	d102      	bne.n	8009cce <_sbrk_r+0x1a>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	b103      	cbz	r3, 8009cce <_sbrk_r+0x1a>
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	200004cc 	.word	0x200004cc

08009cd4 <__swbuf_r>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	460e      	mov	r6, r1
 8009cd8:	4614      	mov	r4, r2
 8009cda:	4605      	mov	r5, r0
 8009cdc:	b118      	cbz	r0, 8009ce6 <__swbuf_r+0x12>
 8009cde:	6983      	ldr	r3, [r0, #24]
 8009ce0:	b90b      	cbnz	r3, 8009ce6 <__swbuf_r+0x12>
 8009ce2:	f000 f9d9 	bl	800a098 <__sinit>
 8009ce6:	4b21      	ldr	r3, [pc, #132]	; (8009d6c <__swbuf_r+0x98>)
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	d12b      	bne.n	8009d44 <__swbuf_r+0x70>
 8009cec:	686c      	ldr	r4, [r5, #4]
 8009cee:	69a3      	ldr	r3, [r4, #24]
 8009cf0:	60a3      	str	r3, [r4, #8]
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	071a      	lsls	r2, r3, #28
 8009cf6:	d52f      	bpl.n	8009d58 <__swbuf_r+0x84>
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	b36b      	cbz	r3, 8009d58 <__swbuf_r+0x84>
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	6820      	ldr	r0, [r4, #0]
 8009d00:	1ac0      	subs	r0, r0, r3
 8009d02:	6963      	ldr	r3, [r4, #20]
 8009d04:	b2f6      	uxtb	r6, r6
 8009d06:	4283      	cmp	r3, r0
 8009d08:	4637      	mov	r7, r6
 8009d0a:	dc04      	bgt.n	8009d16 <__swbuf_r+0x42>
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f000 f92e 	bl	8009f70 <_fflush_r>
 8009d14:	bb30      	cbnz	r0, 8009d64 <__swbuf_r+0x90>
 8009d16:	68a3      	ldr	r3, [r4, #8]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	60a3      	str	r3, [r4, #8]
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	6022      	str	r2, [r4, #0]
 8009d22:	701e      	strb	r6, [r3, #0]
 8009d24:	6963      	ldr	r3, [r4, #20]
 8009d26:	3001      	adds	r0, #1
 8009d28:	4283      	cmp	r3, r0
 8009d2a:	d004      	beq.n	8009d36 <__swbuf_r+0x62>
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	07db      	lsls	r3, r3, #31
 8009d30:	d506      	bpl.n	8009d40 <__swbuf_r+0x6c>
 8009d32:	2e0a      	cmp	r6, #10
 8009d34:	d104      	bne.n	8009d40 <__swbuf_r+0x6c>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f000 f919 	bl	8009f70 <_fflush_r>
 8009d3e:	b988      	cbnz	r0, 8009d64 <__swbuf_r+0x90>
 8009d40:	4638      	mov	r0, r7
 8009d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d44:	4b0a      	ldr	r3, [pc, #40]	; (8009d70 <__swbuf_r+0x9c>)
 8009d46:	429c      	cmp	r4, r3
 8009d48:	d101      	bne.n	8009d4e <__swbuf_r+0x7a>
 8009d4a:	68ac      	ldr	r4, [r5, #8]
 8009d4c:	e7cf      	b.n	8009cee <__swbuf_r+0x1a>
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <__swbuf_r+0xa0>)
 8009d50:	429c      	cmp	r4, r3
 8009d52:	bf08      	it	eq
 8009d54:	68ec      	ldreq	r4, [r5, #12]
 8009d56:	e7ca      	b.n	8009cee <__swbuf_r+0x1a>
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f000 f80c 	bl	8009d78 <__swsetup_r>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d0cb      	beq.n	8009cfc <__swbuf_r+0x28>
 8009d64:	f04f 37ff 	mov.w	r7, #4294967295
 8009d68:	e7ea      	b.n	8009d40 <__swbuf_r+0x6c>
 8009d6a:	bf00      	nop
 8009d6c:	0800ad78 	.word	0x0800ad78
 8009d70:	0800ad98 	.word	0x0800ad98
 8009d74:	0800ad58 	.word	0x0800ad58

08009d78 <__swsetup_r>:
 8009d78:	4b32      	ldr	r3, [pc, #200]	; (8009e44 <__swsetup_r+0xcc>)
 8009d7a:	b570      	push	{r4, r5, r6, lr}
 8009d7c:	681d      	ldr	r5, [r3, #0]
 8009d7e:	4606      	mov	r6, r0
 8009d80:	460c      	mov	r4, r1
 8009d82:	b125      	cbz	r5, 8009d8e <__swsetup_r+0x16>
 8009d84:	69ab      	ldr	r3, [r5, #24]
 8009d86:	b913      	cbnz	r3, 8009d8e <__swsetup_r+0x16>
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f000 f985 	bl	800a098 <__sinit>
 8009d8e:	4b2e      	ldr	r3, [pc, #184]	; (8009e48 <__swsetup_r+0xd0>)
 8009d90:	429c      	cmp	r4, r3
 8009d92:	d10f      	bne.n	8009db4 <__swsetup_r+0x3c>
 8009d94:	686c      	ldr	r4, [r5, #4]
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d9c:	0719      	lsls	r1, r3, #28
 8009d9e:	d42c      	bmi.n	8009dfa <__swsetup_r+0x82>
 8009da0:	06dd      	lsls	r5, r3, #27
 8009da2:	d411      	bmi.n	8009dc8 <__swsetup_r+0x50>
 8009da4:	2309      	movs	r3, #9
 8009da6:	6033      	str	r3, [r6, #0]
 8009da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	e03e      	b.n	8009e32 <__swsetup_r+0xba>
 8009db4:	4b25      	ldr	r3, [pc, #148]	; (8009e4c <__swsetup_r+0xd4>)
 8009db6:	429c      	cmp	r4, r3
 8009db8:	d101      	bne.n	8009dbe <__swsetup_r+0x46>
 8009dba:	68ac      	ldr	r4, [r5, #8]
 8009dbc:	e7eb      	b.n	8009d96 <__swsetup_r+0x1e>
 8009dbe:	4b24      	ldr	r3, [pc, #144]	; (8009e50 <__swsetup_r+0xd8>)
 8009dc0:	429c      	cmp	r4, r3
 8009dc2:	bf08      	it	eq
 8009dc4:	68ec      	ldreq	r4, [r5, #12]
 8009dc6:	e7e6      	b.n	8009d96 <__swsetup_r+0x1e>
 8009dc8:	0758      	lsls	r0, r3, #29
 8009dca:	d512      	bpl.n	8009df2 <__swsetup_r+0x7a>
 8009dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dce:	b141      	cbz	r1, 8009de2 <__swsetup_r+0x6a>
 8009dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd4:	4299      	cmp	r1, r3
 8009dd6:	d002      	beq.n	8009dde <__swsetup_r+0x66>
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff fc0b 	bl	80095f4 <_free_r>
 8009dde:	2300      	movs	r3, #0
 8009de0:	6363      	str	r3, [r4, #52]	; 0x34
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	2300      	movs	r3, #0
 8009dec:	6063      	str	r3, [r4, #4]
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f043 0308 	orr.w	r3, r3, #8
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	6923      	ldr	r3, [r4, #16]
 8009dfc:	b94b      	cbnz	r3, 8009e12 <__swsetup_r+0x9a>
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e08:	d003      	beq.n	8009e12 <__swsetup_r+0x9a>
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 fa07 	bl	800a220 <__smakebuf_r>
 8009e12:	89a0      	ldrh	r0, [r4, #12]
 8009e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e18:	f010 0301 	ands.w	r3, r0, #1
 8009e1c:	d00a      	beq.n	8009e34 <__swsetup_r+0xbc>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60a3      	str	r3, [r4, #8]
 8009e22:	6963      	ldr	r3, [r4, #20]
 8009e24:	425b      	negs	r3, r3
 8009e26:	61a3      	str	r3, [r4, #24]
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	b943      	cbnz	r3, 8009e3e <__swsetup_r+0xc6>
 8009e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e30:	d1ba      	bne.n	8009da8 <__swsetup_r+0x30>
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	0781      	lsls	r1, r0, #30
 8009e36:	bf58      	it	pl
 8009e38:	6963      	ldrpl	r3, [r4, #20]
 8009e3a:	60a3      	str	r3, [r4, #8]
 8009e3c:	e7f4      	b.n	8009e28 <__swsetup_r+0xb0>
 8009e3e:	2000      	movs	r0, #0
 8009e40:	e7f7      	b.n	8009e32 <__swsetup_r+0xba>
 8009e42:	bf00      	nop
 8009e44:	2000000c 	.word	0x2000000c
 8009e48:	0800ad78 	.word	0x0800ad78
 8009e4c:	0800ad98 	.word	0x0800ad98
 8009e50:	0800ad58 	.word	0x0800ad58

08009e54 <abort>:
 8009e54:	b508      	push	{r3, lr}
 8009e56:	2006      	movs	r0, #6
 8009e58:	f000 faa8 	bl	800a3ac <raise>
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	f7f8 f96b 	bl	8002138 <_exit>
	...

08009e64 <__sflush_r>:
 8009e64:	898a      	ldrh	r2, [r1, #12]
 8009e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	0710      	lsls	r0, r2, #28
 8009e6e:	460c      	mov	r4, r1
 8009e70:	d458      	bmi.n	8009f24 <__sflush_r+0xc0>
 8009e72:	684b      	ldr	r3, [r1, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dc05      	bgt.n	8009e84 <__sflush_r+0x20>
 8009e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dc02      	bgt.n	8009e84 <__sflush_r+0x20>
 8009e7e:	2000      	movs	r0, #0
 8009e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e86:	2e00      	cmp	r6, #0
 8009e88:	d0f9      	beq.n	8009e7e <__sflush_r+0x1a>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e90:	682f      	ldr	r7, [r5, #0]
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	d032      	beq.n	8009efc <__sflush_r+0x98>
 8009e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	075a      	lsls	r2, r3, #29
 8009e9c:	d505      	bpl.n	8009eaa <__sflush_r+0x46>
 8009e9e:	6863      	ldr	r3, [r4, #4]
 8009ea0:	1ac0      	subs	r0, r0, r3
 8009ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ea4:	b10b      	cbz	r3, 8009eaa <__sflush_r+0x46>
 8009ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ea8:	1ac0      	subs	r0, r0, r3
 8009eaa:	2300      	movs	r3, #0
 8009eac:	4602      	mov	r2, r0
 8009eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eb0:	6a21      	ldr	r1, [r4, #32]
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	47b0      	blx	r6
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	d106      	bne.n	8009eca <__sflush_r+0x66>
 8009ebc:	6829      	ldr	r1, [r5, #0]
 8009ebe:	291d      	cmp	r1, #29
 8009ec0:	d82c      	bhi.n	8009f1c <__sflush_r+0xb8>
 8009ec2:	4a2a      	ldr	r2, [pc, #168]	; (8009f6c <__sflush_r+0x108>)
 8009ec4:	40ca      	lsrs	r2, r1
 8009ec6:	07d6      	lsls	r6, r2, #31
 8009ec8:	d528      	bpl.n	8009f1c <__sflush_r+0xb8>
 8009eca:	2200      	movs	r2, #0
 8009ecc:	6062      	str	r2, [r4, #4]
 8009ece:	04d9      	lsls	r1, r3, #19
 8009ed0:	6922      	ldr	r2, [r4, #16]
 8009ed2:	6022      	str	r2, [r4, #0]
 8009ed4:	d504      	bpl.n	8009ee0 <__sflush_r+0x7c>
 8009ed6:	1c42      	adds	r2, r0, #1
 8009ed8:	d101      	bne.n	8009ede <__sflush_r+0x7a>
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	b903      	cbnz	r3, 8009ee0 <__sflush_r+0x7c>
 8009ede:	6560      	str	r0, [r4, #84]	; 0x54
 8009ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ee2:	602f      	str	r7, [r5, #0]
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	d0ca      	beq.n	8009e7e <__sflush_r+0x1a>
 8009ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009eec:	4299      	cmp	r1, r3
 8009eee:	d002      	beq.n	8009ef6 <__sflush_r+0x92>
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f7ff fb7f 	bl	80095f4 <_free_r>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8009efa:	e7c1      	b.n	8009e80 <__sflush_r+0x1c>
 8009efc:	6a21      	ldr	r1, [r4, #32]
 8009efe:	2301      	movs	r3, #1
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b0      	blx	r6
 8009f04:	1c41      	adds	r1, r0, #1
 8009f06:	d1c7      	bne.n	8009e98 <__sflush_r+0x34>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0c4      	beq.n	8009e98 <__sflush_r+0x34>
 8009f0e:	2b1d      	cmp	r3, #29
 8009f10:	d001      	beq.n	8009f16 <__sflush_r+0xb2>
 8009f12:	2b16      	cmp	r3, #22
 8009f14:	d101      	bne.n	8009f1a <__sflush_r+0xb6>
 8009f16:	602f      	str	r7, [r5, #0]
 8009f18:	e7b1      	b.n	8009e7e <__sflush_r+0x1a>
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	e7ad      	b.n	8009e80 <__sflush_r+0x1c>
 8009f24:	690f      	ldr	r7, [r1, #16]
 8009f26:	2f00      	cmp	r7, #0
 8009f28:	d0a9      	beq.n	8009e7e <__sflush_r+0x1a>
 8009f2a:	0793      	lsls	r3, r2, #30
 8009f2c:	680e      	ldr	r6, [r1, #0]
 8009f2e:	bf08      	it	eq
 8009f30:	694b      	ldreq	r3, [r1, #20]
 8009f32:	600f      	str	r7, [r1, #0]
 8009f34:	bf18      	it	ne
 8009f36:	2300      	movne	r3, #0
 8009f38:	eba6 0807 	sub.w	r8, r6, r7
 8009f3c:	608b      	str	r3, [r1, #8]
 8009f3e:	f1b8 0f00 	cmp.w	r8, #0
 8009f42:	dd9c      	ble.n	8009e7e <__sflush_r+0x1a>
 8009f44:	6a21      	ldr	r1, [r4, #32]
 8009f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f48:	4643      	mov	r3, r8
 8009f4a:	463a      	mov	r2, r7
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b0      	blx	r6
 8009f50:	2800      	cmp	r0, #0
 8009f52:	dc06      	bgt.n	8009f62 <__sflush_r+0xfe>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	e78e      	b.n	8009e80 <__sflush_r+0x1c>
 8009f62:	4407      	add	r7, r0
 8009f64:	eba8 0800 	sub.w	r8, r8, r0
 8009f68:	e7e9      	b.n	8009f3e <__sflush_r+0xda>
 8009f6a:	bf00      	nop
 8009f6c:	20400001 	.word	0x20400001

08009f70 <_fflush_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	690b      	ldr	r3, [r1, #16]
 8009f74:	4605      	mov	r5, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	b913      	cbnz	r3, 8009f80 <_fflush_r+0x10>
 8009f7a:	2500      	movs	r5, #0
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	b118      	cbz	r0, 8009f8a <_fflush_r+0x1a>
 8009f82:	6983      	ldr	r3, [r0, #24]
 8009f84:	b90b      	cbnz	r3, 8009f8a <_fflush_r+0x1a>
 8009f86:	f000 f887 	bl	800a098 <__sinit>
 8009f8a:	4b14      	ldr	r3, [pc, #80]	; (8009fdc <_fflush_r+0x6c>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	d11b      	bne.n	8009fc8 <_fflush_r+0x58>
 8009f90:	686c      	ldr	r4, [r5, #4]
 8009f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0ef      	beq.n	8009f7a <_fflush_r+0xa>
 8009f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f9c:	07d0      	lsls	r0, r2, #31
 8009f9e:	d404      	bmi.n	8009faa <_fflush_r+0x3a>
 8009fa0:	0599      	lsls	r1, r3, #22
 8009fa2:	d402      	bmi.n	8009faa <_fflush_r+0x3a>
 8009fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fa6:	f000 f915 	bl	800a1d4 <__retarget_lock_acquire_recursive>
 8009faa:	4628      	mov	r0, r5
 8009fac:	4621      	mov	r1, r4
 8009fae:	f7ff ff59 	bl	8009e64 <__sflush_r>
 8009fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fb4:	07da      	lsls	r2, r3, #31
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	d4e0      	bmi.n	8009f7c <_fflush_r+0xc>
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	059b      	lsls	r3, r3, #22
 8009fbe:	d4dd      	bmi.n	8009f7c <_fflush_r+0xc>
 8009fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fc2:	f000 f908 	bl	800a1d6 <__retarget_lock_release_recursive>
 8009fc6:	e7d9      	b.n	8009f7c <_fflush_r+0xc>
 8009fc8:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <_fflush_r+0x70>)
 8009fca:	429c      	cmp	r4, r3
 8009fcc:	d101      	bne.n	8009fd2 <_fflush_r+0x62>
 8009fce:	68ac      	ldr	r4, [r5, #8]
 8009fd0:	e7df      	b.n	8009f92 <_fflush_r+0x22>
 8009fd2:	4b04      	ldr	r3, [pc, #16]	; (8009fe4 <_fflush_r+0x74>)
 8009fd4:	429c      	cmp	r4, r3
 8009fd6:	bf08      	it	eq
 8009fd8:	68ec      	ldreq	r4, [r5, #12]
 8009fda:	e7da      	b.n	8009f92 <_fflush_r+0x22>
 8009fdc:	0800ad78 	.word	0x0800ad78
 8009fe0:	0800ad98 	.word	0x0800ad98
 8009fe4:	0800ad58 	.word	0x0800ad58

08009fe8 <std>:
 8009fe8:	2300      	movs	r3, #0
 8009fea:	b510      	push	{r4, lr}
 8009fec:	4604      	mov	r4, r0
 8009fee:	e9c0 3300 	strd	r3, r3, [r0]
 8009ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ff6:	6083      	str	r3, [r0, #8]
 8009ff8:	8181      	strh	r1, [r0, #12]
 8009ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8009ffc:	81c2      	strh	r2, [r0, #14]
 8009ffe:	6183      	str	r3, [r0, #24]
 800a000:	4619      	mov	r1, r3
 800a002:	2208      	movs	r2, #8
 800a004:	305c      	adds	r0, #92	; 0x5c
 800a006:	f7fd fbad 	bl	8007764 <memset>
 800a00a:	4b05      	ldr	r3, [pc, #20]	; (800a020 <std+0x38>)
 800a00c:	6263      	str	r3, [r4, #36]	; 0x24
 800a00e:	4b05      	ldr	r3, [pc, #20]	; (800a024 <std+0x3c>)
 800a010:	62a3      	str	r3, [r4, #40]	; 0x28
 800a012:	4b05      	ldr	r3, [pc, #20]	; (800a028 <std+0x40>)
 800a014:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <std+0x44>)
 800a018:	6224      	str	r4, [r4, #32]
 800a01a:	6323      	str	r3, [r4, #48]	; 0x30
 800a01c:	bd10      	pop	{r4, pc}
 800a01e:	bf00      	nop
 800a020:	0800a3e5 	.word	0x0800a3e5
 800a024:	0800a407 	.word	0x0800a407
 800a028:	0800a43f 	.word	0x0800a43f
 800a02c:	0800a463 	.word	0x0800a463

0800a030 <_cleanup_r>:
 800a030:	4901      	ldr	r1, [pc, #4]	; (800a038 <_cleanup_r+0x8>)
 800a032:	f000 b8af 	b.w	800a194 <_fwalk_reent>
 800a036:	bf00      	nop
 800a038:	08009f71 	.word	0x08009f71

0800a03c <__sfmoreglue>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	1e4a      	subs	r2, r1, #1
 800a040:	2568      	movs	r5, #104	; 0x68
 800a042:	4355      	muls	r5, r2
 800a044:	460e      	mov	r6, r1
 800a046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a04a:	f7ff fb23 	bl	8009694 <_malloc_r>
 800a04e:	4604      	mov	r4, r0
 800a050:	b140      	cbz	r0, 800a064 <__sfmoreglue+0x28>
 800a052:	2100      	movs	r1, #0
 800a054:	e9c0 1600 	strd	r1, r6, [r0]
 800a058:	300c      	adds	r0, #12
 800a05a:	60a0      	str	r0, [r4, #8]
 800a05c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a060:	f7fd fb80 	bl	8007764 <memset>
 800a064:	4620      	mov	r0, r4
 800a066:	bd70      	pop	{r4, r5, r6, pc}

0800a068 <__sfp_lock_acquire>:
 800a068:	4801      	ldr	r0, [pc, #4]	; (800a070 <__sfp_lock_acquire+0x8>)
 800a06a:	f000 b8b3 	b.w	800a1d4 <__retarget_lock_acquire_recursive>
 800a06e:	bf00      	nop
 800a070:	200004c8 	.word	0x200004c8

0800a074 <__sfp_lock_release>:
 800a074:	4801      	ldr	r0, [pc, #4]	; (800a07c <__sfp_lock_release+0x8>)
 800a076:	f000 b8ae 	b.w	800a1d6 <__retarget_lock_release_recursive>
 800a07a:	bf00      	nop
 800a07c:	200004c8 	.word	0x200004c8

0800a080 <__sinit_lock_acquire>:
 800a080:	4801      	ldr	r0, [pc, #4]	; (800a088 <__sinit_lock_acquire+0x8>)
 800a082:	f000 b8a7 	b.w	800a1d4 <__retarget_lock_acquire_recursive>
 800a086:	bf00      	nop
 800a088:	200004c3 	.word	0x200004c3

0800a08c <__sinit_lock_release>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__sinit_lock_release+0x8>)
 800a08e:	f000 b8a2 	b.w	800a1d6 <__retarget_lock_release_recursive>
 800a092:	bf00      	nop
 800a094:	200004c3 	.word	0x200004c3

0800a098 <__sinit>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	4604      	mov	r4, r0
 800a09c:	f7ff fff0 	bl	800a080 <__sinit_lock_acquire>
 800a0a0:	69a3      	ldr	r3, [r4, #24]
 800a0a2:	b11b      	cbz	r3, 800a0ac <__sinit+0x14>
 800a0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a8:	f7ff bff0 	b.w	800a08c <__sinit_lock_release>
 800a0ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0b0:	6523      	str	r3, [r4, #80]	; 0x50
 800a0b2:	4b13      	ldr	r3, [pc, #76]	; (800a100 <__sinit+0x68>)
 800a0b4:	4a13      	ldr	r2, [pc, #76]	; (800a104 <__sinit+0x6c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	bf04      	itt	eq
 800a0be:	2301      	moveq	r3, #1
 800a0c0:	61a3      	streq	r3, [r4, #24]
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 f820 	bl	800a108 <__sfp>
 800a0c8:	6060      	str	r0, [r4, #4]
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f000 f81c 	bl	800a108 <__sfp>
 800a0d0:	60a0      	str	r0, [r4, #8]
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 f818 	bl	800a108 <__sfp>
 800a0d8:	2200      	movs	r2, #0
 800a0da:	60e0      	str	r0, [r4, #12]
 800a0dc:	2104      	movs	r1, #4
 800a0de:	6860      	ldr	r0, [r4, #4]
 800a0e0:	f7ff ff82 	bl	8009fe8 <std>
 800a0e4:	68a0      	ldr	r0, [r4, #8]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	2109      	movs	r1, #9
 800a0ea:	f7ff ff7d 	bl	8009fe8 <std>
 800a0ee:	68e0      	ldr	r0, [r4, #12]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	2112      	movs	r1, #18
 800a0f4:	f7ff ff78 	bl	8009fe8 <std>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	61a3      	str	r3, [r4, #24]
 800a0fc:	e7d2      	b.n	800a0a4 <__sinit+0xc>
 800a0fe:	bf00      	nop
 800a100:	0800aa7c 	.word	0x0800aa7c
 800a104:	0800a031 	.word	0x0800a031

0800a108 <__sfp>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	4607      	mov	r7, r0
 800a10c:	f7ff ffac 	bl	800a068 <__sfp_lock_acquire>
 800a110:	4b1e      	ldr	r3, [pc, #120]	; (800a18c <__sfp+0x84>)
 800a112:	681e      	ldr	r6, [r3, #0]
 800a114:	69b3      	ldr	r3, [r6, #24]
 800a116:	b913      	cbnz	r3, 800a11e <__sfp+0x16>
 800a118:	4630      	mov	r0, r6
 800a11a:	f7ff ffbd 	bl	800a098 <__sinit>
 800a11e:	3648      	adds	r6, #72	; 0x48
 800a120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a124:	3b01      	subs	r3, #1
 800a126:	d503      	bpl.n	800a130 <__sfp+0x28>
 800a128:	6833      	ldr	r3, [r6, #0]
 800a12a:	b30b      	cbz	r3, 800a170 <__sfp+0x68>
 800a12c:	6836      	ldr	r6, [r6, #0]
 800a12e:	e7f7      	b.n	800a120 <__sfp+0x18>
 800a130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a134:	b9d5      	cbnz	r5, 800a16c <__sfp+0x64>
 800a136:	4b16      	ldr	r3, [pc, #88]	; (800a190 <__sfp+0x88>)
 800a138:	60e3      	str	r3, [r4, #12]
 800a13a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a13e:	6665      	str	r5, [r4, #100]	; 0x64
 800a140:	f000 f847 	bl	800a1d2 <__retarget_lock_init_recursive>
 800a144:	f7ff ff96 	bl	800a074 <__sfp_lock_release>
 800a148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a14c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a150:	6025      	str	r5, [r4, #0]
 800a152:	61a5      	str	r5, [r4, #24]
 800a154:	2208      	movs	r2, #8
 800a156:	4629      	mov	r1, r5
 800a158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a15c:	f7fd fb02 	bl	8007764 <memset>
 800a160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a168:	4620      	mov	r0, r4
 800a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16c:	3468      	adds	r4, #104	; 0x68
 800a16e:	e7d9      	b.n	800a124 <__sfp+0x1c>
 800a170:	2104      	movs	r1, #4
 800a172:	4638      	mov	r0, r7
 800a174:	f7ff ff62 	bl	800a03c <__sfmoreglue>
 800a178:	4604      	mov	r4, r0
 800a17a:	6030      	str	r0, [r6, #0]
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d1d5      	bne.n	800a12c <__sfp+0x24>
 800a180:	f7ff ff78 	bl	800a074 <__sfp_lock_release>
 800a184:	230c      	movs	r3, #12
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	e7ee      	b.n	800a168 <__sfp+0x60>
 800a18a:	bf00      	nop
 800a18c:	0800aa7c 	.word	0x0800aa7c
 800a190:	ffff0001 	.word	0xffff0001

0800a194 <_fwalk_reent>:
 800a194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a198:	4606      	mov	r6, r0
 800a19a:	4688      	mov	r8, r1
 800a19c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1a0:	2700      	movs	r7, #0
 800a1a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1a6:	f1b9 0901 	subs.w	r9, r9, #1
 800a1aa:	d505      	bpl.n	800a1b8 <_fwalk_reent+0x24>
 800a1ac:	6824      	ldr	r4, [r4, #0]
 800a1ae:	2c00      	cmp	r4, #0
 800a1b0:	d1f7      	bne.n	800a1a2 <_fwalk_reent+0xe>
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b8:	89ab      	ldrh	r3, [r5, #12]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d907      	bls.n	800a1ce <_fwalk_reent+0x3a>
 800a1be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	d003      	beq.n	800a1ce <_fwalk_reent+0x3a>
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	47c0      	blx	r8
 800a1cc:	4307      	orrs	r7, r0
 800a1ce:	3568      	adds	r5, #104	; 0x68
 800a1d0:	e7e9      	b.n	800a1a6 <_fwalk_reent+0x12>

0800a1d2 <__retarget_lock_init_recursive>:
 800a1d2:	4770      	bx	lr

0800a1d4 <__retarget_lock_acquire_recursive>:
 800a1d4:	4770      	bx	lr

0800a1d6 <__retarget_lock_release_recursive>:
 800a1d6:	4770      	bx	lr

0800a1d8 <__swhatbuf_r>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	460e      	mov	r6, r1
 800a1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e0:	2900      	cmp	r1, #0
 800a1e2:	b096      	sub	sp, #88	; 0x58
 800a1e4:	4614      	mov	r4, r2
 800a1e6:	461d      	mov	r5, r3
 800a1e8:	da07      	bge.n	800a1fa <__swhatbuf_r+0x22>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	602b      	str	r3, [r5, #0]
 800a1ee:	89b3      	ldrh	r3, [r6, #12]
 800a1f0:	061a      	lsls	r2, r3, #24
 800a1f2:	d410      	bmi.n	800a216 <__swhatbuf_r+0x3e>
 800a1f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1f8:	e00e      	b.n	800a218 <__swhatbuf_r+0x40>
 800a1fa:	466a      	mov	r2, sp
 800a1fc:	f000 f964 	bl	800a4c8 <_fstat_r>
 800a200:	2800      	cmp	r0, #0
 800a202:	dbf2      	blt.n	800a1ea <__swhatbuf_r+0x12>
 800a204:	9a01      	ldr	r2, [sp, #4]
 800a206:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a20a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a20e:	425a      	negs	r2, r3
 800a210:	415a      	adcs	r2, r3
 800a212:	602a      	str	r2, [r5, #0]
 800a214:	e7ee      	b.n	800a1f4 <__swhatbuf_r+0x1c>
 800a216:	2340      	movs	r3, #64	; 0x40
 800a218:	2000      	movs	r0, #0
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	b016      	add	sp, #88	; 0x58
 800a21e:	bd70      	pop	{r4, r5, r6, pc}

0800a220 <__smakebuf_r>:
 800a220:	898b      	ldrh	r3, [r1, #12]
 800a222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a224:	079d      	lsls	r5, r3, #30
 800a226:	4606      	mov	r6, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	d507      	bpl.n	800a23c <__smakebuf_r+0x1c>
 800a22c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	6123      	str	r3, [r4, #16]
 800a234:	2301      	movs	r3, #1
 800a236:	6163      	str	r3, [r4, #20]
 800a238:	b002      	add	sp, #8
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	ab01      	add	r3, sp, #4
 800a23e:	466a      	mov	r2, sp
 800a240:	f7ff ffca 	bl	800a1d8 <__swhatbuf_r>
 800a244:	9900      	ldr	r1, [sp, #0]
 800a246:	4605      	mov	r5, r0
 800a248:	4630      	mov	r0, r6
 800a24a:	f7ff fa23 	bl	8009694 <_malloc_r>
 800a24e:	b948      	cbnz	r0, 800a264 <__smakebuf_r+0x44>
 800a250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a254:	059a      	lsls	r2, r3, #22
 800a256:	d4ef      	bmi.n	800a238 <__smakebuf_r+0x18>
 800a258:	f023 0303 	bic.w	r3, r3, #3
 800a25c:	f043 0302 	orr.w	r3, r3, #2
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	e7e3      	b.n	800a22c <__smakebuf_r+0xc>
 800a264:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <__smakebuf_r+0x7c>)
 800a266:	62b3      	str	r3, [r6, #40]	; 0x28
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	6020      	str	r0, [r4, #0]
 800a26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	9b00      	ldr	r3, [sp, #0]
 800a274:	6163      	str	r3, [r4, #20]
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	6120      	str	r0, [r4, #16]
 800a27a:	b15b      	cbz	r3, 800a294 <__smakebuf_r+0x74>
 800a27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a280:	4630      	mov	r0, r6
 800a282:	f000 f933 	bl	800a4ec <_isatty_r>
 800a286:	b128      	cbz	r0, 800a294 <__smakebuf_r+0x74>
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	f023 0303 	bic.w	r3, r3, #3
 800a28e:	f043 0301 	orr.w	r3, r3, #1
 800a292:	81a3      	strh	r3, [r4, #12]
 800a294:	89a0      	ldrh	r0, [r4, #12]
 800a296:	4305      	orrs	r5, r0
 800a298:	81a5      	strh	r5, [r4, #12]
 800a29a:	e7cd      	b.n	800a238 <__smakebuf_r+0x18>
 800a29c:	0800a031 	.word	0x0800a031

0800a2a0 <__ascii_mbtowc>:
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	b901      	cbnz	r1, 800a2a6 <__ascii_mbtowc+0x6>
 800a2a4:	a901      	add	r1, sp, #4
 800a2a6:	b142      	cbz	r2, 800a2ba <__ascii_mbtowc+0x1a>
 800a2a8:	b14b      	cbz	r3, 800a2be <__ascii_mbtowc+0x1e>
 800a2aa:	7813      	ldrb	r3, [r2, #0]
 800a2ac:	600b      	str	r3, [r1, #0]
 800a2ae:	7812      	ldrb	r2, [r2, #0]
 800a2b0:	1e10      	subs	r0, r2, #0
 800a2b2:	bf18      	it	ne
 800a2b4:	2001      	movne	r0, #1
 800a2b6:	b002      	add	sp, #8
 800a2b8:	4770      	bx	lr
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	e7fb      	b.n	800a2b6 <__ascii_mbtowc+0x16>
 800a2be:	f06f 0001 	mvn.w	r0, #1
 800a2c2:	e7f8      	b.n	800a2b6 <__ascii_mbtowc+0x16>

0800a2c4 <memmove>:
 800a2c4:	4288      	cmp	r0, r1
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	eb01 0402 	add.w	r4, r1, r2
 800a2cc:	d902      	bls.n	800a2d4 <memmove+0x10>
 800a2ce:	4284      	cmp	r4, r0
 800a2d0:	4623      	mov	r3, r4
 800a2d2:	d807      	bhi.n	800a2e4 <memmove+0x20>
 800a2d4:	1e43      	subs	r3, r0, #1
 800a2d6:	42a1      	cmp	r1, r4
 800a2d8:	d008      	beq.n	800a2ec <memmove+0x28>
 800a2da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2e2:	e7f8      	b.n	800a2d6 <memmove+0x12>
 800a2e4:	4402      	add	r2, r0
 800a2e6:	4601      	mov	r1, r0
 800a2e8:	428a      	cmp	r2, r1
 800a2ea:	d100      	bne.n	800a2ee <memmove+0x2a>
 800a2ec:	bd10      	pop	{r4, pc}
 800a2ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2f6:	e7f7      	b.n	800a2e8 <memmove+0x24>

0800a2f8 <__malloc_lock>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	; (800a300 <__malloc_lock+0x8>)
 800a2fa:	f7ff bf6b 	b.w	800a1d4 <__retarget_lock_acquire_recursive>
 800a2fe:	bf00      	nop
 800a300:	200004c4 	.word	0x200004c4

0800a304 <__malloc_unlock>:
 800a304:	4801      	ldr	r0, [pc, #4]	; (800a30c <__malloc_unlock+0x8>)
 800a306:	f7ff bf66 	b.w	800a1d6 <__retarget_lock_release_recursive>
 800a30a:	bf00      	nop
 800a30c:	200004c4 	.word	0x200004c4

0800a310 <_realloc_r>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	4607      	mov	r7, r0
 800a314:	4614      	mov	r4, r2
 800a316:	460e      	mov	r6, r1
 800a318:	b921      	cbnz	r1, 800a324 <_realloc_r+0x14>
 800a31a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a31e:	4611      	mov	r1, r2
 800a320:	f7ff b9b8 	b.w	8009694 <_malloc_r>
 800a324:	b922      	cbnz	r2, 800a330 <_realloc_r+0x20>
 800a326:	f7ff f965 	bl	80095f4 <_free_r>
 800a32a:	4625      	mov	r5, r4
 800a32c:	4628      	mov	r0, r5
 800a32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a330:	f000 f8fe 	bl	800a530 <_malloc_usable_size_r>
 800a334:	42a0      	cmp	r0, r4
 800a336:	d20f      	bcs.n	800a358 <_realloc_r+0x48>
 800a338:	4621      	mov	r1, r4
 800a33a:	4638      	mov	r0, r7
 800a33c:	f7ff f9aa 	bl	8009694 <_malloc_r>
 800a340:	4605      	mov	r5, r0
 800a342:	2800      	cmp	r0, #0
 800a344:	d0f2      	beq.n	800a32c <_realloc_r+0x1c>
 800a346:	4631      	mov	r1, r6
 800a348:	4622      	mov	r2, r4
 800a34a:	f7fe fdb7 	bl	8008ebc <memcpy>
 800a34e:	4631      	mov	r1, r6
 800a350:	4638      	mov	r0, r7
 800a352:	f7ff f94f 	bl	80095f4 <_free_r>
 800a356:	e7e9      	b.n	800a32c <_realloc_r+0x1c>
 800a358:	4635      	mov	r5, r6
 800a35a:	e7e7      	b.n	800a32c <_realloc_r+0x1c>

0800a35c <_raise_r>:
 800a35c:	291f      	cmp	r1, #31
 800a35e:	b538      	push	{r3, r4, r5, lr}
 800a360:	4604      	mov	r4, r0
 800a362:	460d      	mov	r5, r1
 800a364:	d904      	bls.n	800a370 <_raise_r+0x14>
 800a366:	2316      	movs	r3, #22
 800a368:	6003      	str	r3, [r0, #0]
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a372:	b112      	cbz	r2, 800a37a <_raise_r+0x1e>
 800a374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a378:	b94b      	cbnz	r3, 800a38e <_raise_r+0x32>
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 f830 	bl	800a3e0 <_getpid_r>
 800a380:	462a      	mov	r2, r5
 800a382:	4601      	mov	r1, r0
 800a384:	4620      	mov	r0, r4
 800a386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a38a:	f000 b817 	b.w	800a3bc <_kill_r>
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d00a      	beq.n	800a3a8 <_raise_r+0x4c>
 800a392:	1c59      	adds	r1, r3, #1
 800a394:	d103      	bne.n	800a39e <_raise_r+0x42>
 800a396:	2316      	movs	r3, #22
 800a398:	6003      	str	r3, [r0, #0]
 800a39a:	2001      	movs	r0, #1
 800a39c:	e7e7      	b.n	800a36e <_raise_r+0x12>
 800a39e:	2400      	movs	r4, #0
 800a3a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	4798      	blx	r3
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	e7e0      	b.n	800a36e <_raise_r+0x12>

0800a3ac <raise>:
 800a3ac:	4b02      	ldr	r3, [pc, #8]	; (800a3b8 <raise+0xc>)
 800a3ae:	4601      	mov	r1, r0
 800a3b0:	6818      	ldr	r0, [r3, #0]
 800a3b2:	f7ff bfd3 	b.w	800a35c <_raise_r>
 800a3b6:	bf00      	nop
 800a3b8:	2000000c 	.word	0x2000000c

0800a3bc <_kill_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d07      	ldr	r5, [pc, #28]	; (800a3dc <_kill_r+0x20>)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	f7f7 fea5 	bl	8002118 <_kill>
 800a3ce:	1c43      	adds	r3, r0, #1
 800a3d0:	d102      	bne.n	800a3d8 <_kill_r+0x1c>
 800a3d2:	682b      	ldr	r3, [r5, #0]
 800a3d4:	b103      	cbz	r3, 800a3d8 <_kill_r+0x1c>
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	bd38      	pop	{r3, r4, r5, pc}
 800a3da:	bf00      	nop
 800a3dc:	200004cc 	.word	0x200004cc

0800a3e0 <_getpid_r>:
 800a3e0:	f7f7 be92 	b.w	8002108 <_getpid>

0800a3e4 <__sread>:
 800a3e4:	b510      	push	{r4, lr}
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ec:	f000 f8a8 	bl	800a540 <_read_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	bfab      	itete	ge
 800a3f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3f8:	181b      	addge	r3, r3, r0
 800a3fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3fe:	bfac      	ite	ge
 800a400:	6563      	strge	r3, [r4, #84]	; 0x54
 800a402:	81a3      	strhlt	r3, [r4, #12]
 800a404:	bd10      	pop	{r4, pc}

0800a406 <__swrite>:
 800a406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40a:	461f      	mov	r7, r3
 800a40c:	898b      	ldrh	r3, [r1, #12]
 800a40e:	05db      	lsls	r3, r3, #23
 800a410:	4605      	mov	r5, r0
 800a412:	460c      	mov	r4, r1
 800a414:	4616      	mov	r6, r2
 800a416:	d505      	bpl.n	800a424 <__swrite+0x1e>
 800a418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41c:	2302      	movs	r3, #2
 800a41e:	2200      	movs	r2, #0
 800a420:	f000 f874 	bl	800a50c <_lseek_r>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a42a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	4632      	mov	r2, r6
 800a432:	463b      	mov	r3, r7
 800a434:	4628      	mov	r0, r5
 800a436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a43a:	f000 b823 	b.w	800a484 <_write_r>

0800a43e <__sseek>:
 800a43e:	b510      	push	{r4, lr}
 800a440:	460c      	mov	r4, r1
 800a442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a446:	f000 f861 	bl	800a50c <_lseek_r>
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	bf15      	itete	ne
 800a450:	6560      	strne	r0, [r4, #84]	; 0x54
 800a452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a45a:	81a3      	strheq	r3, [r4, #12]
 800a45c:	bf18      	it	ne
 800a45e:	81a3      	strhne	r3, [r4, #12]
 800a460:	bd10      	pop	{r4, pc}

0800a462 <__sclose>:
 800a462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a466:	f000 b81f 	b.w	800a4a8 <_close_r>

0800a46a <__ascii_wctomb>:
 800a46a:	b149      	cbz	r1, 800a480 <__ascii_wctomb+0x16>
 800a46c:	2aff      	cmp	r2, #255	; 0xff
 800a46e:	bf85      	ittet	hi
 800a470:	238a      	movhi	r3, #138	; 0x8a
 800a472:	6003      	strhi	r3, [r0, #0]
 800a474:	700a      	strbls	r2, [r1, #0]
 800a476:	f04f 30ff 	movhi.w	r0, #4294967295
 800a47a:	bf98      	it	ls
 800a47c:	2001      	movls	r0, #1
 800a47e:	4770      	bx	lr
 800a480:	4608      	mov	r0, r1
 800a482:	4770      	bx	lr

0800a484 <_write_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4d07      	ldr	r5, [pc, #28]	; (800a4a4 <_write_r+0x20>)
 800a488:	4604      	mov	r4, r0
 800a48a:	4608      	mov	r0, r1
 800a48c:	4611      	mov	r1, r2
 800a48e:	2200      	movs	r2, #0
 800a490:	602a      	str	r2, [r5, #0]
 800a492:	461a      	mov	r2, r3
 800a494:	f7f7 fe77 	bl	8002186 <_write>
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	d102      	bne.n	800a4a2 <_write_r+0x1e>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	b103      	cbz	r3, 800a4a2 <_write_r+0x1e>
 800a4a0:	6023      	str	r3, [r4, #0]
 800a4a2:	bd38      	pop	{r3, r4, r5, pc}
 800a4a4:	200004cc 	.word	0x200004cc

0800a4a8 <_close_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d06      	ldr	r5, [pc, #24]	; (800a4c4 <_close_r+0x1c>)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	f7f7 fe83 	bl	80021be <_close>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_close_r+0x1a>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_close_r+0x1a>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	200004cc 	.word	0x200004cc

0800a4c8 <_fstat_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d07      	ldr	r5, [pc, #28]	; (800a4e8 <_fstat_r+0x20>)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	602b      	str	r3, [r5, #0]
 800a4d6:	f7f7 fe7e 	bl	80021d6 <_fstat>
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	d102      	bne.n	800a4e4 <_fstat_r+0x1c>
 800a4de:	682b      	ldr	r3, [r5, #0]
 800a4e0:	b103      	cbz	r3, 800a4e4 <_fstat_r+0x1c>
 800a4e2:	6023      	str	r3, [r4, #0]
 800a4e4:	bd38      	pop	{r3, r4, r5, pc}
 800a4e6:	bf00      	nop
 800a4e8:	200004cc 	.word	0x200004cc

0800a4ec <_isatty_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d06      	ldr	r5, [pc, #24]	; (800a508 <_isatty_r+0x1c>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	602b      	str	r3, [r5, #0]
 800a4f8:	f7f7 fe7d 	bl	80021f6 <_isatty>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_isatty_r+0x1a>
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	b103      	cbz	r3, 800a506 <_isatty_r+0x1a>
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	200004cc 	.word	0x200004cc

0800a50c <_lseek_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d07      	ldr	r5, [pc, #28]	; (800a52c <_lseek_r+0x20>)
 800a510:	4604      	mov	r4, r0
 800a512:	4608      	mov	r0, r1
 800a514:	4611      	mov	r1, r2
 800a516:	2200      	movs	r2, #0
 800a518:	602a      	str	r2, [r5, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	f7f7 fe76 	bl	800220c <_lseek>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_lseek_r+0x1e>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b103      	cbz	r3, 800a52a <_lseek_r+0x1e>
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	200004cc 	.word	0x200004cc

0800a530 <_malloc_usable_size_r>:
 800a530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a534:	1f18      	subs	r0, r3, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	bfbc      	itt	lt
 800a53a:	580b      	ldrlt	r3, [r1, r0]
 800a53c:	18c0      	addlt	r0, r0, r3
 800a53e:	4770      	bx	lr

0800a540 <_read_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	; (800a560 <_read_r+0x20>)
 800a544:	4604      	mov	r4, r0
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	602a      	str	r2, [r5, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	f7f7 fdfc 	bl	800214c <_read>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_read_r+0x1e>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_read_r+0x1e>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	200004cc 	.word	0x200004cc

0800a564 <_init>:
 800a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a566:	bf00      	nop
 800a568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56a:	bc08      	pop	{r3}
 800a56c:	469e      	mov	lr, r3
 800a56e:	4770      	bx	lr

0800a570 <_fini>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	bf00      	nop
 800a574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a576:	bc08      	pop	{r3}
 800a578:	469e      	mov	lr, r3
 800a57a:	4770      	bx	lr
