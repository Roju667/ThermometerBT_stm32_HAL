
jdy_09_bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005548  08005548  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005550  08005550  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000070  080055c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080055c8  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e47e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246a  00000000  00000000  0002e51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  00030988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  00031280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017368  00000000  00000000  00031a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2b8  00000000  00000000  00048de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e97  00000000  00000000  000550a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbf37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb8  00000000  00000000  000dbf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fc8 	.word	0x08004fc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004fc8 	.word	0x08004fc8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <JDY09_DisplayTerminal>:
 *
 * @return - void
 */

static void JDY09_DisplayTerminal(char *Msg)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint8_t Lenght = strlen(Msg);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff fe1f 	bl	80001f4 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Lenght, JDY09_UART_TIMEOUET);
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	b29a      	uxth	r2, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <JDY09_DisplayTerminal+0x2c>)
 80005c6:	f002 fb70 	bl	8002caa <HAL_UART_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000254 	.word	0x20000254

080005d8 <JDY09_SendAndDisplayCmd>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[Command] - predefined command to send
 * @return - void
 */
static void JDY09_SendAndDisplayCmd(JDY09_t *jdy09, uint8_t *Command)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b093      	sub	sp, #76	; 0x4c
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	uint8_t MsgRecieved[JDY09_RECIEVEBUFFERSIZE];

	//display send info on user display terminal
	JDY09_DisplayTerminal("Sending: ");
 80005e2:	4817      	ldr	r0, [pc, #92]	; (8000640 <JDY09_SendAndDisplayCmd+0x68>)
 80005e4:	f7ff ffe0 	bl	80005a8 <JDY09_DisplayTerminal>
	JDY09_DisplayTerminal((char*) Command);
 80005e8:	6838      	ldr	r0, [r7, #0]
 80005ea:	f7ff ffdd 	bl	80005a8 <JDY09_DisplayTerminal>

	//send data to JDY-09
	HAL_UART_Transmit(jdy09->huart, Command, strlen((char*) Command),
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681c      	ldr	r4, [r3, #0]
 80005f2:	6838      	ldr	r0, [r7, #0]
 80005f4:	f7ff fdfe 	bl	80001f4 <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	6839      	ldr	r1, [r7, #0]
 8000602:	4620      	mov	r0, r4
 8000604:	f002 fb51 	bl	8002caa <HAL_UART_Transmit>
	JDY09_UART_TIMEOUET);

	//wait for response line
	while (jdy09->LinesRecieved == 0)
 8000608:	bf00      	nop
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <JDY09_SendAndDisplayCmd+0x32>
	{
	}

	//get message out of ring buffer
	JDY09_CheckPendingMessages(jdy09, MsgRecieved);
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4619      	mov	r1, r3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f8f3 	bl	8000808 <JDY09_CheckPendingMessages>

	//display response
	JDY09_DisplayTerminal("Response: ");
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <JDY09_SendAndDisplayCmd+0x6c>)
 8000624:	f7ff ffc0 	bl	80005a8 <JDY09_DisplayTerminal>
	JDY09_DisplayTerminal((char*) MsgRecieved);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffbb 	bl	80005a8 <JDY09_DisplayTerminal>

	//clear message pending flag
	JDY09_ClearMsgPendingFlag(jdy09);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f8da 	bl	80007ec <JDY09_ClearMsgPendingFlag>
}
 8000638:	bf00      	nop
 800063a:	374c      	adds	r7, #76	; 0x4c
 800063c:	46bd      	mov	sp, r7
 800063e:	bd90      	pop	{r4, r7, pc}
 8000640:	08004fe0 	.word	0x08004fe0
 8000644:	08004fec 	.word	0x08004fec

08000648 <JDY09_Init>:
 *
 * @return - void
 */
void JDY09_Init(JDY09_t *jdy09, UART_HandleTypeDef *huart,
		GPIO_TypeDef *StateGPIOPort, uint16_t StateGPIOPin)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	807b      	strh	r3, [r7, #2]

	// init msg
	JDY09_DisplayTerminal("JDY-09 Initializing... \n\r");
 8000656:	4822      	ldr	r0, [pc, #136]	; (80006e0 <JDY09_Init+0x98>)
 8000658:	f7ff ffa6 	bl	80005a8 <JDY09_DisplayTerminal>

	// reset the ring buffer
	RB_Flush(&(jdy09->RingBuffer));
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3346      	adds	r3, #70	; 0x46
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fc64 	bl	8000f2e <RB_Flush>

	// Assign uart
	jdy09->huart = huart;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	601a      	str	r2, [r3, #0]

	// Assign GPIO for State pin
	jdy09->StateGPIOPort = StateGPIOPort;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	jdy09->StatePinNumber = StateGPIOPin;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	887a      	ldrh	r2, [r7, #2]
 8000678:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
	HAL_UART_Receive_IT(jdy09->huart, &(jdy09->RecieveBufferIT), 1);
#endif

	// if dma mode is used for receive
#if (JDY09_UART_RX_DMA == 1)
	HAL_UARTEx_ReceiveToIdle_DMA(jdy09->huart, jdy09->RecieveBufferDMA,
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3304      	adds	r3, #4
 8000684:	2240      	movs	r2, #64	; 0x40
 8000686:	4619      	mov	r1, r3
 8000688:	f002 fba1 	bl	8002dce <HAL_UARTEx_ReceiveToIdle_DMA>
	JDY09_RECIEVEBUFFERSIZE);
	// to avoid callback from half message this has be disabled
	__HAL_DMA_DISABLE_IT(jdy09->huart->hdmarx, DMA_IT_HT);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f022 0208 	bic.w	r2, r2, #8
 80006a2:	601a      	str	r2, [r3, #0]
#endif

	HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f000 ff39 	bl	800151c <HAL_Delay>

	//during init - disconnect and display basic information
	JDY09_Disconnect(jdy09);
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f000 f87e 	bl	80007ac <JDY09_Disconnect>

	//for some reason this msg will not work in DMA recieve mode
	//solution yet to find
	JDY09_SendCommand(jdy09, JDY09_CMD_GETVERSION);
 80006b0:	2100      	movs	r1, #0
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f000 f816 	bl	80006e4 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETADRESS);
 80006b8:	2102      	movs	r1, #2
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f000 f812 	bl	80006e4 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETBAUDRATE);
 80006c0:	2103      	movs	r1, #3
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f000 f80e 	bl	80006e4 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETNAME);
 80006c8:	2105      	movs	r1, #5
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f000 f80a 	bl	80006e4 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETPASSWORD);
 80006d0:	2104      	movs	r1, #4
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f000 f806 	bl	80006e4 <JDY09_SendCommand>
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	08004ff8 	.word	0x08004ff8

080006e4 <JDY09_SendCommand>:
 * @param[Command] - predefined commands that are in .h file
 *
 * @return - void
 */
void JDY09_SendCommand(JDY09_t *jdy09, JDY09_CMD Command)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
	// check if there is no connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80006fc:	4619      	mov	r1, r3
 80006fe:	4610      	mov	r0, r2
 8000700:	f001 fdc8 	bl	8002294 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d138      	bne.n	800077c <JDY09_SendCommand+0x98>
			== GPIO_PIN_RESET)
	{
		switch (Command)
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	2b06      	cmp	r3, #6
 800070e:	d839      	bhi.n	8000784 <JDY09_SendCommand+0xa0>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <JDY09_SendCommand+0x34>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000735 	.word	0x08000735
 800071c:	0800073f 	.word	0x0800073f
 8000720:	08000749 	.word	0x08000749
 8000724:	08000753 	.word	0x08000753
 8000728:	0800075d 	.word	0x0800075d
 800072c:	08000767 	.word	0x08000767
 8000730:	08000771 	.word	0x08000771
		{
		case JDY09_CMD_GETVERSION:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+VERSION\r\n");
 8000734:	4915      	ldr	r1, [pc, #84]	; (800078c <JDY09_SendCommand+0xa8>)
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff4e 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 800073c:	e01d      	b.n	800077a <JDY09_SendCommand+0x96>

		case JDY09_CMD_RESET:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+RESET\r\n");
 800073e:	4914      	ldr	r1, [pc, #80]	; (8000790 <JDY09_SendCommand+0xac>)
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff49 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 8000746:	e018      	b.n	800077a <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETADRESS:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+LADDR\r\n");
 8000748:	4912      	ldr	r1, [pc, #72]	; (8000794 <JDY09_SendCommand+0xb0>)
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff44 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 8000750:	e013      	b.n	800077a <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETBAUDRATE:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+BAUD\r\n");
 8000752:	4911      	ldr	r1, [pc, #68]	; (8000798 <JDY09_SendCommand+0xb4>)
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff3f 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 800075a:	e00e      	b.n	800077a <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETPASSWORD:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+PIN\r\n");
 800075c:	490f      	ldr	r1, [pc, #60]	; (800079c <JDY09_SendCommand+0xb8>)
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff3a 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 8000764:	e009      	b.n	800077a <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETNAME:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+NAME\r\n");
 8000766:	490e      	ldr	r1, [pc, #56]	; (80007a0 <JDY09_SendCommand+0xbc>)
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff35 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 800076e:	e004      	b.n	800077a <JDY09_SendCommand+0x96>

		case JDY09_CMD_SETDEFAULTSETTINGS:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+DEFAULT\r\n");
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <JDY09_SendCommand+0xc0>)
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ff30 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 8000778:	bf00      	nop
		}
		return;
 800077a:	e003      	b.n	8000784 <JDY09_SendCommand+0xa0>
	}

	// AT cmd error
	JDY09_DisplayTerminal("AT commands possible only in offline mode \n\r");
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <JDY09_SendCommand+0xc4>)
 800077e:	f7ff ff13 	bl	80005a8 <JDY09_DisplayTerminal>
 8000782:	e000      	b.n	8000786 <JDY09_SendCommand+0xa2>
		return;
 8000784:	bf00      	nop

}
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08005014 	.word	0x08005014
 8000790:	08005024 	.word	0x08005024
 8000794:	08005030 	.word	0x08005030
 8000798:	0800503c 	.word	0x0800503c
 800079c:	08005048 	.word	0x08005048
 80007a0:	08005054 	.word	0x08005054
 80007a4:	08005060 	.word	0x08005060
 80007a8:	08005070 	.word	0x08005070

080007ac <JDY09_Disconnect>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_Disconnect(JDY09_t *jdy09)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	//check connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4610      	mov	r0, r2
 80007c4:	f001 fd66 	bl	8002294 <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d104      	bne.n	80007d8 <JDY09_Disconnect+0x2c>
			== GPIO_PIN_SET)
	{
		// disconnect
		JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+DISC\r\n");
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <JDY09_Disconnect+0x38>)
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff01 	bl	80005d8 <JDY09_SendAndDisplayCmd>
		return;
 80007d6:	e002      	b.n	80007de <JDY09_Disconnect+0x32>
	}

	// AT cmd error
	JDY09_DisplayTerminal("Module already disconnected \n\r");
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <JDY09_Disconnect+0x3c>)
 80007da:	f7ff fee5 	bl	80005a8 <JDY09_DisplayTerminal>
}
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	08005108 	.word	0x08005108
 80007e8:	08005114 	.word	0x08005114

080007ec <JDY09_ClearMsgPendingFlag>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_ClearMsgPendingFlag(JDY09_t *jdy09)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	jdy09->MessagePending = JDY09_NOMESSAGE;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <JDY09_CheckPendingMessages>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[*MsgBuffer] - pointer to buffer where message has to be written
 * @return - status : massage pending 1/0
 */
uint8_t JDY09_CheckPendingMessages(JDY09_t *jdy09, uint8_t *MsgBuffer)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]

	// Check if there is message finished
	if (jdy09->LinesRecieved > 0)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d032      	beq.n	8000884 <JDY09_CheckPendingMessages+0x7c>
	{

		uint8_t i = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
		uint8_t temp = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	73bb      	strb	r3, [r7, #14]
		do
		{
			// Move a sign to ring buffer
			RB_Read(&(jdy09->RingBuffer), &temp);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3346      	adds	r3, #70	; 0x46
 800082a:	f107 020e 	add.w	r2, r7, #14
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fb23 	bl	8000e7c <RB_Read>
			if (temp == JDY09_LASTCHARACTER)
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	2b0a      	cmp	r3, #10
 800083a:	d10b      	bne.n	8000854 <JDY09_CheckPendingMessages+0x4c>
			{
				MsgBuffer[i] = JDY09_LASTCHARACTER;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	4413      	add	r3, r2
 8000842:	220a      	movs	r2, #10
 8000844:	701a      	strb	r2, [r3, #0]
				MsgBuffer[i + 1] = 0;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	3301      	adds	r3, #1
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	4413      	add	r3, r2
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	e004      	b.n	800085e <JDY09_CheckPendingMessages+0x56>
			}
			else
			{
				MsgBuffer[i] = temp;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	4413      	add	r3, r2
 800085a:	7bba      	ldrb	r2, [r7, #14]
 800085c:	701a      	strb	r2, [r3, #0]
			}
			i++;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	3301      	adds	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
			//rewrite signs until last character defined by user
		} while (temp != JDY09_LASTCHARACTER);
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	2b0a      	cmp	r3, #10
 8000868:	d1dd      	bne.n	8000826 <JDY09_CheckPendingMessages+0x1e>
		//decrement LinesRecieved
		jdy09->LinesRecieved--;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b01      	subs	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		//set up flag that message is ready to parse
		jdy09->MessagePending = JDY09_MESSAGEPENDING;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	}

	// return if flag status
	return jdy09->MessagePending;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <JDY09_RxCpltCallbackDMA>:
 * @return - void
 */
#if (JDY09_UART_RX_DMA == 1)
void JDY09_RxCpltCallbackDMA(JDY09_t *jdy09, UART_HandleTypeDef *huart,
		uint16_t size)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	4613      	mov	r3, r2
 80008a0:	80fb      	strh	r3, [r7, #6]

	//check if IRQ is coming from correct uart
	if (jdy09->huart->Instance == huart->Instance)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d13d      	bne.n	800092c <JDY09_RxCpltCallbackDMA+0x98>
	{

		uint8_t i;
		uint8_t newlines = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	75bb      	strb	r3, [r7, #22]
		//write message to ring buffer
		for (i = 0; i < size; i++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	75fb      	strb	r3, [r7, #23]
 80008b8:	e015      	b.n	80008e6 <JDY09_RxCpltCallbackDMA+0x52>
		{
			RB_Write((&(jdy09->RingBuffer)), jdy09->RecieveBufferDMA[i]);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f103 0046 	add.w	r0, r3, #70	; 0x46
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	4413      	add	r3, r2
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f000 fb04 	bl	8000ed6 <RB_Write>

			// when line is complete -> add 1 to received lines
			// only when last char is \n
			if (jdy09->RecieveBufferDMA[i] == JDY09_LASTCHARACTER)
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	791b      	ldrb	r3, [r3, #4]
 80008d6:	2b0a      	cmp	r3, #10
 80008d8:	d102      	bne.n	80008e0 <JDY09_RxCpltCallbackDMA+0x4c>
			{
				newlines++;
 80008da:	7dbb      	ldrb	r3, [r7, #22]
 80008dc:	3301      	adds	r3, #1
 80008de:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < size; i++)
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	3301      	adds	r3, #1
 80008e4:	75fb      	strb	r3, [r7, #23]
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	88fa      	ldrh	r2, [r7, #6]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8e4      	bhi.n	80008ba <JDY09_RxCpltCallbackDMA+0x26>
			}
		}

		if (newlines == 0)
 80008f0:	7dbb      	ldrb	r3, [r7, #22]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <JDY09_RxCpltCallbackDMA+0x68>
		{
			// if formt of data is not correct print msg
			JDY09_DisplayTerminal(
 80008f6:	480f      	ldr	r0, [pc, #60]	; (8000934 <JDY09_RxCpltCallbackDMA+0xa0>)
 80008f8:	f7ff fe56 	bl	80005a8 <JDY09_DisplayTerminal>
					"Error, message has to be finished with +LF \n\r");

		}

		// add new lines
		jdy09->LinesRecieved = +newlines;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	7dba      	ldrb	r2, [r7, #22]
 8000900:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca

		// start another IRQ for single sign
		HAL_UARTEx_ReceiveToIdle_DMA(jdy09->huart, jdy09->RecieveBufferDMA,
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3304      	adds	r3, #4
 800090c:	2240      	movs	r2, #64	; 0x40
 800090e:	4619      	mov	r1, r3
 8000910:	f002 fa5d 	bl	8002dce <HAL_UARTEx_ReceiveToIdle_DMA>
		JDY09_RECIEVEBUFFERSIZE);
		// to avoid callback from half message this has be disabled
		__HAL_DMA_DISABLE_IT(jdy09->huart->hdmarx, DMA_IT_HT);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f022 0208 	bic.w	r2, r2, #8
 800092a:	601a      	str	r2, [r3, #0]
	}
}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	08005208 	.word	0x08005208

08000938 <JDY09_EXTICallback>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[GPIO_Pin] - pin number from EXTI
 * @return - void
 */
void JDY09_EXTICallback(JDY09_t *jdy09, uint16_t GPIO_Pin)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]

	//check if IRQ is coming from STATE pin
	if (jdy09->StatePinNumber == GPIO_Pin)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800094a:	887a      	ldrh	r2, [r7, #2]
 800094c:	429a      	cmp	r2, r3
 800094e:	d112      	bne.n	8000976 <JDY09_EXTICallback+0x3e>
	{
		// if trigger is caused by rising edge then new connection is made
		if (HAL_GPIO_ReadPin(BT_STATE_GPIO_Port, BT_STATE_Pin) == GPIO_PIN_SET)
 8000950:	2108      	movs	r1, #8
 8000952:	480b      	ldr	r0, [pc, #44]	; (8000980 <JDY09_EXTICallback+0x48>)
 8000954:	f001 fc9e 	bl	8002294 <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d103      	bne.n	8000966 <JDY09_EXTICallback+0x2e>
		{
			JDY09_DisplayTerminal("Device connected \n\r");
 800095e:	4809      	ldr	r0, [pc, #36]	; (8000984 <JDY09_EXTICallback+0x4c>)
 8000960:	f7ff fe22 	bl	80005a8 <JDY09_DisplayTerminal>
 8000964:	e002      	b.n	800096c <JDY09_EXTICallback+0x34>
		}
		else
		// if trigger is from falling edge then msg disconnect
		{
			JDY09_DisplayTerminal("Device disconnected \n\r");
 8000966:	4808      	ldr	r0, [pc, #32]	; (8000988 <JDY09_EXTICallback+0x50>)
 8000968:	f7ff fe1e 	bl	80005a8 <JDY09_DisplayTerminal>
		}

		// clear ring buffer if device is connected/disconnected
		RB_Flush(&(jdy09->RingBuffer));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3346      	adds	r3, #70	; 0x46
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fadc 	bl	8000f2e <RB_Flush>
	}
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40020800 	.word	0x40020800
 8000984:	08005238 	.word	0x08005238
 8000988:	0800524c 	.word	0x0800524c

0800098c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_DMA_Init+0x30>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <MX_DMA_Init+0x30>)
 800099c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_DMA_Init+0x30>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <MX_GPIO_Init+0xec>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <MX_GPIO_Init+0xec>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_GPIO_Init+0xec>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_GPIO_Init+0xec>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a2c      	ldr	r2, [pc, #176]	; (8000aac <MX_GPIO_Init+0xec>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_GPIO_Init+0xec>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <MX_GPIO_Init+0xec>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a25      	ldr	r2, [pc, #148]	; (8000aac <MX_GPIO_Init+0xec>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <MX_GPIO_Init+0xec>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_GPIO_Init+0xec>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a1e      	ldr	r2, [pc, #120]	; (8000aac <MX_GPIO_Init+0xec>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_GPIO_Init+0xec>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0xf0>)
 8000a4c:	f001 fc3a 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <MX_GPIO_Init+0xf4>)
 8000a68:	f001 fa90 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_STATE_Pin;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a70:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_STATE_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <MX_GPIO_Init+0xf4>)
 8000a82:	f001 fa83 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a86:	2320      	movs	r3, #32
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_GPIO_Init+0xf0>)
 8000a9e:	f001 fa75 	bl	8001f8c <HAL_GPIO_Init>

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abc:	f000 fcbc 	bl	8001438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac0:	f000 f82c 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac4:	f7ff ff7c 	bl	80009c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ac8:	f000 fbb4 	bl	8001234 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000acc:	f7ff ff5e 	bl	800098c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ad0:	f000 fb86 	bl	80011e0 <MX_USART1_UART_Init>


  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ad4:	f000 f88e 	bl	8000bf4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  JDY09_Init(&JDY09_1, &huart1,BT_STATE_GPIO_Port,BT_STATE_Pin);
 8000ad8:	2308      	movs	r3, #8
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <main+0x50>)
 8000adc:	490b      	ldr	r1, [pc, #44]	; (8000b0c <main+0x54>)
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <main+0x58>)
 8000ae0:	f7ff fdb2 	bl	8000648 <JDY09_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // check if there is msg - if yes transfer it to a buffer
	  if(JDY09_CheckPendingMessages(&JDY09_1, TransferBuffer) == JDY09_MESSAGEPENDING)
 8000ae4:	490b      	ldr	r1, [pc, #44]	; (8000b14 <main+0x5c>)
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <main+0x58>)
 8000ae8:	f7ff fe8e 	bl	8000808 <JDY09_CheckPendingMessages>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d1f8      	bne.n	8000ae4 <main+0x2c>
	  {
		  //clear pending flag
		  JDY09_ClearMsgPendingFlag(&JDY09_1);
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <main+0x58>)
 8000af4:	f7ff fe7a 	bl	80007ec <JDY09_ClearMsgPendingFlag>

		  //parse msg
		  ParseStatus = Parser_Parse(TransferBuffer);
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <main+0x5c>)
 8000afa:	f000 f91d 	bl	8000d38 <Parser_Parse>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <main+0x60>)
 8000b04:	701a      	strb	r2, [r3, #0]
	  if(JDY09_CheckPendingMessages(&JDY09_1, TransferBuffer) == JDY09_MESSAGEPENDING)
 8000b06:	e7ed      	b.n	8000ae4 <main+0x2c>
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	20000210 	.word	0x20000210
 8000b10:	2000009c 	.word	0x2000009c
 8000b14:	20000170 	.word	0x20000170
 8000b18:	20000098 	.word	0x20000098

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fa1e 	bl	8003f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <SystemClock_Config+0xd0>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a28      	ldr	r2, [pc, #160]	; (8000bec <SystemClock_Config+0xd0>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <SystemClock_Config+0xd0>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b84:	2310      	movs	r3, #16
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b90:	2310      	movs	r3, #16
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fbbe 	bl	8002328 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bb2:	f000 f85d 	bl	8000c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fe20 	bl	8002818 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bde:	f000 f847 	bl	8000c70 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	; 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2025      	movs	r0, #37	; 0x25
 8000bfe:	f000 fd8c 	bl	800171a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c02:	2025      	movs	r0, #37	; 0x25
 8000c04:	f000 fda5 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2009      	movs	r0, #9
 8000c0e:	f000 fd84 	bl	800171a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c12:	2009      	movs	r0, #9
 8000c14:	f000 fd9d 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	203a      	movs	r0, #58	; 0x3a
 8000c1e:	f000 fd7c 	bl	800171a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c22:	203a      	movs	r0, #58	; 0x3a
 8000c24:	f000 fd95 	bl	8001752 <HAL_NVIC_EnableIRQ>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_UARTEx_RxEventCallback>:
}
#endif

#if (JDY09_UART_RX_DMA == 1)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
	// Callback from BT module
	JDY09_RxCpltCallbackDMA(&JDY09_1, huart, Size);
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <HAL_UARTEx_RxEventCallback+0x20>)
 8000c40:	f7ff fe28 	bl	8000894 <JDY09_RxCpltCallbackDMA>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000009c 	.word	0x2000009c

08000c50 <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
	// Callback from EXTI
	JDY09_EXTICallback(&JDY09_1,GPIO_Pin);
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1c>)
 8000c60:	f7ff fe6a 	bl	8000938 <JDY09_EXTICallback>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000009c 	.word	0x2000009c

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <Parser_DisplayTerminal>:
#include "ringbuffer.h"
#include "parse.h"
#include "usart.h"

void Parser_DisplayTerminal(char *Msg)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	uint8_t Lenght = strlen(Msg);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff fab5 	bl	80001f4 <strlen>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) Msg, Lenght, 1000);
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <Parser_DisplayTerminal+0x2c>)
 8000c9a:	f002 f806 	bl	8002caa <HAL_UART_Transmit>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000210 	.word	0x20000210

08000cac <Parser_WAKEUP>:

/*
 * @ WAKE UP procedure
 */
static void Parser_WAKEUP(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	//wake up for 5 mins
	Parser_DisplayTerminal("System wake up\n\r");
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <Parser_WAKEUP+0x10>)
 8000cb2:	f7ff ffe3 	bl	8000c7c <Parser_DisplayTerminal>

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	08005264 	.word	0x08005264

08000cc0 <Parser_MEASURE>:

/*
 * @ MEASURE procedure
 */
static void Parser_MEASURE(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	// send log to uart
	Parser_DisplayTerminal("Calculating HUGE data\n\r");
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <Parser_MEASURE+0x10>)
 8000cc6:	f7ff ffd9 	bl	8000c7c <Parser_DisplayTerminal>

	//bmp280 measure

	//bluetooth send to master
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	08005278 	.word	0x08005278

08000cd4 <Parser_DISPLAY>:

/*
 * @ DISPLAY procedure
 */
static void Parser_DISPLAY(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	// send log to uart
	Parser_DisplayTerminal("Parametres displayed \n\r");
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <Parser_DISPLAY+0x10>)
 8000cda:	f7ff ffcf 	bl	8000c7c <Parser_DisplayTerminal>

	//start timer to measure every 1 second for 1 minute
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08005290 	.word	0x08005290

08000ce8 <Parser_HELP>:

static void Parser_HELP(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	// send log to uart
	Parser_DisplayTerminal("WAKEUP; - wake up from sleep mode \n\r");
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <Parser_HELP+0x28>)
 8000cee:	f7ff ffc5 	bl	8000c7c <Parser_DisplayTerminal>
	Parser_DisplayTerminal("MEASURE; - measure and send to terminal \n\r");
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <Parser_HELP+0x2c>)
 8000cf4:	f7ff ffc2 	bl	8000c7c <Parser_DisplayTerminal>
	Parser_DisplayTerminal("DISPLAY; - start measuring and display on 8segment \n\r");
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <Parser_HELP+0x30>)
 8000cfa:	f7ff ffbf 	bl	8000c7c <Parser_DisplayTerminal>
	Parser_DisplayTerminal("SLEEP; - enter sleep mode \n\r");
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <Parser_HELP+0x34>)
 8000d00:	f7ff ffbc 	bl	8000c7c <Parser_DisplayTerminal>
	Parser_DisplayTerminal("HELP; - print all commands \n\r");
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <Parser_HELP+0x38>)
 8000d06:	f7ff ffb9 	bl	8000c7c <Parser_DisplayTerminal>


	//start timer to measure every 1 second for 1 minute
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	080052a8 	.word	0x080052a8
 8000d14:	080052d0 	.word	0x080052d0
 8000d18:	080052fc 	.word	0x080052fc
 8000d1c:	08005334 	.word	0x08005334
 8000d20:	08005354 	.word	0x08005354

08000d24 <Parser_SLEEP>:

/*
 * @ SLEEP procedure
 */
static void Parser_SLEEP(uint8_t *ParseBuffer)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
//	UartLogBT("Welcome back broski\n\r");
//
//	//start count down for going back to sleep
//	HAL_TIM_Base_Start_IT(&htim1);

}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <Parser_Parse>:
/*
 * @ function parse message and start command procedures
 */

uint8_t Parser_Parse(uint8_t *ParseBuffer)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	// Count how many commands we have to parse
	uint8_t cmd_count = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	77fb      	strb	r3, [r7, #31]
	uint8_t i = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	77bb      	strb	r3, [r7, #30]
	uint8_t LastCommand[16] =  {0};
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]

	// For every semicolon count up until EOL
	do
	{
		if (ParseBuffer[i] == ';')
 8000d58:	7fbb      	ldrb	r3, [r7, #30]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b3b      	cmp	r3, #59	; 0x3b
 8000d62:	d102      	bne.n	8000d6a <Parser_Parse+0x32>
		{
			cmd_count++;
 8000d64:	7ffb      	ldrb	r3, [r7, #31]
 8000d66:	3301      	adds	r3, #1
 8000d68:	77fb      	strb	r3, [r7, #31]
		}
		i++;
 8000d6a:	7fbb      	ldrb	r3, [r7, #30]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	77bb      	strb	r3, [r7, #30]
	} while (ParseBuffer[i] != '\n');
 8000d70:	7fbb      	ldrb	r3, [r7, #30]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b0a      	cmp	r3, #10
 8000d7a:	d1ed      	bne.n	8000d58 <Parser_Parse+0x20>


	// there are 2 messages that are coming during connect/disconnect

	if (cmd_count == 0)
 8000d7c:	7ffb      	ldrb	r3, [r7, #31]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d107      	bne.n	8000d92 <Parser_Parse+0x5a>
	{
		Parser_DisplayTerminal("Message received :");
 8000d82:	4836      	ldr	r0, [pc, #216]	; (8000e5c <Parser_Parse+0x124>)
 8000d84:	f7ff ff7a 	bl	8000c7c <Parser_DisplayTerminal>
		Parser_DisplayTerminal((char*)ParseBuffer);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff77 	bl	8000c7c <Parser_DisplayTerminal>
		// return ERROR
		return PARSE_ERROR_NOCMD;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e060      	b.n	8000e54 <Parser_Parse+0x11c>


	uint8_t *ParsePointer;

	// Execute cmd_count number of commands
	for (i = 0; i < cmd_count; i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	77bb      	strb	r3, [r7, #30]
 8000d96:	e058      	b.n	8000e4a <Parser_Parse+0x112>
	{

		// cut command from the message -> from beginning to ;
		//if first msg start from beginning
		if(i == 0)
 8000d98:	7fbb      	ldrb	r3, [r7, #30]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d105      	bne.n	8000daa <Parser_Parse+0x72>
		{
			ParsePointer = (uint8_t*)(strtok((char*)ParseBuffer, ";"));
 8000d9e:	4930      	ldr	r1, [pc, #192]	; (8000e60 <Parser_Parse+0x128>)
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f003 f8f3 	bl	8003f8c <strtok>
 8000da6:	61b8      	str	r0, [r7, #24]
 8000da8:	e004      	b.n	8000db4 <Parser_Parse+0x7c>

		}else
		{
			ParsePointer = (uint8_t*)(strtok(NULL, ";"));
 8000daa:	492d      	ldr	r1, [pc, #180]	; (8000e60 <Parser_Parse+0x128>)
 8000dac:	2000      	movs	r0, #0
 8000dae:	f003 f8ed 	bl	8003f8c <strtok>
 8000db2:	61b8      	str	r0, [r7, #24]
		}


		// if you put two same commands in a row - error
		if(strcmp((char*)ParsePointer,(char*)LastCommand) == 0)
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	69b8      	ldr	r0, [r7, #24]
 8000dbc:	f7ff fa10 	bl	80001e0 <strcmp>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <Parser_Parse+0x98>
		{
			Parser_DisplayTerminal("Error, same command twice in a row!\n\r");
 8000dc6:	4827      	ldr	r0, [pc, #156]	; (8000e64 <Parser_Parse+0x12c>)
 8000dc8:	f7ff ff58 	bl	8000c7c <Parser_DisplayTerminal>
			return PARSE_ERROR_2CMDS;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e041      	b.n	8000e54 <Parser_Parse+0x11c>
		/*
		 * EXECUTE COMMANDS
		 */

		// do WAKE_UP
		if (strcmp("WAKEUP", (char*)ParsePointer) == 0)
 8000dd0:	69b9      	ldr	r1, [r7, #24]
 8000dd2:	4825      	ldr	r0, [pc, #148]	; (8000e68 <Parser_Parse+0x130>)
 8000dd4:	f7ff fa04 	bl	80001e0 <strcmp>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <Parser_Parse+0xac>
		{
			Parser_WAKEUP();
 8000dde:	f7ff ff65 	bl	8000cac <Parser_WAKEUP>
 8000de2:	e029      	b.n	8000e38 <Parser_Parse+0x100>
		}
		// do MEASURE
		else if (strcmp("MEASURE", (char*)ParsePointer) == 0)
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	4821      	ldr	r0, [pc, #132]	; (8000e6c <Parser_Parse+0x134>)
 8000de8:	f7ff f9fa 	bl	80001e0 <strcmp>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <Parser_Parse+0xc0>
		{
			Parser_MEASURE();
 8000df2:	f7ff ff65 	bl	8000cc0 <Parser_MEASURE>
 8000df6:	e01f      	b.n	8000e38 <Parser_Parse+0x100>
		}
		// do DISPLAY
		else if (strcmp("DISPLAY", (char*)ParsePointer) == 0)
 8000df8:	69b9      	ldr	r1, [r7, #24]
 8000dfa:	481d      	ldr	r0, [pc, #116]	; (8000e70 <Parser_Parse+0x138>)
 8000dfc:	f7ff f9f0 	bl	80001e0 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <Parser_Parse+0xd4>
		{
			Parser_DISPLAY();
 8000e06:	f7ff ff65 	bl	8000cd4 <Parser_DISPLAY>
 8000e0a:	e015      	b.n	8000e38 <Parser_Parse+0x100>
		}
		else if (strcmp("HELP", (char*)ParsePointer) == 0)
 8000e0c:	69b9      	ldr	r1, [r7, #24]
 8000e0e:	4819      	ldr	r0, [pc, #100]	; (8000e74 <Parser_Parse+0x13c>)
 8000e10:	f7ff f9e6 	bl	80001e0 <strcmp>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <Parser_Parse+0xe8>
		{
			Parser_HELP();
 8000e1a:	f7ff ff65 	bl	8000ce8 <Parser_HELP>
 8000e1e:	e00b      	b.n	8000e38 <Parser_Parse+0x100>
		}
		// do SLEEP
		else if (strcmp("SLEEP", (char*)ParsePointer) == 0)
 8000e20:	69b9      	ldr	r1, [r7, #24]
 8000e22:	4815      	ldr	r0, [pc, #84]	; (8000e78 <Parser_Parse+0x140>)
 8000e24:	f7ff f9dc 	bl	80001e0 <strcmp>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <Parser_Parse+0x100>
		{
			Parser_SLEEP(ParsePointer);
 8000e2e:	69b8      	ldr	r0, [r7, #24]
 8000e30:	f7ff ff78 	bl	8000d24 <Parser_SLEEP>
			return PARSE_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e00d      	b.n	8000e54 <Parser_Parse+0x11c>
		}

		strcpy((char*)LastCommand,(char*)ParsePointer);
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 f89c 	bl	8003f7c <strcpy>
	for (i = 0; i < cmd_count; i++)
 8000e44:	7fbb      	ldrb	r3, [r7, #30]
 8000e46:	3301      	adds	r3, #1
 8000e48:	77bb      	strb	r3, [r7, #30]
 8000e4a:	7fba      	ldrb	r2, [r7, #30]
 8000e4c:	7ffb      	ldrb	r3, [r7, #31]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d3a2      	bcc.n	8000d98 <Parser_Parse+0x60>
	}

	return PARSE_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	08005374 	.word	0x08005374
 8000e60:	08005388 	.word	0x08005388
 8000e64:	0800538c 	.word	0x0800538c
 8000e68:	080053b4 	.word	0x080053b4
 8000e6c:	080053bc 	.word	0x080053bc
 8000e70:	080053c4 	.word	0x080053c4
 8000e74:	080053cc 	.word	0x080053cc
 8000e78:	080053d4 	.word	0x080053d4

08000e7c <RB_Read>:
#include "main.h"
#include "ringbuffer.h"
#include "parse.h"

RB_Status RB_Read(Ringbuffer_t *buffer, uint8_t *value)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	if(buffer->Head == buffer->Tail)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d101      	bne.n	8000e9a <RB_Read+0x1e>
	{
		return RB_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e017      	b.n	8000eca <RB_Read+0x4e>
	}

	*value = buffer->buffer[buffer->Tail];
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	5c9a      	ldrb	r2, [r3, r2]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	701a      	strb	r2, [r3, #0]

	buffer->Tail = (buffer->Tail + 1) % RING_BUFFER_SIZE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	425a      	negs	r2, r3
 8000eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ebc:	bf58      	it	pl
 8000ebe:	4253      	negpl	r3, r2
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	return RB_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <RB_Write>:

RB_Status RB_Write(Ringbuffer_t *buffer, uint8_t value)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]

	uint16_t HeadTmp;
	HeadTmp = (buffer->Head + 1) % RING_BUFFER_SIZE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000ee8:	3301      	adds	r3, #1
 8000eea:	425a      	negs	r2, r3
 8000eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ef0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ef4:	bf58      	it	pl
 8000ef6:	4253      	negpl	r3, r2
 8000ef8:	81fb      	strh	r3, [r7, #14]

	if (HeadTmp == buffer->Tail)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000f00:	89fa      	ldrh	r2, [r7, #14]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d101      	bne.n	8000f0a <RB_Write+0x34>
	{
		return RB_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00b      	b.n	8000f22 <RB_Write+0x4c>
	}

	buffer->buffer[buffer->Head] = value;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000f10:	4619      	mov	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	78fa      	ldrb	r2, [r7, #3]
 8000f16:	545a      	strb	r2, [r3, r1]
	buffer->Head = HeadTmp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	89fa      	ldrh	r2, [r7, #14]
 8000f1c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	return RB_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <RB_Flush>:

void RB_Flush(Ringbuffer_t *buffer)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	buffer->Head = 0;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	buffer->Tail = 0;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f92:	2007      	movs	r0, #7
 8000f94:	f000 fbb6 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 fa74 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ffc:	2008      	movs	r0, #8
 8000ffe:	f001 f97b 	bl	80022f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <USART1_IRQHandler+0x10>)
 800100e:	f001 ff43 	bl	8002e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000210 	.word	0x20000210

0800101c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <DMA2_Stream2_IRQHandler+0x10>)
 8001022:	f000 fd49 	bl	8001ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001b0 	.word	0x200001b0

08001030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	return 1;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_kill>:

int _kill(int pid, int sig)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800104a:	f002 ff65 	bl	8003f18 <__errno>
 800104e:	4603      	mov	r3, r0
 8001050:	2216      	movs	r2, #22
 8001052:	601a      	str	r2, [r3, #0]
	return -1;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_exit>:

void _exit (int status)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffe7 	bl	8001040 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001072:	e7fe      	b.n	8001072 <_exit+0x12>

08001074 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00a      	b.n	800109c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001086:	f3af 8000 	nop.w
 800108a:	4601      	mov	r1, r0
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	b2ca      	uxtb	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf0      	blt.n	8001086 <_read+0x12>
	}

return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e009      	b.n	80010d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf1      	blt.n	80010c0 <_write+0x12>
	}
	return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_close>:

int _close(int file)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
	return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110e:	605a      	str	r2, [r3, #4]
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_isatty>:

int _isatty(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	return 1;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f002 feca 	bl	8003f18 <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20018000 	.word	0x20018000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	2000008c 	.word	0x2000008c
 80011b8:	200002b0 	.word	0x200002b0

080011bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_USART1_UART_Init+0x4c>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <MX_USART1_UART_Init+0x50>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_USART1_UART_Init+0x4c>)
 80011ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_USART1_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_USART1_UART_Init+0x4c>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <MX_USART1_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_USART1_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_USART1_UART_Init+0x4c>)
 8001218:	f001 fcfa 	bl	8002c10 <HAL_UART_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001222:	f7ff fd25 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000210 	.word	0x20000210
 8001230:	40011000 	.word	0x40011000

08001234 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_USART2_UART_Init+0x50>)
 800123c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800126c:	f001 fcd0 	bl	8002c10 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001276:	f7ff fcfb 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000254 	.word	0x20000254
 8001284:	40004400 	.word	0x40004400

08001288 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_UART_MspInit+0x144>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d15b      	bne.n	8001362 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	4b48      	ldr	r3, [pc, #288]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a47      	ldr	r2, [pc, #284]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a40      	ldr	r2, [pc, #256]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f4:	2307      	movs	r3, #7
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4835      	ldr	r0, [pc, #212]	; (80013d4 <HAL_UART_MspInit+0x14c>)
 8001300:	f000 fe44 	bl	8001f8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <HAL_UART_MspInit+0x150>)
 8001306:	4a35      	ldr	r2, [pc, #212]	; (80013dc <HAL_UART_MspInit+0x154>)
 8001308:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <HAL_UART_MspInit+0x150>)
 800130c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001310:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <HAL_UART_MspInit+0x150>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <HAL_UART_MspInit+0x150>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_UART_MspInit+0x150>)
 8001320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001324:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <HAL_UART_MspInit+0x150>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <HAL_UART_MspInit+0x150>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_UART_MspInit+0x150>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <HAL_UART_MspInit+0x150>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_UART_MspInit+0x150>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001344:	4824      	ldr	r0, [pc, #144]	; (80013d8 <HAL_UART_MspInit+0x150>)
 8001346:	f000 fa1f 	bl	8001788 <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001350:	f7ff fc8e 	bl	8000c70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <HAL_UART_MspInit+0x150>)
 8001358:	639a      	str	r2, [r3, #56]	; 0x38
 800135a:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <HAL_UART_MspInit+0x150>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001360:	e030      	b.n	80013c4 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_UART_MspInit+0x158>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d12b      	bne.n	80013c4 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_UART_MspInit+0x148>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <HAL_UART_MspInit+0x148>)
 8001376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137a:	6413      	str	r3, [r2, #64]	; 0x40
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_UART_MspInit+0x148>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_UART_MspInit+0x148>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <HAL_UART_MspInit+0x148>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_UART_MspInit+0x148>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013a4:	230c      	movs	r3, #12
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b4:	2307      	movs	r3, #7
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_UART_MspInit+0x14c>)
 80013c0:	f000 fde4 	bl	8001f8c <HAL_GPIO_Init>
}
 80013c4:	bf00      	nop
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	200001b0 	.word	0x200001b0
 80013dc:	40026440 	.word	0x40026440
 80013e0:	40004400 	.word	0x40004400

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ea:	490e      	ldr	r1, [pc, #56]	; (8001424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001400:	4c0b      	ldr	r4, [pc, #44]	; (8001430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800140e:	f7ff fed5 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001412:	f002 fd87 	bl	8003f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff fb4f 	bl	8000ab8 <main>
  bx  lr    
 800141a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800141c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001428:	08005558 	.word	0x08005558
  ldr r2, =_sbss
 800142c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001430:	200002ac 	.word	0x200002ac

08001434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <HAL_Init+0x40>)
 8001442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_Init+0x40>)
 800144e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_Init+0x40>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 f94f 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f808 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800146c:	f7ff fd72 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x54>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x58>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f967 	bl	800176e <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00e      	b.n	80014c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f000 f92f 	bl	800171a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <HAL_InitTick+0x5c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000298 	.word	0x20000298

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000298 	.word	0x20000298

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffde 	bl	8001504 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4907      	ldr	r1, [pc, #28]	; (8001600 <__NVIC_EnableIRQ+0x38>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff8e 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff29 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff3e 	bl	80015ac <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff8e 	bl	8001658 <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff31 	bl	80015c8 <__NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffa2 	bl	80016c0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff feb6 	bl	8001504 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e099      	b.n	80018d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c4:	e00f      	b.n	80017e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c6:	f7ff fe9d 	bl	8001504 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d908      	bls.n	80017e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2203      	movs	r2, #3
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e078      	b.n	80018d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e8      	bne.n	80017c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_DMA_Init+0x158>)
 8001800:	4013      	ands	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001812:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4313      	orrs	r3, r2
 8001836:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	2b04      	cmp	r3, #4
 800183e:	d107      	bne.n	8001850 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4313      	orrs	r3, r2
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f023 0307 	bic.w	r3, r3, #7
 8001866:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4313      	orrs	r3, r2
 8001870:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2b04      	cmp	r3, #4
 8001878:	d117      	bne.n	80018aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00e      	beq.n	80018aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fb01 	bl	8001e94 <DMA_CheckFifoParam>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018a6:	2301      	movs	r3, #1
 80018a8:	e016      	b.n	80018d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fab8 	bl	8001e28 <DMA_CalcBaseAndBitshift>
 80018b8:	4603      	mov	r3, r0
 80018ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	223f      	movs	r2, #63	; 0x3f
 80018c2:	409a      	lsls	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	f010803f 	.word	0xf010803f

080018e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_DMA_Start_IT+0x26>
 8001906:	2302      	movs	r3, #2
 8001908:	e040      	b.n	800198c <HAL_DMA_Start_IT+0xa8>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d12f      	bne.n	800197e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 fa4a 	bl	8001dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	223f      	movs	r2, #63	; 0x3f
 800193e:	409a      	lsls	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0216 	orr.w	r2, r2, #22
 8001952:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0208 	orr.w	r2, r2, #8
 800196a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e005      	b.n	800198a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001986:	2302      	movs	r3, #2
 8001988:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800198a:	7dfb      	ldrb	r3, [r7, #23]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019a2:	f7ff fdaf 	bl	8001504 <HAL_GetTick>
 80019a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d008      	beq.n	80019c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e052      	b.n	8001a6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0216 	bic.w	r2, r2, #22
 80019d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d103      	bne.n	80019f6 <HAL_DMA_Abort+0x62>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0208 	bic.w	r2, r2, #8
 8001a04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a16:	e013      	b.n	8001a40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a18:	f7ff fd74 	bl	8001504 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d90c      	bls.n	8001a40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2203      	movs	r2, #3
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e015      	b.n	8001a6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1e4      	bne.n	8001a18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	223f      	movs	r2, #63	; 0x3f
 8001a54:	409a      	lsls	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d004      	beq.n	8001a92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00c      	b.n	8001aac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2205      	movs	r2, #5
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0201 	bic.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac4:	4b92      	ldr	r3, [pc, #584]	; (8001d10 <HAL_DMA_IRQHandler+0x258>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_DMA_IRQHandler+0x25c>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01a      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0204 	bic.w	r2, r2, #4
 8001b0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2208      	movs	r2, #8
 8001b12:	409a      	lsls	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2201      	movs	r2, #1
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d012      	beq.n	8001b5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	2201      	movs	r2, #1
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f043 0202 	orr.w	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	2204      	movs	r2, #4
 8001b60:	409a      	lsls	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d012      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	f043 0204 	orr.w	r2, r3, #4
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	2210      	movs	r2, #16
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d043      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d03c      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d018      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d108      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d024      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
 8001be6:	e01f      	b.n	8001c28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
 8001bf8:	e016      	b.n	8001c28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0208 	bic.w	r2, r2, #8
 8001c16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 808e 	beq.w	8001d56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8086 	beq.w	8001d56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	2220      	movs	r2, #32
 8001c50:	409a      	lsls	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d136      	bne.n	8001cd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0216 	bic.w	r2, r2, #22
 8001c70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <HAL_DMA_IRQHandler+0x1da>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0208 	bic.w	r2, r2, #8
 8001ca0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	223f      	movs	r2, #63	; 0x3f
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d07d      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
        }
        return;
 8001cce:	e078      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01c      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d108      	bne.n	8001cfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d030      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
 8001cfc:	e02b      	b.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d027      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
 8001d0e:	e022      	b.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
 8001d10:	20000000 	.word	0x20000000
 8001d14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10f      	bne.n	8001d46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0210 	bic.w	r2, r2, #16
 8001d34:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d032      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d022      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d307      	bcc.n	8001d9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f2      	bne.n	8001d82 <HAL_DMA_IRQHandler+0x2ca>
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d9e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
 8001dc0:	e000      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dc2:	bf00      	nop
    }
  }
}
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop

08001dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d108      	bne.n	8001e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e0a:	e007      	b.n	8001e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3b10      	subs	r3, #16
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <DMA_CalcBaseAndBitshift+0x64>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e42:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <DMA_CalcBaseAndBitshift+0x68>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d909      	bls.n	8001e6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e5e:	f023 0303 	bic.w	r3, r3, #3
 8001e62:	1d1a      	adds	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	659a      	str	r2, [r3, #88]	; 0x58
 8001e68:	e007      	b.n	8001e7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	aaaaaaab 	.word	0xaaaaaaab
 8001e90:	080053f4 	.word	0x080053f4

08001e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11f      	bne.n	8001eee <DMA_CheckFifoParam+0x5a>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d856      	bhi.n	8001f62 <DMA_CheckFifoParam+0xce>
 8001eb4:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <DMA_CheckFifoParam+0x28>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001edf 	.word	0x08001edf
 8001ec4:	08001ecd 	.word	0x08001ecd
 8001ec8:	08001f63 	.word	0x08001f63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d046      	beq.n	8001f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001edc:	e043      	b.n	8001f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee6:	d140      	bne.n	8001f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eec:	e03d      	b.n	8001f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef6:	d121      	bne.n	8001f3c <DMA_CheckFifoParam+0xa8>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d837      	bhi.n	8001f6e <DMA_CheckFifoParam+0xda>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <DMA_CheckFifoParam+0x70>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f1b 	.word	0x08001f1b
 8001f0c:	08001f15 	.word	0x08001f15
 8001f10:	08001f2d 	.word	0x08001f2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      break;
 8001f18:	e030      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d025      	beq.n	8001f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2a:	e022      	b.n	8001f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f34:	d11f      	bne.n	8001f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f3a:	e01c      	b.n	8001f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d903      	bls.n	8001f4a <DMA_CheckFifoParam+0xb6>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d003      	beq.n	8001f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f48:	e018      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f4e:	e015      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f60:	e00b      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;
 8001f62:	bf00      	nop
 8001f64:	e00a      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f66:	bf00      	nop
 8001f68:	e008      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6a:	bf00      	nop
 8001f6c:	e006      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6e:	bf00      	nop
 8001f70:	e004      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f72:	bf00      	nop
 8001f74:	e002      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f76:	bf00      	nop
 8001f78:	e000      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e159      	b.n	800225c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 8148 	bne.w	8002256 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d005      	beq.n	8001fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d130      	bne.n	8002040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0201 	and.w	r2, r3, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b03      	cmp	r3, #3
 800204a:	d017      	beq.n	800207c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d123      	bne.n	80020d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a2 	beq.w	8002256 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b57      	ldr	r3, [pc, #348]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b54      	ldr	r3, [pc, #336]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a49      	ldr	r2, [pc, #292]	; (800227c <HAL_GPIO_Init+0x2f0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x202>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a48      	ldr	r2, [pc, #288]	; (8002280 <HAL_GPIO_Init+0x2f4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x1fe>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a47      	ldr	r2, [pc, #284]	; (8002284 <HAL_GPIO_Init+0x2f8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x1fa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a46      	ldr	r2, [pc, #280]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x1f6>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a45      	ldr	r2, [pc, #276]	; (800228c <HAL_GPIO_Init+0x300>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x1f2>
 800217a:	2304      	movs	r3, #4
 800217c:	e008      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800217e:	2307      	movs	r3, #7
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x204>
 8002182:	2303      	movs	r3, #3
 8002184:	e004      	b.n	8002190 <HAL_GPIO_Init+0x204>
 8002186:	2302      	movs	r3, #2
 8002188:	e002      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800218e:	2300      	movs	r3, #0
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	f002 0203 	and.w	r2, r2, #3
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	4093      	lsls	r3, r2
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a0:	4935      	ldr	r1, [pc, #212]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ae:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d2:	4a2f      	ldr	r2, [pc, #188]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_GPIO_Init+0x304>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002250:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b0f      	cmp	r3, #15
 8002260:	f67f aea2 	bls.w	8001fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40013800 	.word	0x40013800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020400 	.word	0x40020400
 8002284:	40020800 	.word	0x40020800
 8002288:	40020c00 	.word	0x40020c00
 800228c:	40021000 	.word	0x40021000
 8002290:	40013c00 	.word	0x40013c00

08002294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e001      	b.n	80022b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fc9a 	bl	8000c50 <HAL_GPIO_EXTI_Callback>
  }
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e264      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d075      	beq.n	8002432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002346:	4ba3      	ldr	r3, [pc, #652]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d00c      	beq.n	800236c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002352:	4ba0      	ldr	r3, [pc, #640]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800235a:	2b08      	cmp	r3, #8
 800235c:	d112      	bne.n	8002384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235e:	4b9d      	ldr	r3, [pc, #628]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236a:	d10b      	bne.n	8002384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	4b99      	ldr	r3, [pc, #612]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d05b      	beq.n	8002430 <HAL_RCC_OscConfig+0x108>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d157      	bne.n	8002430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e23f      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x74>
 800238e:	4b91      	ldr	r3, [pc, #580]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a90      	ldr	r2, [pc, #576]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xb0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x98>
 80023a6:	4b8b      	ldr	r3, [pc, #556]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a8a      	ldr	r2, [pc, #552]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b88      	ldr	r3, [pc, #544]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a87      	ldr	r2, [pc, #540]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xb0>
 80023c0:	4b84      	ldr	r3, [pc, #528]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a83      	ldr	r2, [pc, #524]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b81      	ldr	r3, [pc, #516]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a80      	ldr	r2, [pc, #512]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff f890 	bl	8001504 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff f88c 	bl	8001504 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e204      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xc0>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff f87c 	bl	8001504 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff f878 	bl	8001504 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1f0      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b6c      	ldr	r3, [pc, #432]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0xe8>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243e:	4b65      	ldr	r3, [pc, #404]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244a:	4b62      	ldr	r3, [pc, #392]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002456:	4b5f      	ldr	r3, [pc, #380]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b5c      	ldr	r3, [pc, #368]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x152>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1c4      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4952      	ldr	r1, [pc, #328]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <HAL_RCC_OscConfig+0x2b0>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7ff f831 	bl	8001504 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a6:	f7ff f82d 	bl	8001504 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1a5      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4940      	ldr	r1, [pc, #256]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <HAL_RCC_OscConfig+0x2b0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff f810 	bl	8001504 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e8:	f7ff f80c 	bl	8001504 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e184      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d030      	beq.n	8002574 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_RCC_OscConfig+0x2b4>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe fff0 	bl	8001504 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe ffec 	bl	8001504 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e164      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x200>
 8002546:	e015      	b.n	8002574 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCC_OscConfig+0x2b4>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7fe ffd9 	bl	8001504 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002556:	f7fe ffd5 	bl	8001504 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e14d      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 800256a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80a0 	beq.w	80026c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x2b8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d121      	bne.n	8002602 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_RCC_OscConfig+0x2b8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fe ff9b 	bl	8001504 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	e011      	b.n	80025f6 <HAL_RCC_OscConfig+0x2ce>
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	42470000 	.word	0x42470000
 80025dc:	42470e80 	.word	0x42470e80
 80025e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e4:	f7fe ff8e 	bl	8001504 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e106      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	4b85      	ldr	r3, [pc, #532]	; (800280c <HAL_RCC_OscConfig+0x4e4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x2f0>
 800260a:	4b81      	ldr	r3, [pc, #516]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a80      	ldr	r2, [pc, #512]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
 8002616:	e01c      	b.n	8002652 <HAL_RCC_OscConfig+0x32a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d10c      	bne.n	800263a <HAL_RCC_OscConfig+0x312>
 8002620:	4b7b      	ldr	r3, [pc, #492]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a7a      	ldr	r2, [pc, #488]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	6713      	str	r3, [r2, #112]	; 0x70
 800262c:	4b78      	ldr	r3, [pc, #480]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	4a77      	ldr	r2, [pc, #476]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6713      	str	r3, [r2, #112]	; 0x70
 8002638:	e00b      	b.n	8002652 <HAL_RCC_OscConfig+0x32a>
 800263a:	4b75      	ldr	r3, [pc, #468]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a74      	ldr	r2, [pc, #464]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	4b72      	ldr	r3, [pc, #456]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a71      	ldr	r2, [pc, #452]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d015      	beq.n	8002686 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe ff53 	bl	8001504 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7fe ff4f 	bl	8001504 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0c5      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002678:	4b65      	ldr	r3, [pc, #404]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ee      	beq.n	8002662 <HAL_RCC_OscConfig+0x33a>
 8002684:	e014      	b.n	80026b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7fe ff3d 	bl	8001504 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe ff39 	bl	8001504 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0af      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a4:	4b5a      	ldr	r3, [pc, #360]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ee      	bne.n	800268e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b6:	4b56      	ldr	r3, [pc, #344]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a55      	ldr	r2, [pc, #340]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 809b 	beq.w	8002802 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d05c      	beq.n	8002792 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d141      	bne.n	8002764 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e0:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_OscConfig+0x4ec>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe ff0d 	bl	8001504 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe ff09 	bl	8001504 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e081      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002700:	4b43      	ldr	r3, [pc, #268]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	019b      	lsls	r3, r3, #6
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	3b01      	subs	r3, #1
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	061b      	lsls	r3, r3, #24
 8002730:	4937      	ldr	r1, [pc, #220]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <HAL_RCC_OscConfig+0x4ec>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fee2 	bl	8001504 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002744:	f7fe fede 	bl	8001504 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e056      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x41c>
 8002762:	e04e      	b.n	8002802 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <HAL_RCC_OscConfig+0x4ec>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe fecb 	bl	8001504 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fec7 	bl	8001504 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e03f      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x44a>
 8002790:	e037      	b.n	8002802 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e032      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_RCC_OscConfig+0x4e8>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d028      	beq.n	80027fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d121      	bne.n	80027fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d11a      	bne.n	80027fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027ce:	4013      	ands	r3, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d111      	bne.n	80027fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40007000 	.word	0x40007000
 8002810:	40023800 	.word	0x40023800
 8002814:	42470060 	.word	0x42470060

08002818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0cc      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d90c      	bls.n	8002854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800288e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d044      	beq.n	8002938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d119      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e6:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e067      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b37      	ldr	r3, [pc, #220]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4934      	ldr	r1, [pc, #208]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002908:	f7fe fdfc 	bl	8001504 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fdf8 	bl	8001504 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e04f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 020c 	and.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	429a      	cmp	r2, r3
 8002936:	d1eb      	bne.n	8002910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002938:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d20c      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490a      	ldr	r1, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fd5c 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023c00 	.word	0x40023c00
 80029d4:	40023800 	.word	0x40023800
 80029d8:	080053dc 	.word	0x080053dc
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	2300      	movs	r3, #0
 80029f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029fc:	4b67      	ldr	r3, [pc, #412]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d00d      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x40>
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	f200 80bd 	bhi.w	8002b88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x34>
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a16:	e0b7      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b61      	ldr	r3, [pc, #388]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a1a:	60bb      	str	r3, [r7, #8]
       break;
 8002a1c:	e0b7      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1e:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a20:	60bb      	str	r3, [r7, #8]
      break;
 8002a22:	e0b4      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a24:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2e:	4b5b      	ldr	r3, [pc, #364]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d04d      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3a:	4b58      	ldr	r3, [pc, #352]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	461a      	mov	r2, r3
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	ea02 0800 	and.w	r8, r2, r0
 8002a52:	ea03 0901 	and.w	r9, r3, r1
 8002a56:	4640      	mov	r0, r8
 8002a58:	4649      	mov	r1, r9
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	014b      	lsls	r3, r1, #5
 8002a64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a68:	0142      	lsls	r2, r0, #5
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	ebb0 0008 	subs.w	r0, r0, r8
 8002a72:	eb61 0109 	sbc.w	r1, r1, r9
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	018b      	lsls	r3, r1, #6
 8002a80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a84:	0182      	lsls	r2, r0, #6
 8002a86:	1a12      	subs	r2, r2, r0
 8002a88:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8c:	f04f 0000 	mov.w	r0, #0
 8002a90:	f04f 0100 	mov.w	r1, #0
 8002a94:	00d9      	lsls	r1, r3, #3
 8002a96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a9a:	00d0      	lsls	r0, r2, #3
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	eb12 0208 	adds.w	r2, r2, r8
 8002aa4:	eb43 0309 	adc.w	r3, r3, r9
 8002aa8:	f04f 0000 	mov.w	r0, #0
 8002aac:	f04f 0100 	mov.w	r1, #0
 8002ab0:	0259      	lsls	r1, r3, #9
 8002ab2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ab6:	0250      	lsls	r0, r2, #9
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	f7fd fbf2 	bl	80002b0 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e04a      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	461a      	mov	r2, r3
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	ea02 0400 	and.w	r4, r2, r0
 8002aee:	ea03 0501 	and.w	r5, r3, r1
 8002af2:	4620      	mov	r0, r4
 8002af4:	4629      	mov	r1, r5
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	014b      	lsls	r3, r1, #5
 8002b00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b04:	0142      	lsls	r2, r0, #5
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	1b00      	subs	r0, r0, r4
 8002b0c:	eb61 0105 	sbc.w	r1, r1, r5
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	018b      	lsls	r3, r1, #6
 8002b1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b1e:	0182      	lsls	r2, r0, #6
 8002b20:	1a12      	subs	r2, r2, r0
 8002b22:	eb63 0301 	sbc.w	r3, r3, r1
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	00d9      	lsls	r1, r3, #3
 8002b30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b34:	00d0      	lsls	r0, r2, #3
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	1912      	adds	r2, r2, r4
 8002b3c:	eb45 0303 	adc.w	r3, r5, r3
 8002b40:	f04f 0000 	mov.w	r0, #0
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	0299      	lsls	r1, r3, #10
 8002b4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b4e:	0290      	lsls	r0, r2, #10
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	f7fd fba6 	bl	80002b0 <__aeabi_uldivmod>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4613      	mov	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	3301      	adds	r3, #1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	60bb      	str	r3, [r7, #8]
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b8a:	60bb      	str	r3, [r7, #8]
      break;
 8002b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200

08002ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000000 	.word	0x20000000

08002bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc4:	f7ff fff0 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	0a9b      	lsrs	r3, r3, #10
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4903      	ldr	r1, [pc, #12]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	080053ec 	.word	0x080053ec

08002be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bec:	f7ff ffdc 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0b5b      	lsrs	r3, r3, #13
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4903      	ldr	r1, [pc, #12]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	080053ec 	.word	0x080053ec

08002c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e03f      	b.n	8002ca2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe fb26 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	; 0x24
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 ff97 	bl	8003b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b08a      	sub	sp, #40	; 0x28
 8002cae:	af02      	add	r7, sp, #8
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d17c      	bne.n	8002dc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_UART_Transmit+0x2c>
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e075      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_UART_Transmit+0x3e>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e06e      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2221      	movs	r2, #33	; 0x21
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cfe:	f7fe fc01 	bl	8001504 <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d18:	d108      	bne.n	8002d2c <HAL_UART_Transmit+0x82>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e003      	b.n	8002d34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d3c:	e02a      	b.n	8002d94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2180      	movs	r1, #128	; 0x80
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fc53 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e036      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	3302      	adds	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	e007      	b.n	8002d86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	3301      	adds	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1cf      	bne.n	8002d3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fc23 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e006      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b08c      	sub	sp, #48	; 0x30
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d152      	bne.n	8002e8e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e04b      	b.n	8002e90 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e044      	b.n	8002e90 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fc58 	bl	80036d0 <UART_Start_Receive_DMA>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d12c      	bne.n	8002e88 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d125      	bne.n	8002e82 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f043 0310 	orr.w	r3, r3, #16
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6c:	627a      	str	r2, [r7, #36]	; 0x24
 8002e6e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	6a39      	ldr	r1, [r7, #32]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e5      	bne.n	8002e4c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002e80:	e002      	b.n	8002e88 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e8c:	e000      	b.n	8002e90 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3730      	adds	r7, #48	; 0x30
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b0ba      	sub	sp, #232	; 0xe8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10f      	bne.n	8002efe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_UART_IRQHandler+0x66>
 8002eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fd8b 	bl	8003a12 <UART_Receive_IT>
      return;
 8002efc:	e256      	b.n	80033ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80de 	beq.w	80030c4 <HAL_UART_IRQHandler+0x22c>
 8002f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80d1 	beq.w	80030c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_UART_IRQHandler+0xae>
 8002f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_UART_IRQHandler+0xd2>
 8002f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f043 0202 	orr.w	r2, r3, #2
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_UART_IRQHandler+0xf6>
 8002f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f043 0204 	orr.w	r2, r3, #4
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d011      	beq.n	8002fbe <HAL_UART_IRQHandler+0x126>
 8002f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0208 	orr.w	r2, r3, #8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 81ed 	beq.w	80033a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x14e>
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fd16 	bl	8003a12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b40      	cmp	r3, #64	; 0x40
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <HAL_UART_IRQHandler+0x17a>
 800300a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d04f      	beq.n	80030b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fc1e 	bl	8003854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	d141      	bne.n	80030aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3314      	adds	r3, #20
 800302c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800303c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003052:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800305e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800306a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1d9      	bne.n	8003026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	2b00      	cmp	r3, #0
 8003078:	d013      	beq.n	80030a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	4a7d      	ldr	r2, [pc, #500]	; (8003274 <HAL_UART_IRQHandler+0x3dc>)
 8003080:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fcf4 	bl	8001a74 <HAL_DMA_Abort_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800309c:	4610      	mov	r0, r2
 800309e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a0:	e00e      	b.n	80030c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f9a4 	bl	80033f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	e00a      	b.n	80030c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9a0 	bl	80033f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	e006      	b.n	80030c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f99c 	bl	80033f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030be:	e170      	b.n	80033a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	bf00      	nop
    return;
 80030c2:	e16e      	b.n	80033a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	f040 814a 	bne.w	8003362 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8143 	beq.w	8003362 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 813c 	beq.w	8003362 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	f040 80b4 	bne.w	8003278 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800311c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8140 	beq.w	80033a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800312a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800312e:	429a      	cmp	r2, r3
 8003130:	f080 8139 	bcs.w	80033a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800313a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003146:	f000 8088 	beq.w	800325a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800317a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003182:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800318e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1d9      	bne.n	800314a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3314      	adds	r3, #20
 800319c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3314      	adds	r3, #20
 80031b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e1      	bne.n	8003196 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3314      	adds	r3, #20
 80031d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3314      	adds	r3, #20
 80031f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e3      	bne.n	80031d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322a:	f023 0310 	bic.w	r3, r3, #16
 800322e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	330c      	adds	r3, #12
 8003238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800323c:	65ba      	str	r2, [r7, #88]	; 0x58
 800323e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800324a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e3      	bne.n	8003218 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fb9d 	bl	8001994 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003262:	b29b      	uxth	r3, r3
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fcde 	bl	8000c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003270:	e099      	b.n	80033a6 <HAL_UART_IRQHandler+0x50e>
 8003272:	bf00      	nop
 8003274:	0800391b 	.word	0x0800391b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003280:	b29b      	uxth	r3, r3
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 808b 	beq.w	80033aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8086 	beq.w	80033aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80032c2:	647a      	str	r2, [r7, #68]	; 0x44
 80032c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e3      	bne.n	800329e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3314      	adds	r3, #20
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	623b      	str	r3, [r7, #32]
   return(result);
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3314      	adds	r3, #20
 80032f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032fa:	633a      	str	r2, [r7, #48]	; 0x30
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e3      	bne.n	80032d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	60fb      	str	r3, [r7, #12]
   return(result);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0310 	bic.w	r3, r3, #16
 8003332:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	330c      	adds	r3, #12
 800333c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003340:	61fa      	str	r2, [r7, #28]
 8003342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	69b9      	ldr	r1, [r7, #24]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	e841 2300 	strex	r3, r2, [r1]
 800334c:	617b      	str	r3, [r7, #20]
   return(result);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e3      	bne.n	800331c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd fc66 	bl	8000c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003360:	e023      	b.n	80033aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_UART_IRQHandler+0x4ea>
 800336e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fae1 	bl	8003942 <UART_Transmit_IT>
    return;
 8003380:	e014      	b.n	80033ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00e      	beq.n	80033ac <HAL_UART_IRQHandler+0x514>
 800338e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fb21 	bl	80039e2 <UART_EndTransmit_IT>
    return;
 80033a0:	e004      	b.n	80033ac <HAL_UART_IRQHandler+0x514>
    return;
 80033a2:	bf00      	nop
 80033a4:	e002      	b.n	80033ac <HAL_UART_IRQHandler+0x514>
      return;
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <HAL_UART_IRQHandler+0x514>
      return;
 80033aa:	bf00      	nop
  }
}
 80033ac:	37e8      	adds	r7, #232	; 0xe8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop

080033b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b09c      	sub	sp, #112	; 0x70
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d172      	bne.n	8003506 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003422:	2200      	movs	r2, #0
 8003424:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	330c      	adds	r3, #12
 800342c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800343c:	66bb      	str	r3, [r7, #104]	; 0x68
 800343e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003446:	65ba      	str	r2, [r7, #88]	; 0x58
 8003448:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800344c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e5      	bne.n	8003426 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3314      	adds	r3, #20
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	667b      	str	r3, [r7, #100]	; 0x64
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3314      	adds	r3, #20
 8003478:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800347a:	647a      	str	r2, [r7, #68]	; 0x44
 800347c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e5      	bne.n	800345a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3314      	adds	r3, #20
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	623b      	str	r3, [r7, #32]
   return(result);
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a4:	663b      	str	r3, [r7, #96]	; 0x60
 80034a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3314      	adds	r3, #20
 80034ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034ae:	633a      	str	r2, [r7, #48]	; 0x30
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e5      	bne.n	800348e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d119      	bne.n	8003506 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 0310 	bic.w	r3, r3, #16
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034f2:	61fa      	str	r2, [r7, #28]
 80034f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e5      	bne.n	80034d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	2b01      	cmp	r3, #1
 800350c:	d106      	bne.n	800351c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800350e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003512:	4619      	mov	r1, r3
 8003514:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003516:	f7fd fb89 	bl	8000c2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800351a:	e002      	b.n	8003522 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800351c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800351e:	f7ff ff53 	bl	80033c8 <HAL_UART_RxCpltCallback>
}
 8003522:	bf00      	nop
 8003524:	3770      	adds	r7, #112	; 0x70
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	2b01      	cmp	r3, #1
 800353e:	d108      	bne.n	8003552 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	b29b      	uxth	r3, r3
 8003548:	4619      	mov	r1, r3
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7fd fb6e 	bl	8000c2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003550:	e002      	b.n	8003558 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff ff42 	bl	80033dc <HAL_UART_RxHalfCpltCallback>
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b21      	cmp	r3, #33	; 0x21
 8003592:	d108      	bne.n	80035a6 <UART_DMAError+0x46>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2200      	movs	r2, #0
 800359e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80035a0:	68b8      	ldr	r0, [r7, #8]
 80035a2:	f000 f92f 	bl	8003804 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b22      	cmp	r3, #34	; 0x22
 80035c6:	d108      	bne.n	80035da <UART_DMAError+0x7a>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2200      	movs	r2, #0
 80035d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80035d4:	68b8      	ldr	r0, [r7, #8]
 80035d6:	f000 f93d 	bl	8003854 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f043 0210 	orr.w	r2, r3, #16
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035e6:	68b8      	ldr	r0, [r7, #8]
 80035e8:	f7ff ff02 	bl	80033f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b090      	sub	sp, #64	; 0x40
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003604:	e050      	b.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d04c      	beq.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800360e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003610:	2b00      	cmp	r3, #0
 8003612:	d007      	beq.n	8003624 <UART_WaitOnFlagUntilTimeout+0x30>
 8003614:	f7fd ff76 	bl	8001504 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003620:	429a      	cmp	r2, r3
 8003622:	d241      	bcs.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003644:	637a      	str	r2, [r7, #52]	; 0x34
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800364a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	613b      	str	r3, [r7, #16]
   return(result);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3314      	adds	r3, #20
 8003676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003678:	623a      	str	r2, [r7, #32]
 800367a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	69f9      	ldr	r1, [r7, #28]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	61bb      	str	r3, [r7, #24]
   return(result);
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e00f      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d09f      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3740      	adds	r7, #64	; 0x40
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b098      	sub	sp, #96	; 0x60
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	88fa      	ldrh	r2, [r7, #6]
 80036e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2222      	movs	r2, #34	; 0x22
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	4a3e      	ldr	r2, [pc, #248]	; (80037f8 <UART_Start_Receive_DMA+0x128>)
 80036fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	4a3d      	ldr	r2, [pc, #244]	; (80037fc <UART_Start_Receive_DMA+0x12c>)
 8003706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	4a3c      	ldr	r2, [pc, #240]	; (8003800 <UART_Start_Receive_DMA+0x130>)
 800370e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	2200      	movs	r2, #0
 8003716:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003718:	f107 0308 	add.w	r3, r7, #8
 800371c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3304      	adds	r3, #4
 8003728:	4619      	mov	r1, r3
 800372a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	f7fe f8d8 	bl	80018e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003768:	65bb      	str	r3, [r7, #88]	; 0x58
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003772:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003774:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e5      	bne.n	8003752 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	657b      	str	r3, [r7, #84]	; 0x54
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e5      	bne.n	8003786 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3314      	adds	r3, #20
 80037c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	617b      	str	r3, [r7, #20]
   return(result);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d0:	653b      	str	r3, [r7, #80]	; 0x50
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3314      	adds	r3, #20
 80037d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037da:	627a      	str	r2, [r7, #36]	; 0x24
 80037dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6a39      	ldr	r1, [r7, #32]
 80037e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e5      	bne.n	80037ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3760      	adds	r7, #96	; 0x60
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	08003405 	.word	0x08003405
 80037fc:	0800352b 	.word	0x0800352b
 8003800:	08003561 	.word	0x08003561

08003804 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	60bb      	str	r3, [r7, #8]
   return(result);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	61ba      	str	r2, [r7, #24]
 800382e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6979      	ldr	r1, [r7, #20]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	613b      	str	r3, [r7, #16]
   return(result);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e5      	bne.n	800380c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003848:	bf00      	nop
 800384a:	3724      	adds	r7, #36	; 0x24
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b095      	sub	sp, #84	; 0x54
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800387c:	643a      	str	r2, [r7, #64]	; 0x40
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d119      	bne.n	8003900 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	60bb      	str	r3, [r7, #8]
   return(result);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f023 0310 	bic.w	r3, r3, #16
 80038e2:	647b      	str	r3, [r7, #68]	; 0x44
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038ec:	61ba      	str	r2, [r7, #24]
 80038ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	6979      	ldr	r1, [r7, #20]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	613b      	str	r3, [r7, #16]
   return(result);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800390e:	bf00      	nop
 8003910:	3754      	adds	r7, #84	; 0x54
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fd5b 	bl	80033f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b21      	cmp	r3, #33	; 0x21
 8003954:	d13e      	bne.n	80039d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	d114      	bne.n	800398a <UART_Transmit_IT+0x48>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d110      	bne.n	800398a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800397c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]
 8003988:	e008      	b.n	800399c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	1c59      	adds	r1, r3, #1
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6211      	str	r1, [r2, #32]
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4619      	mov	r1, r3
 80039aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10f      	bne.n	80039d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fcd6 	bl	80033b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b08c      	sub	sp, #48	; 0x30
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b22      	cmp	r3, #34	; 0x22
 8003a24:	f040 80ab 	bne.w	8003b7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d117      	bne.n	8003a62 <UART_Receive_IT+0x50>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d113      	bne.n	8003a62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a60:	e026      	b.n	8003ab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a74:	d007      	beq.n	8003a86 <UART_Receive_IT+0x74>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <UART_Receive_IT+0x82>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e008      	b.n	8003aa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4619      	mov	r1, r3
 8003abe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d15a      	bne.n	8003b7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0220 	bic.w	r2, r2, #32
 8003ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d135      	bne.n	8003b70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f023 0310 	bic.w	r3, r3, #16
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2a:	623a      	str	r2, [r7, #32]
 8003b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	69f9      	ldr	r1, [r7, #28]
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e5      	bne.n	8003b0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d10a      	bne.n	8003b62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7fd f85f 	bl	8000c2c <HAL_UARTEx_RxEventCallback>
 8003b6e:	e002      	b.n	8003b76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fc29 	bl	80033c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e002      	b.n	8003b80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3730      	adds	r7, #48	; 0x30
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	b09f      	sub	sp, #124	; 0x7c
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	68d9      	ldr	r1, [r3, #12]
 8003ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	ea40 0301 	orr.w	r3, r0, r1
 8003ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bcc:	f021 010c 	bic.w	r1, r1, #12
 8003bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be6:	6999      	ldr	r1, [r3, #24]
 8003be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	ea40 0301 	orr.w	r3, r0, r1
 8003bf0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4bc5      	ldr	r3, [pc, #788]	; (8003f0c <UART_SetConfig+0x384>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d004      	beq.n	8003c06 <UART_SetConfig+0x7e>
 8003bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4bc3      	ldr	r3, [pc, #780]	; (8003f10 <UART_SetConfig+0x388>)
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d103      	bne.n	8003c0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c06:	f7fe ffef 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8003c0a:	6778      	str	r0, [r7, #116]	; 0x74
 8003c0c:	e002      	b.n	8003c14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c0e:	f7fe ffd7 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 8003c12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1c:	f040 80b6 	bne.w	8003d8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c22:	461c      	mov	r4, r3
 8003c24:	f04f 0500 	mov.w	r5, #0
 8003c28:	4622      	mov	r2, r4
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	1891      	adds	r1, r2, r2
 8003c2e:	6439      	str	r1, [r7, #64]	; 0x40
 8003c30:	415b      	adcs	r3, r3
 8003c32:	647b      	str	r3, [r7, #68]	; 0x44
 8003c34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c38:	1912      	adds	r2, r2, r4
 8003c3a:	eb45 0303 	adc.w	r3, r5, r3
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	00d9      	lsls	r1, r3, #3
 8003c48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c4c:	00d0      	lsls	r0, r2, #3
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	1911      	adds	r1, r2, r4
 8003c54:	6639      	str	r1, [r7, #96]	; 0x60
 8003c56:	416b      	adcs	r3, r5
 8003c58:	667b      	str	r3, [r7, #100]	; 0x64
 8003c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c74:	f7fc fb1c 	bl	80002b0 <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4ba5      	ldr	r3, [pc, #660]	; (8003f14 <UART_SetConfig+0x38c>)
 8003c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	011e      	lsls	r6, r3, #4
 8003c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c88:	461c      	mov	r4, r3
 8003c8a:	f04f 0500 	mov.w	r5, #0
 8003c8e:	4622      	mov	r2, r4
 8003c90:	462b      	mov	r3, r5
 8003c92:	1891      	adds	r1, r2, r2
 8003c94:	6339      	str	r1, [r7, #48]	; 0x30
 8003c96:	415b      	adcs	r3, r3
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c9e:	1912      	adds	r2, r2, r4
 8003ca0:	eb45 0303 	adc.w	r3, r5, r3
 8003ca4:	f04f 0000 	mov.w	r0, #0
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	00d9      	lsls	r1, r3, #3
 8003cae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cb2:	00d0      	lsls	r0, r2, #3
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	1911      	adds	r1, r2, r4
 8003cba:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cbc:	416b      	adcs	r3, r5
 8003cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	1891      	adds	r1, r2, r2
 8003ccc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cce:	415b      	adcs	r3, r3
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003cda:	f7fc fae9 	bl	80002b0 <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4b8c      	ldr	r3, [pc, #560]	; (8003f14 <UART_SetConfig+0x38c>)
 8003ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	2164      	movs	r1, #100	; 0x64
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	3332      	adds	r3, #50	; 0x32
 8003cf6:	4a87      	ldr	r2, [pc, #540]	; (8003f14 <UART_SetConfig+0x38c>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d04:	441e      	add	r6, r3
 8003d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	1894      	adds	r4, r2, r2
 8003d14:	623c      	str	r4, [r7, #32]
 8003d16:	415b      	adcs	r3, r3
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d1e:	1812      	adds	r2, r2, r0
 8003d20:	eb41 0303 	adc.w	r3, r1, r3
 8003d24:	f04f 0400 	mov.w	r4, #0
 8003d28:	f04f 0500 	mov.w	r5, #0
 8003d2c:	00dd      	lsls	r5, r3, #3
 8003d2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d32:	00d4      	lsls	r4, r2, #3
 8003d34:	4622      	mov	r2, r4
 8003d36:	462b      	mov	r3, r5
 8003d38:	1814      	adds	r4, r2, r0
 8003d3a:	653c      	str	r4, [r7, #80]	; 0x50
 8003d3c:	414b      	adcs	r3, r1
 8003d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	1891      	adds	r1, r2, r2
 8003d4c:	61b9      	str	r1, [r7, #24]
 8003d4e:	415b      	adcs	r3, r3
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d5a:	f7fc faa9 	bl	80002b0 <__aeabi_uldivmod>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4b6c      	ldr	r3, [pc, #432]	; (8003f14 <UART_SetConfig+0x38c>)
 8003d64:	fba3 1302 	umull	r1, r3, r3, r2
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	2164      	movs	r1, #100	; 0x64
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	3332      	adds	r3, #50	; 0x32
 8003d76:	4a67      	ldr	r2, [pc, #412]	; (8003f14 <UART_SetConfig+0x38c>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	f003 0207 	and.w	r2, r3, #7
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4432      	add	r2, r6
 8003d88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d8a:	e0b9      	b.n	8003f00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8e:	461c      	mov	r4, r3
 8003d90:	f04f 0500 	mov.w	r5, #0
 8003d94:	4622      	mov	r2, r4
 8003d96:	462b      	mov	r3, r5
 8003d98:	1891      	adds	r1, r2, r2
 8003d9a:	6139      	str	r1, [r7, #16]
 8003d9c:	415b      	adcs	r3, r3
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003da4:	1912      	adds	r2, r2, r4
 8003da6:	eb45 0303 	adc.w	r3, r5, r3
 8003daa:	f04f 0000 	mov.w	r0, #0
 8003dae:	f04f 0100 	mov.w	r1, #0
 8003db2:	00d9      	lsls	r1, r3, #3
 8003db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003db8:	00d0      	lsls	r0, r2, #3
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	eb12 0804 	adds.w	r8, r2, r4
 8003dc2:	eb43 0905 	adc.w	r9, r3, r5
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	008b      	lsls	r3, r1, #2
 8003dda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dde:	0082      	lsls	r2, r0, #2
 8003de0:	4640      	mov	r0, r8
 8003de2:	4649      	mov	r1, r9
 8003de4:	f7fc fa64 	bl	80002b0 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <UART_SetConfig+0x38c>)
 8003dee:	fba3 2302 	umull	r2, r3, r3, r2
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	011e      	lsls	r6, r3, #4
 8003df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	1894      	adds	r4, r2, r2
 8003e04:	60bc      	str	r4, [r7, #8]
 8003e06:	415b      	adcs	r3, r3
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e0e:	1812      	adds	r2, r2, r0
 8003e10:	eb41 0303 	adc.w	r3, r1, r3
 8003e14:	f04f 0400 	mov.w	r4, #0
 8003e18:	f04f 0500 	mov.w	r5, #0
 8003e1c:	00dd      	lsls	r5, r3, #3
 8003e1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e22:	00d4      	lsls	r4, r2, #3
 8003e24:	4622      	mov	r2, r4
 8003e26:	462b      	mov	r3, r5
 8003e28:	1814      	adds	r4, r2, r0
 8003e2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e2c:	414b      	adcs	r3, r1
 8003e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f04f 0100 	mov.w	r1, #0
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	008b      	lsls	r3, r1, #2
 8003e44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e48:	0082      	lsls	r2, r0, #2
 8003e4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e4e:	f7fc fa2f 	bl	80002b0 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <UART_SetConfig+0x38c>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	; 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	3332      	adds	r3, #50	; 0x32
 8003e6a:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <UART_SetConfig+0x38c>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e76:	441e      	add	r6, r3
 8003e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f04f 0100 	mov.w	r1, #0
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	1894      	adds	r4, r2, r2
 8003e86:	603c      	str	r4, [r7, #0]
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e90:	1812      	adds	r2, r2, r0
 8003e92:	eb41 0303 	adc.w	r3, r1, r3
 8003e96:	f04f 0400 	mov.w	r4, #0
 8003e9a:	f04f 0500 	mov.w	r5, #0
 8003e9e:	00dd      	lsls	r5, r3, #3
 8003ea0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ea4:	00d4      	lsls	r4, r2, #3
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	eb12 0a00 	adds.w	sl, r2, r0
 8003eae:	eb43 0b01 	adc.w	fp, r3, r1
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f04f 0100 	mov.w	r1, #0
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	008b      	lsls	r3, r1, #2
 8003ec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eca:	0082      	lsls	r2, r0, #2
 8003ecc:	4650      	mov	r0, sl
 8003ece:	4659      	mov	r1, fp
 8003ed0:	f7fc f9ee 	bl	80002b0 <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <UART_SetConfig+0x38c>)
 8003eda:	fba3 1302 	umull	r1, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2164      	movs	r1, #100	; 0x64
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	3332      	adds	r3, #50	; 0x32
 8003eec:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <UART_SetConfig+0x38c>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	f003 020f 	and.w	r2, r3, #15
 8003ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4432      	add	r2, r6
 8003efe:	609a      	str	r2, [r3, #8]
}
 8003f00:	bf00      	nop
 8003f02:	377c      	adds	r7, #124	; 0x7c
 8003f04:	46bd      	mov	sp, r7
 8003f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40011000 	.word	0x40011000
 8003f10:	40011400 	.word	0x40011400
 8003f14:	51eb851f 	.word	0x51eb851f

08003f18 <__errno>:
 8003f18:	4b01      	ldr	r3, [pc, #4]	; (8003f20 <__errno+0x8>)
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	2000000c 	.word	0x2000000c

08003f24 <__libc_init_array>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	4d0d      	ldr	r5, [pc, #52]	; (8003f5c <__libc_init_array+0x38>)
 8003f28:	4c0d      	ldr	r4, [pc, #52]	; (8003f60 <__libc_init_array+0x3c>)
 8003f2a:	1b64      	subs	r4, r4, r5
 8003f2c:	10a4      	asrs	r4, r4, #2
 8003f2e:	2600      	movs	r6, #0
 8003f30:	42a6      	cmp	r6, r4
 8003f32:	d109      	bne.n	8003f48 <__libc_init_array+0x24>
 8003f34:	4d0b      	ldr	r5, [pc, #44]	; (8003f64 <__libc_init_array+0x40>)
 8003f36:	4c0c      	ldr	r4, [pc, #48]	; (8003f68 <__libc_init_array+0x44>)
 8003f38:	f001 f846 	bl	8004fc8 <_init>
 8003f3c:	1b64      	subs	r4, r4, r5
 8003f3e:	10a4      	asrs	r4, r4, #2
 8003f40:	2600      	movs	r6, #0
 8003f42:	42a6      	cmp	r6, r4
 8003f44:	d105      	bne.n	8003f52 <__libc_init_array+0x2e>
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4c:	4798      	blx	r3
 8003f4e:	3601      	adds	r6, #1
 8003f50:	e7ee      	b.n	8003f30 <__libc_init_array+0xc>
 8003f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f56:	4798      	blx	r3
 8003f58:	3601      	adds	r6, #1
 8003f5a:	e7f2      	b.n	8003f42 <__libc_init_array+0x1e>
 8003f5c:	08005550 	.word	0x08005550
 8003f60:	08005550 	.word	0x08005550
 8003f64:	08005550 	.word	0x08005550
 8003f68:	08005554 	.word	0x08005554

08003f6c <memset>:
 8003f6c:	4402      	add	r2, r0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d100      	bne.n	8003f76 <memset+0xa>
 8003f74:	4770      	bx	lr
 8003f76:	f803 1b01 	strb.w	r1, [r3], #1
 8003f7a:	e7f9      	b.n	8003f70 <memset+0x4>

08003f7c <strcpy>:
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f82:	f803 2b01 	strb.w	r2, [r3], #1
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	d1f9      	bne.n	8003f7e <strcpy+0x2>
 8003f8a:	4770      	bx	lr

08003f8c <strtok>:
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <strtok+0x5c>)
 8003f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f90:	681e      	ldr	r6, [r3, #0]
 8003f92:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003f94:	4605      	mov	r5, r0
 8003f96:	b9fc      	cbnz	r4, 8003fd8 <strtok+0x4c>
 8003f98:	2050      	movs	r0, #80	; 0x50
 8003f9a:	9101      	str	r1, [sp, #4]
 8003f9c:	f000 f882 	bl	80040a4 <malloc>
 8003fa0:	9901      	ldr	r1, [sp, #4]
 8003fa2:	65b0      	str	r0, [r6, #88]	; 0x58
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	b920      	cbnz	r0, 8003fb2 <strtok+0x26>
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <strtok+0x60>)
 8003faa:	4811      	ldr	r0, [pc, #68]	; (8003ff0 <strtok+0x64>)
 8003fac:	2157      	movs	r1, #87	; 0x57
 8003fae:	f000 f849 	bl	8004044 <__assert_func>
 8003fb2:	e9c0 4400 	strd	r4, r4, [r0]
 8003fb6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003fba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003fbe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003fc2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003fc6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003fca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003fce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003fd2:	6184      	str	r4, [r0, #24]
 8003fd4:	7704      	strb	r4, [r0, #28]
 8003fd6:	6244      	str	r4, [r0, #36]	; 0x24
 8003fd8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4628      	mov	r0, r5
 8003fde:	b002      	add	sp, #8
 8003fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003fe4:	f000 b806 	b.w	8003ff4 <__strtok_r>
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	08005400 	.word	0x08005400
 8003ff0:	08005417 	.word	0x08005417

08003ff4 <__strtok_r>:
 8003ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff6:	b908      	cbnz	r0, 8003ffc <__strtok_r+0x8>
 8003ff8:	6810      	ldr	r0, [r2, #0]
 8003ffa:	b188      	cbz	r0, 8004020 <__strtok_r+0x2c>
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	4620      	mov	r0, r4
 8004000:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004004:	460f      	mov	r7, r1
 8004006:	f817 6b01 	ldrb.w	r6, [r7], #1
 800400a:	b91e      	cbnz	r6, 8004014 <__strtok_r+0x20>
 800400c:	b965      	cbnz	r5, 8004028 <__strtok_r+0x34>
 800400e:	6015      	str	r5, [r2, #0]
 8004010:	4628      	mov	r0, r5
 8004012:	e005      	b.n	8004020 <__strtok_r+0x2c>
 8004014:	42b5      	cmp	r5, r6
 8004016:	d1f6      	bne.n	8004006 <__strtok_r+0x12>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <__strtok_r+0xa>
 800401c:	6014      	str	r4, [r2, #0]
 800401e:	7003      	strb	r3, [r0, #0]
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004022:	461c      	mov	r4, r3
 8004024:	e00c      	b.n	8004040 <__strtok_r+0x4c>
 8004026:	b915      	cbnz	r5, 800402e <__strtok_r+0x3a>
 8004028:	f814 3b01 	ldrb.w	r3, [r4], #1
 800402c:	460e      	mov	r6, r1
 800402e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004032:	42ab      	cmp	r3, r5
 8004034:	d1f7      	bne.n	8004026 <__strtok_r+0x32>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f3      	beq.n	8004022 <__strtok_r+0x2e>
 800403a:	2300      	movs	r3, #0
 800403c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004040:	6014      	str	r4, [r2, #0]
 8004042:	e7ed      	b.n	8004020 <__strtok_r+0x2c>

08004044 <__assert_func>:
 8004044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004046:	4614      	mov	r4, r2
 8004048:	461a      	mov	r2, r3
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <__assert_func+0x2c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4605      	mov	r5, r0
 8004050:	68d8      	ldr	r0, [r3, #12]
 8004052:	b14c      	cbz	r4, 8004068 <__assert_func+0x24>
 8004054:	4b07      	ldr	r3, [pc, #28]	; (8004074 <__assert_func+0x30>)
 8004056:	9100      	str	r1, [sp, #0]
 8004058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800405c:	4906      	ldr	r1, [pc, #24]	; (8004078 <__assert_func+0x34>)
 800405e:	462b      	mov	r3, r5
 8004060:	f000 f80e 	bl	8004080 <fiprintf>
 8004064:	f000 fc8e 	bl	8004984 <abort>
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <__assert_func+0x38>)
 800406a:	461c      	mov	r4, r3
 800406c:	e7f3      	b.n	8004056 <__assert_func+0x12>
 800406e:	bf00      	nop
 8004070:	2000000c 	.word	0x2000000c
 8004074:	08005478 	.word	0x08005478
 8004078:	08005485 	.word	0x08005485
 800407c:	080054b3 	.word	0x080054b3

08004080 <fiprintf>:
 8004080:	b40e      	push	{r1, r2, r3}
 8004082:	b503      	push	{r0, r1, lr}
 8004084:	4601      	mov	r1, r0
 8004086:	ab03      	add	r3, sp, #12
 8004088:	4805      	ldr	r0, [pc, #20]	; (80040a0 <fiprintf+0x20>)
 800408a:	f853 2b04 	ldr.w	r2, [r3], #4
 800408e:	6800      	ldr	r0, [r0, #0]
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	f000 f8e3 	bl	800425c <_vfiprintf_r>
 8004096:	b002      	add	sp, #8
 8004098:	f85d eb04 	ldr.w	lr, [sp], #4
 800409c:	b003      	add	sp, #12
 800409e:	4770      	bx	lr
 80040a0:	2000000c 	.word	0x2000000c

080040a4 <malloc>:
 80040a4:	4b02      	ldr	r3, [pc, #8]	; (80040b0 <malloc+0xc>)
 80040a6:	4601      	mov	r1, r0
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	f000 b853 	b.w	8004154 <_malloc_r>
 80040ae:	bf00      	nop
 80040b0:	2000000c 	.word	0x2000000c

080040b4 <_free_r>:
 80040b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040b6:	2900      	cmp	r1, #0
 80040b8:	d048      	beq.n	800414c <_free_r+0x98>
 80040ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040be:	9001      	str	r0, [sp, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f1a1 0404 	sub.w	r4, r1, #4
 80040c6:	bfb8      	it	lt
 80040c8:	18e4      	addlt	r4, r4, r3
 80040ca:	f000 fe81 	bl	8004dd0 <__malloc_lock>
 80040ce:	4a20      	ldr	r2, [pc, #128]	; (8004150 <_free_r+0x9c>)
 80040d0:	9801      	ldr	r0, [sp, #4]
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	4615      	mov	r5, r2
 80040d6:	b933      	cbnz	r3, 80040e6 <_free_r+0x32>
 80040d8:	6063      	str	r3, [r4, #4]
 80040da:	6014      	str	r4, [r2, #0]
 80040dc:	b003      	add	sp, #12
 80040de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040e2:	f000 be7b 	b.w	8004ddc <__malloc_unlock>
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	d90b      	bls.n	8004102 <_free_r+0x4e>
 80040ea:	6821      	ldr	r1, [r4, #0]
 80040ec:	1862      	adds	r2, r4, r1
 80040ee:	4293      	cmp	r3, r2
 80040f0:	bf04      	itt	eq
 80040f2:	681a      	ldreq	r2, [r3, #0]
 80040f4:	685b      	ldreq	r3, [r3, #4]
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	bf04      	itt	eq
 80040fa:	1852      	addeq	r2, r2, r1
 80040fc:	6022      	streq	r2, [r4, #0]
 80040fe:	602c      	str	r4, [r5, #0]
 8004100:	e7ec      	b.n	80040dc <_free_r+0x28>
 8004102:	461a      	mov	r2, r3
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	b10b      	cbz	r3, 800410c <_free_r+0x58>
 8004108:	42a3      	cmp	r3, r4
 800410a:	d9fa      	bls.n	8004102 <_free_r+0x4e>
 800410c:	6811      	ldr	r1, [r2, #0]
 800410e:	1855      	adds	r5, r2, r1
 8004110:	42a5      	cmp	r5, r4
 8004112:	d10b      	bne.n	800412c <_free_r+0x78>
 8004114:	6824      	ldr	r4, [r4, #0]
 8004116:	4421      	add	r1, r4
 8004118:	1854      	adds	r4, r2, r1
 800411a:	42a3      	cmp	r3, r4
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	d1dd      	bne.n	80040dc <_free_r+0x28>
 8004120:	681c      	ldr	r4, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	6053      	str	r3, [r2, #4]
 8004126:	4421      	add	r1, r4
 8004128:	6011      	str	r1, [r2, #0]
 800412a:	e7d7      	b.n	80040dc <_free_r+0x28>
 800412c:	d902      	bls.n	8004134 <_free_r+0x80>
 800412e:	230c      	movs	r3, #12
 8004130:	6003      	str	r3, [r0, #0]
 8004132:	e7d3      	b.n	80040dc <_free_r+0x28>
 8004134:	6825      	ldr	r5, [r4, #0]
 8004136:	1961      	adds	r1, r4, r5
 8004138:	428b      	cmp	r3, r1
 800413a:	bf04      	itt	eq
 800413c:	6819      	ldreq	r1, [r3, #0]
 800413e:	685b      	ldreq	r3, [r3, #4]
 8004140:	6063      	str	r3, [r4, #4]
 8004142:	bf04      	itt	eq
 8004144:	1949      	addeq	r1, r1, r5
 8004146:	6021      	streq	r1, [r4, #0]
 8004148:	6054      	str	r4, [r2, #4]
 800414a:	e7c7      	b.n	80040dc <_free_r+0x28>
 800414c:	b003      	add	sp, #12
 800414e:	bd30      	pop	{r4, r5, pc}
 8004150:	20000090 	.word	0x20000090

08004154 <_malloc_r>:
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004156:	1ccd      	adds	r5, r1, #3
 8004158:	f025 0503 	bic.w	r5, r5, #3
 800415c:	3508      	adds	r5, #8
 800415e:	2d0c      	cmp	r5, #12
 8004160:	bf38      	it	cc
 8004162:	250c      	movcc	r5, #12
 8004164:	2d00      	cmp	r5, #0
 8004166:	4606      	mov	r6, r0
 8004168:	db01      	blt.n	800416e <_malloc_r+0x1a>
 800416a:	42a9      	cmp	r1, r5
 800416c:	d903      	bls.n	8004176 <_malloc_r+0x22>
 800416e:	230c      	movs	r3, #12
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	2000      	movs	r0, #0
 8004174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004176:	f000 fe2b 	bl	8004dd0 <__malloc_lock>
 800417a:	4921      	ldr	r1, [pc, #132]	; (8004200 <_malloc_r+0xac>)
 800417c:	680a      	ldr	r2, [r1, #0]
 800417e:	4614      	mov	r4, r2
 8004180:	b99c      	cbnz	r4, 80041aa <_malloc_r+0x56>
 8004182:	4f20      	ldr	r7, [pc, #128]	; (8004204 <_malloc_r+0xb0>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b923      	cbnz	r3, 8004192 <_malloc_r+0x3e>
 8004188:	4621      	mov	r1, r4
 800418a:	4630      	mov	r0, r6
 800418c:	f000 fb2a 	bl	80047e4 <_sbrk_r>
 8004190:	6038      	str	r0, [r7, #0]
 8004192:	4629      	mov	r1, r5
 8004194:	4630      	mov	r0, r6
 8004196:	f000 fb25 	bl	80047e4 <_sbrk_r>
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	d123      	bne.n	80041e6 <_malloc_r+0x92>
 800419e:	230c      	movs	r3, #12
 80041a0:	6033      	str	r3, [r6, #0]
 80041a2:	4630      	mov	r0, r6
 80041a4:	f000 fe1a 	bl	8004ddc <__malloc_unlock>
 80041a8:	e7e3      	b.n	8004172 <_malloc_r+0x1e>
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	1b5b      	subs	r3, r3, r5
 80041ae:	d417      	bmi.n	80041e0 <_malloc_r+0x8c>
 80041b0:	2b0b      	cmp	r3, #11
 80041b2:	d903      	bls.n	80041bc <_malloc_r+0x68>
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	441c      	add	r4, r3
 80041b8:	6025      	str	r5, [r4, #0]
 80041ba:	e004      	b.n	80041c6 <_malloc_r+0x72>
 80041bc:	6863      	ldr	r3, [r4, #4]
 80041be:	42a2      	cmp	r2, r4
 80041c0:	bf0c      	ite	eq
 80041c2:	600b      	streq	r3, [r1, #0]
 80041c4:	6053      	strne	r3, [r2, #4]
 80041c6:	4630      	mov	r0, r6
 80041c8:	f000 fe08 	bl	8004ddc <__malloc_unlock>
 80041cc:	f104 000b 	add.w	r0, r4, #11
 80041d0:	1d23      	adds	r3, r4, #4
 80041d2:	f020 0007 	bic.w	r0, r0, #7
 80041d6:	1ac2      	subs	r2, r0, r3
 80041d8:	d0cc      	beq.n	8004174 <_malloc_r+0x20>
 80041da:	1a1b      	subs	r3, r3, r0
 80041dc:	50a3      	str	r3, [r4, r2]
 80041de:	e7c9      	b.n	8004174 <_malloc_r+0x20>
 80041e0:	4622      	mov	r2, r4
 80041e2:	6864      	ldr	r4, [r4, #4]
 80041e4:	e7cc      	b.n	8004180 <_malloc_r+0x2c>
 80041e6:	1cc4      	adds	r4, r0, #3
 80041e8:	f024 0403 	bic.w	r4, r4, #3
 80041ec:	42a0      	cmp	r0, r4
 80041ee:	d0e3      	beq.n	80041b8 <_malloc_r+0x64>
 80041f0:	1a21      	subs	r1, r4, r0
 80041f2:	4630      	mov	r0, r6
 80041f4:	f000 faf6 	bl	80047e4 <_sbrk_r>
 80041f8:	3001      	adds	r0, #1
 80041fa:	d1dd      	bne.n	80041b8 <_malloc_r+0x64>
 80041fc:	e7cf      	b.n	800419e <_malloc_r+0x4a>
 80041fe:	bf00      	nop
 8004200:	20000090 	.word	0x20000090
 8004204:	20000094 	.word	0x20000094

08004208 <__sfputc_r>:
 8004208:	6893      	ldr	r3, [r2, #8]
 800420a:	3b01      	subs	r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	b410      	push	{r4}
 8004210:	6093      	str	r3, [r2, #8]
 8004212:	da08      	bge.n	8004226 <__sfputc_r+0x1e>
 8004214:	6994      	ldr	r4, [r2, #24]
 8004216:	42a3      	cmp	r3, r4
 8004218:	db01      	blt.n	800421e <__sfputc_r+0x16>
 800421a:	290a      	cmp	r1, #10
 800421c:	d103      	bne.n	8004226 <__sfputc_r+0x1e>
 800421e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004222:	f000 baef 	b.w	8004804 <__swbuf_r>
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	1c58      	adds	r0, r3, #1
 800422a:	6010      	str	r0, [r2, #0]
 800422c:	7019      	strb	r1, [r3, #0]
 800422e:	4608      	mov	r0, r1
 8004230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004234:	4770      	bx	lr

08004236 <__sfputs_r>:
 8004236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004238:	4606      	mov	r6, r0
 800423a:	460f      	mov	r7, r1
 800423c:	4614      	mov	r4, r2
 800423e:	18d5      	adds	r5, r2, r3
 8004240:	42ac      	cmp	r4, r5
 8004242:	d101      	bne.n	8004248 <__sfputs_r+0x12>
 8004244:	2000      	movs	r0, #0
 8004246:	e007      	b.n	8004258 <__sfputs_r+0x22>
 8004248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800424c:	463a      	mov	r2, r7
 800424e:	4630      	mov	r0, r6
 8004250:	f7ff ffda 	bl	8004208 <__sfputc_r>
 8004254:	1c43      	adds	r3, r0, #1
 8004256:	d1f3      	bne.n	8004240 <__sfputs_r+0xa>
 8004258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800425c <_vfiprintf_r>:
 800425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004260:	460d      	mov	r5, r1
 8004262:	b09d      	sub	sp, #116	; 0x74
 8004264:	4614      	mov	r4, r2
 8004266:	4698      	mov	r8, r3
 8004268:	4606      	mov	r6, r0
 800426a:	b118      	cbz	r0, 8004274 <_vfiprintf_r+0x18>
 800426c:	6983      	ldr	r3, [r0, #24]
 800426e:	b90b      	cbnz	r3, 8004274 <_vfiprintf_r+0x18>
 8004270:	f000 fcaa 	bl	8004bc8 <__sinit>
 8004274:	4b89      	ldr	r3, [pc, #548]	; (800449c <_vfiprintf_r+0x240>)
 8004276:	429d      	cmp	r5, r3
 8004278:	d11b      	bne.n	80042b2 <_vfiprintf_r+0x56>
 800427a:	6875      	ldr	r5, [r6, #4]
 800427c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800427e:	07d9      	lsls	r1, r3, #31
 8004280:	d405      	bmi.n	800428e <_vfiprintf_r+0x32>
 8004282:	89ab      	ldrh	r3, [r5, #12]
 8004284:	059a      	lsls	r2, r3, #22
 8004286:	d402      	bmi.n	800428e <_vfiprintf_r+0x32>
 8004288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800428a:	f000 fd3b 	bl	8004d04 <__retarget_lock_acquire_recursive>
 800428e:	89ab      	ldrh	r3, [r5, #12]
 8004290:	071b      	lsls	r3, r3, #28
 8004292:	d501      	bpl.n	8004298 <_vfiprintf_r+0x3c>
 8004294:	692b      	ldr	r3, [r5, #16]
 8004296:	b9eb      	cbnz	r3, 80042d4 <_vfiprintf_r+0x78>
 8004298:	4629      	mov	r1, r5
 800429a:	4630      	mov	r0, r6
 800429c:	f000 fb04 	bl	80048a8 <__swsetup_r>
 80042a0:	b1c0      	cbz	r0, 80042d4 <_vfiprintf_r+0x78>
 80042a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042a4:	07dc      	lsls	r4, r3, #31
 80042a6:	d50e      	bpl.n	80042c6 <_vfiprintf_r+0x6a>
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	b01d      	add	sp, #116	; 0x74
 80042ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b2:	4b7b      	ldr	r3, [pc, #492]	; (80044a0 <_vfiprintf_r+0x244>)
 80042b4:	429d      	cmp	r5, r3
 80042b6:	d101      	bne.n	80042bc <_vfiprintf_r+0x60>
 80042b8:	68b5      	ldr	r5, [r6, #8]
 80042ba:	e7df      	b.n	800427c <_vfiprintf_r+0x20>
 80042bc:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <_vfiprintf_r+0x248>)
 80042be:	429d      	cmp	r5, r3
 80042c0:	bf08      	it	eq
 80042c2:	68f5      	ldreq	r5, [r6, #12]
 80042c4:	e7da      	b.n	800427c <_vfiprintf_r+0x20>
 80042c6:	89ab      	ldrh	r3, [r5, #12]
 80042c8:	0598      	lsls	r0, r3, #22
 80042ca:	d4ed      	bmi.n	80042a8 <_vfiprintf_r+0x4c>
 80042cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042ce:	f000 fd1a 	bl	8004d06 <__retarget_lock_release_recursive>
 80042d2:	e7e9      	b.n	80042a8 <_vfiprintf_r+0x4c>
 80042d4:	2300      	movs	r3, #0
 80042d6:	9309      	str	r3, [sp, #36]	; 0x24
 80042d8:	2320      	movs	r3, #32
 80042da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042de:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e2:	2330      	movs	r3, #48	; 0x30
 80042e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80044a8 <_vfiprintf_r+0x24c>
 80042e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ec:	f04f 0901 	mov.w	r9, #1
 80042f0:	4623      	mov	r3, r4
 80042f2:	469a      	mov	sl, r3
 80042f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f8:	b10a      	cbz	r2, 80042fe <_vfiprintf_r+0xa2>
 80042fa:	2a25      	cmp	r2, #37	; 0x25
 80042fc:	d1f9      	bne.n	80042f2 <_vfiprintf_r+0x96>
 80042fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004302:	d00b      	beq.n	800431c <_vfiprintf_r+0xc0>
 8004304:	465b      	mov	r3, fp
 8004306:	4622      	mov	r2, r4
 8004308:	4629      	mov	r1, r5
 800430a:	4630      	mov	r0, r6
 800430c:	f7ff ff93 	bl	8004236 <__sfputs_r>
 8004310:	3001      	adds	r0, #1
 8004312:	f000 80aa 	beq.w	800446a <_vfiprintf_r+0x20e>
 8004316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004318:	445a      	add	r2, fp
 800431a:	9209      	str	r2, [sp, #36]	; 0x24
 800431c:	f89a 3000 	ldrb.w	r3, [sl]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80a2 	beq.w	800446a <_vfiprintf_r+0x20e>
 8004326:	2300      	movs	r3, #0
 8004328:	f04f 32ff 	mov.w	r2, #4294967295
 800432c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004330:	f10a 0a01 	add.w	sl, sl, #1
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	9307      	str	r3, [sp, #28]
 8004338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800433c:	931a      	str	r3, [sp, #104]	; 0x68
 800433e:	4654      	mov	r4, sl
 8004340:	2205      	movs	r2, #5
 8004342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004346:	4858      	ldr	r0, [pc, #352]	; (80044a8 <_vfiprintf_r+0x24c>)
 8004348:	f7fb ff62 	bl	8000210 <memchr>
 800434c:	9a04      	ldr	r2, [sp, #16]
 800434e:	b9d8      	cbnz	r0, 8004388 <_vfiprintf_r+0x12c>
 8004350:	06d1      	lsls	r1, r2, #27
 8004352:	bf44      	itt	mi
 8004354:	2320      	movmi	r3, #32
 8004356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800435a:	0713      	lsls	r3, r2, #28
 800435c:	bf44      	itt	mi
 800435e:	232b      	movmi	r3, #43	; 0x2b
 8004360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004364:	f89a 3000 	ldrb.w	r3, [sl]
 8004368:	2b2a      	cmp	r3, #42	; 0x2a
 800436a:	d015      	beq.n	8004398 <_vfiprintf_r+0x13c>
 800436c:	9a07      	ldr	r2, [sp, #28]
 800436e:	4654      	mov	r4, sl
 8004370:	2000      	movs	r0, #0
 8004372:	f04f 0c0a 	mov.w	ip, #10
 8004376:	4621      	mov	r1, r4
 8004378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800437c:	3b30      	subs	r3, #48	; 0x30
 800437e:	2b09      	cmp	r3, #9
 8004380:	d94e      	bls.n	8004420 <_vfiprintf_r+0x1c4>
 8004382:	b1b0      	cbz	r0, 80043b2 <_vfiprintf_r+0x156>
 8004384:	9207      	str	r2, [sp, #28]
 8004386:	e014      	b.n	80043b2 <_vfiprintf_r+0x156>
 8004388:	eba0 0308 	sub.w	r3, r0, r8
 800438c:	fa09 f303 	lsl.w	r3, r9, r3
 8004390:	4313      	orrs	r3, r2
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	46a2      	mov	sl, r4
 8004396:	e7d2      	b.n	800433e <_vfiprintf_r+0xe2>
 8004398:	9b03      	ldr	r3, [sp, #12]
 800439a:	1d19      	adds	r1, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	9103      	str	r1, [sp, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bfbb      	ittet	lt
 80043a4:	425b      	neglt	r3, r3
 80043a6:	f042 0202 	orrlt.w	r2, r2, #2
 80043aa:	9307      	strge	r3, [sp, #28]
 80043ac:	9307      	strlt	r3, [sp, #28]
 80043ae:	bfb8      	it	lt
 80043b0:	9204      	strlt	r2, [sp, #16]
 80043b2:	7823      	ldrb	r3, [r4, #0]
 80043b4:	2b2e      	cmp	r3, #46	; 0x2e
 80043b6:	d10c      	bne.n	80043d2 <_vfiprintf_r+0x176>
 80043b8:	7863      	ldrb	r3, [r4, #1]
 80043ba:	2b2a      	cmp	r3, #42	; 0x2a
 80043bc:	d135      	bne.n	800442a <_vfiprintf_r+0x1ce>
 80043be:	9b03      	ldr	r3, [sp, #12]
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	9203      	str	r2, [sp, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bfb8      	it	lt
 80043ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80043ce:	3402      	adds	r4, #2
 80043d0:	9305      	str	r3, [sp, #20]
 80043d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80044b8 <_vfiprintf_r+0x25c>
 80043d6:	7821      	ldrb	r1, [r4, #0]
 80043d8:	2203      	movs	r2, #3
 80043da:	4650      	mov	r0, sl
 80043dc:	f7fb ff18 	bl	8000210 <memchr>
 80043e0:	b140      	cbz	r0, 80043f4 <_vfiprintf_r+0x198>
 80043e2:	2340      	movs	r3, #64	; 0x40
 80043e4:	eba0 000a 	sub.w	r0, r0, sl
 80043e8:	fa03 f000 	lsl.w	r0, r3, r0
 80043ec:	9b04      	ldr	r3, [sp, #16]
 80043ee:	4303      	orrs	r3, r0
 80043f0:	3401      	adds	r4, #1
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f8:	482c      	ldr	r0, [pc, #176]	; (80044ac <_vfiprintf_r+0x250>)
 80043fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043fe:	2206      	movs	r2, #6
 8004400:	f7fb ff06 	bl	8000210 <memchr>
 8004404:	2800      	cmp	r0, #0
 8004406:	d03f      	beq.n	8004488 <_vfiprintf_r+0x22c>
 8004408:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <_vfiprintf_r+0x254>)
 800440a:	bb1b      	cbnz	r3, 8004454 <_vfiprintf_r+0x1f8>
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	3307      	adds	r3, #7
 8004410:	f023 0307 	bic.w	r3, r3, #7
 8004414:	3308      	adds	r3, #8
 8004416:	9303      	str	r3, [sp, #12]
 8004418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441a:	443b      	add	r3, r7
 800441c:	9309      	str	r3, [sp, #36]	; 0x24
 800441e:	e767      	b.n	80042f0 <_vfiprintf_r+0x94>
 8004420:	fb0c 3202 	mla	r2, ip, r2, r3
 8004424:	460c      	mov	r4, r1
 8004426:	2001      	movs	r0, #1
 8004428:	e7a5      	b.n	8004376 <_vfiprintf_r+0x11a>
 800442a:	2300      	movs	r3, #0
 800442c:	3401      	adds	r4, #1
 800442e:	9305      	str	r3, [sp, #20]
 8004430:	4619      	mov	r1, r3
 8004432:	f04f 0c0a 	mov.w	ip, #10
 8004436:	4620      	mov	r0, r4
 8004438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800443c:	3a30      	subs	r2, #48	; 0x30
 800443e:	2a09      	cmp	r2, #9
 8004440:	d903      	bls.n	800444a <_vfiprintf_r+0x1ee>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0c5      	beq.n	80043d2 <_vfiprintf_r+0x176>
 8004446:	9105      	str	r1, [sp, #20]
 8004448:	e7c3      	b.n	80043d2 <_vfiprintf_r+0x176>
 800444a:	fb0c 2101 	mla	r1, ip, r1, r2
 800444e:	4604      	mov	r4, r0
 8004450:	2301      	movs	r3, #1
 8004452:	e7f0      	b.n	8004436 <_vfiprintf_r+0x1da>
 8004454:	ab03      	add	r3, sp, #12
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	462a      	mov	r2, r5
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <_vfiprintf_r+0x258>)
 800445c:	a904      	add	r1, sp, #16
 800445e:	4630      	mov	r0, r6
 8004460:	f3af 8000 	nop.w
 8004464:	4607      	mov	r7, r0
 8004466:	1c78      	adds	r0, r7, #1
 8004468:	d1d6      	bne.n	8004418 <_vfiprintf_r+0x1bc>
 800446a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800446c:	07d9      	lsls	r1, r3, #31
 800446e:	d405      	bmi.n	800447c <_vfiprintf_r+0x220>
 8004470:	89ab      	ldrh	r3, [r5, #12]
 8004472:	059a      	lsls	r2, r3, #22
 8004474:	d402      	bmi.n	800447c <_vfiprintf_r+0x220>
 8004476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004478:	f000 fc45 	bl	8004d06 <__retarget_lock_release_recursive>
 800447c:	89ab      	ldrh	r3, [r5, #12]
 800447e:	065b      	lsls	r3, r3, #25
 8004480:	f53f af12 	bmi.w	80042a8 <_vfiprintf_r+0x4c>
 8004484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004486:	e711      	b.n	80042ac <_vfiprintf_r+0x50>
 8004488:	ab03      	add	r3, sp, #12
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	462a      	mov	r2, r5
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <_vfiprintf_r+0x258>)
 8004490:	a904      	add	r1, sp, #16
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f880 	bl	8004598 <_printf_i>
 8004498:	e7e4      	b.n	8004464 <_vfiprintf_r+0x208>
 800449a:	bf00      	nop
 800449c:	08005508 	.word	0x08005508
 80044a0:	08005528 	.word	0x08005528
 80044a4:	080054e8 	.word	0x080054e8
 80044a8:	080054b4 	.word	0x080054b4
 80044ac:	080054be 	.word	0x080054be
 80044b0:	00000000 	.word	0x00000000
 80044b4:	08004237 	.word	0x08004237
 80044b8:	080054ba 	.word	0x080054ba

080044bc <_printf_common>:
 80044bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c0:	4616      	mov	r6, r2
 80044c2:	4699      	mov	r9, r3
 80044c4:	688a      	ldr	r2, [r1, #8]
 80044c6:	690b      	ldr	r3, [r1, #16]
 80044c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bfb8      	it	lt
 80044d0:	4613      	movlt	r3, r2
 80044d2:	6033      	str	r3, [r6, #0]
 80044d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044d8:	4607      	mov	r7, r0
 80044da:	460c      	mov	r4, r1
 80044dc:	b10a      	cbz	r2, 80044e2 <_printf_common+0x26>
 80044de:	3301      	adds	r3, #1
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	0699      	lsls	r1, r3, #26
 80044e6:	bf42      	ittt	mi
 80044e8:	6833      	ldrmi	r3, [r6, #0]
 80044ea:	3302      	addmi	r3, #2
 80044ec:	6033      	strmi	r3, [r6, #0]
 80044ee:	6825      	ldr	r5, [r4, #0]
 80044f0:	f015 0506 	ands.w	r5, r5, #6
 80044f4:	d106      	bne.n	8004504 <_printf_common+0x48>
 80044f6:	f104 0a19 	add.w	sl, r4, #25
 80044fa:	68e3      	ldr	r3, [r4, #12]
 80044fc:	6832      	ldr	r2, [r6, #0]
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	42ab      	cmp	r3, r5
 8004502:	dc26      	bgt.n	8004552 <_printf_common+0x96>
 8004504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004508:	1e13      	subs	r3, r2, #0
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	bf18      	it	ne
 800450e:	2301      	movne	r3, #1
 8004510:	0692      	lsls	r2, r2, #26
 8004512:	d42b      	bmi.n	800456c <_printf_common+0xb0>
 8004514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004518:	4649      	mov	r1, r9
 800451a:	4638      	mov	r0, r7
 800451c:	47c0      	blx	r8
 800451e:	3001      	adds	r0, #1
 8004520:	d01e      	beq.n	8004560 <_printf_common+0xa4>
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	68e5      	ldr	r5, [r4, #12]
 8004526:	6832      	ldr	r2, [r6, #0]
 8004528:	f003 0306 	and.w	r3, r3, #6
 800452c:	2b04      	cmp	r3, #4
 800452e:	bf08      	it	eq
 8004530:	1aad      	subeq	r5, r5, r2
 8004532:	68a3      	ldr	r3, [r4, #8]
 8004534:	6922      	ldr	r2, [r4, #16]
 8004536:	bf0c      	ite	eq
 8004538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800453c:	2500      	movne	r5, #0
 800453e:	4293      	cmp	r3, r2
 8004540:	bfc4      	itt	gt
 8004542:	1a9b      	subgt	r3, r3, r2
 8004544:	18ed      	addgt	r5, r5, r3
 8004546:	2600      	movs	r6, #0
 8004548:	341a      	adds	r4, #26
 800454a:	42b5      	cmp	r5, r6
 800454c:	d11a      	bne.n	8004584 <_printf_common+0xc8>
 800454e:	2000      	movs	r0, #0
 8004550:	e008      	b.n	8004564 <_printf_common+0xa8>
 8004552:	2301      	movs	r3, #1
 8004554:	4652      	mov	r2, sl
 8004556:	4649      	mov	r1, r9
 8004558:	4638      	mov	r0, r7
 800455a:	47c0      	blx	r8
 800455c:	3001      	adds	r0, #1
 800455e:	d103      	bne.n	8004568 <_printf_common+0xac>
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	3501      	adds	r5, #1
 800456a:	e7c6      	b.n	80044fa <_printf_common+0x3e>
 800456c:	18e1      	adds	r1, r4, r3
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	2030      	movs	r0, #48	; 0x30
 8004572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004576:	4422      	add	r2, r4
 8004578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800457c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004580:	3302      	adds	r3, #2
 8004582:	e7c7      	b.n	8004514 <_printf_common+0x58>
 8004584:	2301      	movs	r3, #1
 8004586:	4622      	mov	r2, r4
 8004588:	4649      	mov	r1, r9
 800458a:	4638      	mov	r0, r7
 800458c:	47c0      	blx	r8
 800458e:	3001      	adds	r0, #1
 8004590:	d0e6      	beq.n	8004560 <_printf_common+0xa4>
 8004592:	3601      	adds	r6, #1
 8004594:	e7d9      	b.n	800454a <_printf_common+0x8e>
	...

08004598 <_printf_i>:
 8004598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	460c      	mov	r4, r1
 800459e:	4691      	mov	r9, r2
 80045a0:	7e27      	ldrb	r7, [r4, #24]
 80045a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045a4:	2f78      	cmp	r7, #120	; 0x78
 80045a6:	4680      	mov	r8, r0
 80045a8:	469a      	mov	sl, r3
 80045aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ae:	d807      	bhi.n	80045c0 <_printf_i+0x28>
 80045b0:	2f62      	cmp	r7, #98	; 0x62
 80045b2:	d80a      	bhi.n	80045ca <_printf_i+0x32>
 80045b4:	2f00      	cmp	r7, #0
 80045b6:	f000 80d8 	beq.w	800476a <_printf_i+0x1d2>
 80045ba:	2f58      	cmp	r7, #88	; 0x58
 80045bc:	f000 80a3 	beq.w	8004706 <_printf_i+0x16e>
 80045c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045c8:	e03a      	b.n	8004640 <_printf_i+0xa8>
 80045ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ce:	2b15      	cmp	r3, #21
 80045d0:	d8f6      	bhi.n	80045c0 <_printf_i+0x28>
 80045d2:	a001      	add	r0, pc, #4	; (adr r0, 80045d8 <_printf_i+0x40>)
 80045d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045d8:	08004631 	.word	0x08004631
 80045dc:	08004645 	.word	0x08004645
 80045e0:	080045c1 	.word	0x080045c1
 80045e4:	080045c1 	.word	0x080045c1
 80045e8:	080045c1 	.word	0x080045c1
 80045ec:	080045c1 	.word	0x080045c1
 80045f0:	08004645 	.word	0x08004645
 80045f4:	080045c1 	.word	0x080045c1
 80045f8:	080045c1 	.word	0x080045c1
 80045fc:	080045c1 	.word	0x080045c1
 8004600:	080045c1 	.word	0x080045c1
 8004604:	08004751 	.word	0x08004751
 8004608:	08004675 	.word	0x08004675
 800460c:	08004733 	.word	0x08004733
 8004610:	080045c1 	.word	0x080045c1
 8004614:	080045c1 	.word	0x080045c1
 8004618:	08004773 	.word	0x08004773
 800461c:	080045c1 	.word	0x080045c1
 8004620:	08004675 	.word	0x08004675
 8004624:	080045c1 	.word	0x080045c1
 8004628:	080045c1 	.word	0x080045c1
 800462c:	0800473b 	.word	0x0800473b
 8004630:	680b      	ldr	r3, [r1, #0]
 8004632:	1d1a      	adds	r2, r3, #4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	600a      	str	r2, [r1, #0]
 8004638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800463c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004640:	2301      	movs	r3, #1
 8004642:	e0a3      	b.n	800478c <_printf_i+0x1f4>
 8004644:	6825      	ldr	r5, [r4, #0]
 8004646:	6808      	ldr	r0, [r1, #0]
 8004648:	062e      	lsls	r6, r5, #24
 800464a:	f100 0304 	add.w	r3, r0, #4
 800464e:	d50a      	bpl.n	8004666 <_printf_i+0xce>
 8004650:	6805      	ldr	r5, [r0, #0]
 8004652:	600b      	str	r3, [r1, #0]
 8004654:	2d00      	cmp	r5, #0
 8004656:	da03      	bge.n	8004660 <_printf_i+0xc8>
 8004658:	232d      	movs	r3, #45	; 0x2d
 800465a:	426d      	negs	r5, r5
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004660:	485e      	ldr	r0, [pc, #376]	; (80047dc <_printf_i+0x244>)
 8004662:	230a      	movs	r3, #10
 8004664:	e019      	b.n	800469a <_printf_i+0x102>
 8004666:	f015 0f40 	tst.w	r5, #64	; 0x40
 800466a:	6805      	ldr	r5, [r0, #0]
 800466c:	600b      	str	r3, [r1, #0]
 800466e:	bf18      	it	ne
 8004670:	b22d      	sxthne	r5, r5
 8004672:	e7ef      	b.n	8004654 <_printf_i+0xbc>
 8004674:	680b      	ldr	r3, [r1, #0]
 8004676:	6825      	ldr	r5, [r4, #0]
 8004678:	1d18      	adds	r0, r3, #4
 800467a:	6008      	str	r0, [r1, #0]
 800467c:	0628      	lsls	r0, r5, #24
 800467e:	d501      	bpl.n	8004684 <_printf_i+0xec>
 8004680:	681d      	ldr	r5, [r3, #0]
 8004682:	e002      	b.n	800468a <_printf_i+0xf2>
 8004684:	0669      	lsls	r1, r5, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0xe8>
 8004688:	881d      	ldrh	r5, [r3, #0]
 800468a:	4854      	ldr	r0, [pc, #336]	; (80047dc <_printf_i+0x244>)
 800468c:	2f6f      	cmp	r7, #111	; 0x6f
 800468e:	bf0c      	ite	eq
 8004690:	2308      	moveq	r3, #8
 8004692:	230a      	movne	r3, #10
 8004694:	2100      	movs	r1, #0
 8004696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800469a:	6866      	ldr	r6, [r4, #4]
 800469c:	60a6      	str	r6, [r4, #8]
 800469e:	2e00      	cmp	r6, #0
 80046a0:	bfa2      	ittt	ge
 80046a2:	6821      	ldrge	r1, [r4, #0]
 80046a4:	f021 0104 	bicge.w	r1, r1, #4
 80046a8:	6021      	strge	r1, [r4, #0]
 80046aa:	b90d      	cbnz	r5, 80046b0 <_printf_i+0x118>
 80046ac:	2e00      	cmp	r6, #0
 80046ae:	d04d      	beq.n	800474c <_printf_i+0x1b4>
 80046b0:	4616      	mov	r6, r2
 80046b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80046b6:	fb03 5711 	mls	r7, r3, r1, r5
 80046ba:	5dc7      	ldrb	r7, [r0, r7]
 80046bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046c0:	462f      	mov	r7, r5
 80046c2:	42bb      	cmp	r3, r7
 80046c4:	460d      	mov	r5, r1
 80046c6:	d9f4      	bls.n	80046b2 <_printf_i+0x11a>
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d10b      	bne.n	80046e4 <_printf_i+0x14c>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	07df      	lsls	r7, r3, #31
 80046d0:	d508      	bpl.n	80046e4 <_printf_i+0x14c>
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	6861      	ldr	r1, [r4, #4]
 80046d6:	4299      	cmp	r1, r3
 80046d8:	bfde      	ittt	le
 80046da:	2330      	movle	r3, #48	; 0x30
 80046dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046e4:	1b92      	subs	r2, r2, r6
 80046e6:	6122      	str	r2, [r4, #16]
 80046e8:	f8cd a000 	str.w	sl, [sp]
 80046ec:	464b      	mov	r3, r9
 80046ee:	aa03      	add	r2, sp, #12
 80046f0:	4621      	mov	r1, r4
 80046f2:	4640      	mov	r0, r8
 80046f4:	f7ff fee2 	bl	80044bc <_printf_common>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d14c      	bne.n	8004796 <_printf_i+0x1fe>
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	b004      	add	sp, #16
 8004702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004706:	4835      	ldr	r0, [pc, #212]	; (80047dc <_printf_i+0x244>)
 8004708:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	680e      	ldr	r6, [r1, #0]
 8004710:	061f      	lsls	r7, r3, #24
 8004712:	f856 5b04 	ldr.w	r5, [r6], #4
 8004716:	600e      	str	r6, [r1, #0]
 8004718:	d514      	bpl.n	8004744 <_printf_i+0x1ac>
 800471a:	07d9      	lsls	r1, r3, #31
 800471c:	bf44      	itt	mi
 800471e:	f043 0320 	orrmi.w	r3, r3, #32
 8004722:	6023      	strmi	r3, [r4, #0]
 8004724:	b91d      	cbnz	r5, 800472e <_printf_i+0x196>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	f023 0320 	bic.w	r3, r3, #32
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	2310      	movs	r3, #16
 8004730:	e7b0      	b.n	8004694 <_printf_i+0xfc>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	f043 0320 	orr.w	r3, r3, #32
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	2378      	movs	r3, #120	; 0x78
 800473c:	4828      	ldr	r0, [pc, #160]	; (80047e0 <_printf_i+0x248>)
 800473e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004742:	e7e3      	b.n	800470c <_printf_i+0x174>
 8004744:	065e      	lsls	r6, r3, #25
 8004746:	bf48      	it	mi
 8004748:	b2ad      	uxthmi	r5, r5
 800474a:	e7e6      	b.n	800471a <_printf_i+0x182>
 800474c:	4616      	mov	r6, r2
 800474e:	e7bb      	b.n	80046c8 <_printf_i+0x130>
 8004750:	680b      	ldr	r3, [r1, #0]
 8004752:	6826      	ldr	r6, [r4, #0]
 8004754:	6960      	ldr	r0, [r4, #20]
 8004756:	1d1d      	adds	r5, r3, #4
 8004758:	600d      	str	r5, [r1, #0]
 800475a:	0635      	lsls	r5, r6, #24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	d501      	bpl.n	8004764 <_printf_i+0x1cc>
 8004760:	6018      	str	r0, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0x1d2>
 8004764:	0671      	lsls	r1, r6, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0x1c8>
 8004768:	8018      	strh	r0, [r3, #0]
 800476a:	2300      	movs	r3, #0
 800476c:	6123      	str	r3, [r4, #16]
 800476e:	4616      	mov	r6, r2
 8004770:	e7ba      	b.n	80046e8 <_printf_i+0x150>
 8004772:	680b      	ldr	r3, [r1, #0]
 8004774:	1d1a      	adds	r2, r3, #4
 8004776:	600a      	str	r2, [r1, #0]
 8004778:	681e      	ldr	r6, [r3, #0]
 800477a:	6862      	ldr	r2, [r4, #4]
 800477c:	2100      	movs	r1, #0
 800477e:	4630      	mov	r0, r6
 8004780:	f7fb fd46 	bl	8000210 <memchr>
 8004784:	b108      	cbz	r0, 800478a <_printf_i+0x1f2>
 8004786:	1b80      	subs	r0, r0, r6
 8004788:	6060      	str	r0, [r4, #4]
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	2300      	movs	r3, #0
 8004790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004794:	e7a8      	b.n	80046e8 <_printf_i+0x150>
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	4632      	mov	r2, r6
 800479a:	4649      	mov	r1, r9
 800479c:	4640      	mov	r0, r8
 800479e:	47d0      	blx	sl
 80047a0:	3001      	adds	r0, #1
 80047a2:	d0ab      	beq.n	80046fc <_printf_i+0x164>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	079b      	lsls	r3, r3, #30
 80047a8:	d413      	bmi.n	80047d2 <_printf_i+0x23a>
 80047aa:	68e0      	ldr	r0, [r4, #12]
 80047ac:	9b03      	ldr	r3, [sp, #12]
 80047ae:	4298      	cmp	r0, r3
 80047b0:	bfb8      	it	lt
 80047b2:	4618      	movlt	r0, r3
 80047b4:	e7a4      	b.n	8004700 <_printf_i+0x168>
 80047b6:	2301      	movs	r3, #1
 80047b8:	4632      	mov	r2, r6
 80047ba:	4649      	mov	r1, r9
 80047bc:	4640      	mov	r0, r8
 80047be:	47d0      	blx	sl
 80047c0:	3001      	adds	r0, #1
 80047c2:	d09b      	beq.n	80046fc <_printf_i+0x164>
 80047c4:	3501      	adds	r5, #1
 80047c6:	68e3      	ldr	r3, [r4, #12]
 80047c8:	9903      	ldr	r1, [sp, #12]
 80047ca:	1a5b      	subs	r3, r3, r1
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dcf2      	bgt.n	80047b6 <_printf_i+0x21e>
 80047d0:	e7eb      	b.n	80047aa <_printf_i+0x212>
 80047d2:	2500      	movs	r5, #0
 80047d4:	f104 0619 	add.w	r6, r4, #25
 80047d8:	e7f5      	b.n	80047c6 <_printf_i+0x22e>
 80047da:	bf00      	nop
 80047dc:	080054c5 	.word	0x080054c5
 80047e0:	080054d6 	.word	0x080054d6

080047e4 <_sbrk_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d06      	ldr	r5, [pc, #24]	; (8004800 <_sbrk_r+0x1c>)
 80047e8:	2300      	movs	r3, #0
 80047ea:	4604      	mov	r4, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	f7fc fcae 	bl	8001150 <_sbrk>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_sbrk_r+0x1a>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_sbrk_r+0x1a>
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	200002a8 	.word	0x200002a8

08004804 <__swbuf_r>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	460e      	mov	r6, r1
 8004808:	4614      	mov	r4, r2
 800480a:	4605      	mov	r5, r0
 800480c:	b118      	cbz	r0, 8004816 <__swbuf_r+0x12>
 800480e:	6983      	ldr	r3, [r0, #24]
 8004810:	b90b      	cbnz	r3, 8004816 <__swbuf_r+0x12>
 8004812:	f000 f9d9 	bl	8004bc8 <__sinit>
 8004816:	4b21      	ldr	r3, [pc, #132]	; (800489c <__swbuf_r+0x98>)
 8004818:	429c      	cmp	r4, r3
 800481a:	d12b      	bne.n	8004874 <__swbuf_r+0x70>
 800481c:	686c      	ldr	r4, [r5, #4]
 800481e:	69a3      	ldr	r3, [r4, #24]
 8004820:	60a3      	str	r3, [r4, #8]
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	071a      	lsls	r2, r3, #28
 8004826:	d52f      	bpl.n	8004888 <__swbuf_r+0x84>
 8004828:	6923      	ldr	r3, [r4, #16]
 800482a:	b36b      	cbz	r3, 8004888 <__swbuf_r+0x84>
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	1ac0      	subs	r0, r0, r3
 8004832:	6963      	ldr	r3, [r4, #20]
 8004834:	b2f6      	uxtb	r6, r6
 8004836:	4283      	cmp	r3, r0
 8004838:	4637      	mov	r7, r6
 800483a:	dc04      	bgt.n	8004846 <__swbuf_r+0x42>
 800483c:	4621      	mov	r1, r4
 800483e:	4628      	mov	r0, r5
 8004840:	f000 f92e 	bl	8004aa0 <_fflush_r>
 8004844:	bb30      	cbnz	r0, 8004894 <__swbuf_r+0x90>
 8004846:	68a3      	ldr	r3, [r4, #8]
 8004848:	3b01      	subs	r3, #1
 800484a:	60a3      	str	r3, [r4, #8]
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	6022      	str	r2, [r4, #0]
 8004852:	701e      	strb	r6, [r3, #0]
 8004854:	6963      	ldr	r3, [r4, #20]
 8004856:	3001      	adds	r0, #1
 8004858:	4283      	cmp	r3, r0
 800485a:	d004      	beq.n	8004866 <__swbuf_r+0x62>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	07db      	lsls	r3, r3, #31
 8004860:	d506      	bpl.n	8004870 <__swbuf_r+0x6c>
 8004862:	2e0a      	cmp	r6, #10
 8004864:	d104      	bne.n	8004870 <__swbuf_r+0x6c>
 8004866:	4621      	mov	r1, r4
 8004868:	4628      	mov	r0, r5
 800486a:	f000 f919 	bl	8004aa0 <_fflush_r>
 800486e:	b988      	cbnz	r0, 8004894 <__swbuf_r+0x90>
 8004870:	4638      	mov	r0, r7
 8004872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <__swbuf_r+0x9c>)
 8004876:	429c      	cmp	r4, r3
 8004878:	d101      	bne.n	800487e <__swbuf_r+0x7a>
 800487a:	68ac      	ldr	r4, [r5, #8]
 800487c:	e7cf      	b.n	800481e <__swbuf_r+0x1a>
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <__swbuf_r+0xa0>)
 8004880:	429c      	cmp	r4, r3
 8004882:	bf08      	it	eq
 8004884:	68ec      	ldreq	r4, [r5, #12]
 8004886:	e7ca      	b.n	800481e <__swbuf_r+0x1a>
 8004888:	4621      	mov	r1, r4
 800488a:	4628      	mov	r0, r5
 800488c:	f000 f80c 	bl	80048a8 <__swsetup_r>
 8004890:	2800      	cmp	r0, #0
 8004892:	d0cb      	beq.n	800482c <__swbuf_r+0x28>
 8004894:	f04f 37ff 	mov.w	r7, #4294967295
 8004898:	e7ea      	b.n	8004870 <__swbuf_r+0x6c>
 800489a:	bf00      	nop
 800489c:	08005508 	.word	0x08005508
 80048a0:	08005528 	.word	0x08005528
 80048a4:	080054e8 	.word	0x080054e8

080048a8 <__swsetup_r>:
 80048a8:	4b32      	ldr	r3, [pc, #200]	; (8004974 <__swsetup_r+0xcc>)
 80048aa:	b570      	push	{r4, r5, r6, lr}
 80048ac:	681d      	ldr	r5, [r3, #0]
 80048ae:	4606      	mov	r6, r0
 80048b0:	460c      	mov	r4, r1
 80048b2:	b125      	cbz	r5, 80048be <__swsetup_r+0x16>
 80048b4:	69ab      	ldr	r3, [r5, #24]
 80048b6:	b913      	cbnz	r3, 80048be <__swsetup_r+0x16>
 80048b8:	4628      	mov	r0, r5
 80048ba:	f000 f985 	bl	8004bc8 <__sinit>
 80048be:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <__swsetup_r+0xd0>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	d10f      	bne.n	80048e4 <__swsetup_r+0x3c>
 80048c4:	686c      	ldr	r4, [r5, #4]
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048cc:	0719      	lsls	r1, r3, #28
 80048ce:	d42c      	bmi.n	800492a <__swsetup_r+0x82>
 80048d0:	06dd      	lsls	r5, r3, #27
 80048d2:	d411      	bmi.n	80048f8 <__swsetup_r+0x50>
 80048d4:	2309      	movs	r3, #9
 80048d6:	6033      	str	r3, [r6, #0]
 80048d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	f04f 30ff 	mov.w	r0, #4294967295
 80048e2:	e03e      	b.n	8004962 <__swsetup_r+0xba>
 80048e4:	4b25      	ldr	r3, [pc, #148]	; (800497c <__swsetup_r+0xd4>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d101      	bne.n	80048ee <__swsetup_r+0x46>
 80048ea:	68ac      	ldr	r4, [r5, #8]
 80048ec:	e7eb      	b.n	80048c6 <__swsetup_r+0x1e>
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <__swsetup_r+0xd8>)
 80048f0:	429c      	cmp	r4, r3
 80048f2:	bf08      	it	eq
 80048f4:	68ec      	ldreq	r4, [r5, #12]
 80048f6:	e7e6      	b.n	80048c6 <__swsetup_r+0x1e>
 80048f8:	0758      	lsls	r0, r3, #29
 80048fa:	d512      	bpl.n	8004922 <__swsetup_r+0x7a>
 80048fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048fe:	b141      	cbz	r1, 8004912 <__swsetup_r+0x6a>
 8004900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004904:	4299      	cmp	r1, r3
 8004906:	d002      	beq.n	800490e <__swsetup_r+0x66>
 8004908:	4630      	mov	r0, r6
 800490a:	f7ff fbd3 	bl	80040b4 <_free_r>
 800490e:	2300      	movs	r3, #0
 8004910:	6363      	str	r3, [r4, #52]	; 0x34
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	2300      	movs	r3, #0
 800491c:	6063      	str	r3, [r4, #4]
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	f043 0308 	orr.w	r3, r3, #8
 8004928:	81a3      	strh	r3, [r4, #12]
 800492a:	6923      	ldr	r3, [r4, #16]
 800492c:	b94b      	cbnz	r3, 8004942 <__swsetup_r+0x9a>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004938:	d003      	beq.n	8004942 <__swsetup_r+0x9a>
 800493a:	4621      	mov	r1, r4
 800493c:	4630      	mov	r0, r6
 800493e:	f000 fa07 	bl	8004d50 <__smakebuf_r>
 8004942:	89a0      	ldrh	r0, [r4, #12]
 8004944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004948:	f010 0301 	ands.w	r3, r0, #1
 800494c:	d00a      	beq.n	8004964 <__swsetup_r+0xbc>
 800494e:	2300      	movs	r3, #0
 8004950:	60a3      	str	r3, [r4, #8]
 8004952:	6963      	ldr	r3, [r4, #20]
 8004954:	425b      	negs	r3, r3
 8004956:	61a3      	str	r3, [r4, #24]
 8004958:	6923      	ldr	r3, [r4, #16]
 800495a:	b943      	cbnz	r3, 800496e <__swsetup_r+0xc6>
 800495c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004960:	d1ba      	bne.n	80048d8 <__swsetup_r+0x30>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	0781      	lsls	r1, r0, #30
 8004966:	bf58      	it	pl
 8004968:	6963      	ldrpl	r3, [r4, #20]
 800496a:	60a3      	str	r3, [r4, #8]
 800496c:	e7f4      	b.n	8004958 <__swsetup_r+0xb0>
 800496e:	2000      	movs	r0, #0
 8004970:	e7f7      	b.n	8004962 <__swsetup_r+0xba>
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c
 8004978:	08005508 	.word	0x08005508
 800497c:	08005528 	.word	0x08005528
 8004980:	080054e8 	.word	0x080054e8

08004984 <abort>:
 8004984:	b508      	push	{r3, lr}
 8004986:	2006      	movs	r0, #6
 8004988:	f000 fa56 	bl	8004e38 <raise>
 800498c:	2001      	movs	r0, #1
 800498e:	f7fc fb67 	bl	8001060 <_exit>
	...

08004994 <__sflush_r>:
 8004994:	898a      	ldrh	r2, [r1, #12]
 8004996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499a:	4605      	mov	r5, r0
 800499c:	0710      	lsls	r0, r2, #28
 800499e:	460c      	mov	r4, r1
 80049a0:	d458      	bmi.n	8004a54 <__sflush_r+0xc0>
 80049a2:	684b      	ldr	r3, [r1, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dc05      	bgt.n	80049b4 <__sflush_r+0x20>
 80049a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dc02      	bgt.n	80049b4 <__sflush_r+0x20>
 80049ae:	2000      	movs	r0, #0
 80049b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	d0f9      	beq.n	80049ae <__sflush_r+0x1a>
 80049ba:	2300      	movs	r3, #0
 80049bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049c0:	682f      	ldr	r7, [r5, #0]
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	d032      	beq.n	8004a2c <__sflush_r+0x98>
 80049c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	075a      	lsls	r2, r3, #29
 80049cc:	d505      	bpl.n	80049da <__sflush_r+0x46>
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	1ac0      	subs	r0, r0, r3
 80049d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049d4:	b10b      	cbz	r3, 80049da <__sflush_r+0x46>
 80049d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049d8:	1ac0      	subs	r0, r0, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	4602      	mov	r2, r0
 80049de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049e0:	6a21      	ldr	r1, [r4, #32]
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b0      	blx	r6
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	d106      	bne.n	80049fa <__sflush_r+0x66>
 80049ec:	6829      	ldr	r1, [r5, #0]
 80049ee:	291d      	cmp	r1, #29
 80049f0:	d82c      	bhi.n	8004a4c <__sflush_r+0xb8>
 80049f2:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <__sflush_r+0x108>)
 80049f4:	40ca      	lsrs	r2, r1
 80049f6:	07d6      	lsls	r6, r2, #31
 80049f8:	d528      	bpl.n	8004a4c <__sflush_r+0xb8>
 80049fa:	2200      	movs	r2, #0
 80049fc:	6062      	str	r2, [r4, #4]
 80049fe:	04d9      	lsls	r1, r3, #19
 8004a00:	6922      	ldr	r2, [r4, #16]
 8004a02:	6022      	str	r2, [r4, #0]
 8004a04:	d504      	bpl.n	8004a10 <__sflush_r+0x7c>
 8004a06:	1c42      	adds	r2, r0, #1
 8004a08:	d101      	bne.n	8004a0e <__sflush_r+0x7a>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	b903      	cbnz	r3, 8004a10 <__sflush_r+0x7c>
 8004a0e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a12:	602f      	str	r7, [r5, #0]
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d0ca      	beq.n	80049ae <__sflush_r+0x1a>
 8004a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a1c:	4299      	cmp	r1, r3
 8004a1e:	d002      	beq.n	8004a26 <__sflush_r+0x92>
 8004a20:	4628      	mov	r0, r5
 8004a22:	f7ff fb47 	bl	80040b4 <_free_r>
 8004a26:	2000      	movs	r0, #0
 8004a28:	6360      	str	r0, [r4, #52]	; 0x34
 8004a2a:	e7c1      	b.n	80049b0 <__sflush_r+0x1c>
 8004a2c:	6a21      	ldr	r1, [r4, #32]
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b0      	blx	r6
 8004a34:	1c41      	adds	r1, r0, #1
 8004a36:	d1c7      	bne.n	80049c8 <__sflush_r+0x34>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0c4      	beq.n	80049c8 <__sflush_r+0x34>
 8004a3e:	2b1d      	cmp	r3, #29
 8004a40:	d001      	beq.n	8004a46 <__sflush_r+0xb2>
 8004a42:	2b16      	cmp	r3, #22
 8004a44:	d101      	bne.n	8004a4a <__sflush_r+0xb6>
 8004a46:	602f      	str	r7, [r5, #0]
 8004a48:	e7b1      	b.n	80049ae <__sflush_r+0x1a>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	e7ad      	b.n	80049b0 <__sflush_r+0x1c>
 8004a54:	690f      	ldr	r7, [r1, #16]
 8004a56:	2f00      	cmp	r7, #0
 8004a58:	d0a9      	beq.n	80049ae <__sflush_r+0x1a>
 8004a5a:	0793      	lsls	r3, r2, #30
 8004a5c:	680e      	ldr	r6, [r1, #0]
 8004a5e:	bf08      	it	eq
 8004a60:	694b      	ldreq	r3, [r1, #20]
 8004a62:	600f      	str	r7, [r1, #0]
 8004a64:	bf18      	it	ne
 8004a66:	2300      	movne	r3, #0
 8004a68:	eba6 0807 	sub.w	r8, r6, r7
 8004a6c:	608b      	str	r3, [r1, #8]
 8004a6e:	f1b8 0f00 	cmp.w	r8, #0
 8004a72:	dd9c      	ble.n	80049ae <__sflush_r+0x1a>
 8004a74:	6a21      	ldr	r1, [r4, #32]
 8004a76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a78:	4643      	mov	r3, r8
 8004a7a:	463a      	mov	r2, r7
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b0      	blx	r6
 8004a80:	2800      	cmp	r0, #0
 8004a82:	dc06      	bgt.n	8004a92 <__sflush_r+0xfe>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	e78e      	b.n	80049b0 <__sflush_r+0x1c>
 8004a92:	4407      	add	r7, r0
 8004a94:	eba8 0800 	sub.w	r8, r8, r0
 8004a98:	e7e9      	b.n	8004a6e <__sflush_r+0xda>
 8004a9a:	bf00      	nop
 8004a9c:	20400001 	.word	0x20400001

08004aa0 <_fflush_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	690b      	ldr	r3, [r1, #16]
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	b913      	cbnz	r3, 8004ab0 <_fflush_r+0x10>
 8004aaa:	2500      	movs	r5, #0
 8004aac:	4628      	mov	r0, r5
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	b118      	cbz	r0, 8004aba <_fflush_r+0x1a>
 8004ab2:	6983      	ldr	r3, [r0, #24]
 8004ab4:	b90b      	cbnz	r3, 8004aba <_fflush_r+0x1a>
 8004ab6:	f000 f887 	bl	8004bc8 <__sinit>
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <_fflush_r+0x6c>)
 8004abc:	429c      	cmp	r4, r3
 8004abe:	d11b      	bne.n	8004af8 <_fflush_r+0x58>
 8004ac0:	686c      	ldr	r4, [r5, #4]
 8004ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ef      	beq.n	8004aaa <_fflush_r+0xa>
 8004aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004acc:	07d0      	lsls	r0, r2, #31
 8004ace:	d404      	bmi.n	8004ada <_fflush_r+0x3a>
 8004ad0:	0599      	lsls	r1, r3, #22
 8004ad2:	d402      	bmi.n	8004ada <_fflush_r+0x3a>
 8004ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ad6:	f000 f915 	bl	8004d04 <__retarget_lock_acquire_recursive>
 8004ada:	4628      	mov	r0, r5
 8004adc:	4621      	mov	r1, r4
 8004ade:	f7ff ff59 	bl	8004994 <__sflush_r>
 8004ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae4:	07da      	lsls	r2, r3, #31
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	d4e0      	bmi.n	8004aac <_fflush_r+0xc>
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	059b      	lsls	r3, r3, #22
 8004aee:	d4dd      	bmi.n	8004aac <_fflush_r+0xc>
 8004af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004af2:	f000 f908 	bl	8004d06 <__retarget_lock_release_recursive>
 8004af6:	e7d9      	b.n	8004aac <_fflush_r+0xc>
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <_fflush_r+0x70>)
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d101      	bne.n	8004b02 <_fflush_r+0x62>
 8004afe:	68ac      	ldr	r4, [r5, #8]
 8004b00:	e7df      	b.n	8004ac2 <_fflush_r+0x22>
 8004b02:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <_fflush_r+0x74>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	bf08      	it	eq
 8004b08:	68ec      	ldreq	r4, [r5, #12]
 8004b0a:	e7da      	b.n	8004ac2 <_fflush_r+0x22>
 8004b0c:	08005508 	.word	0x08005508
 8004b10:	08005528 	.word	0x08005528
 8004b14:	080054e8 	.word	0x080054e8

08004b18 <std>:
 8004b18:	2300      	movs	r3, #0
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b26:	6083      	str	r3, [r0, #8]
 8004b28:	8181      	strh	r1, [r0, #12]
 8004b2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b2c:	81c2      	strh	r2, [r0, #14]
 8004b2e:	6183      	str	r3, [r0, #24]
 8004b30:	4619      	mov	r1, r3
 8004b32:	2208      	movs	r2, #8
 8004b34:	305c      	adds	r0, #92	; 0x5c
 8004b36:	f7ff fa19 	bl	8003f6c <memset>
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <std+0x38>)
 8004b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <std+0x3c>)
 8004b40:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <std+0x40>)
 8004b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <std+0x44>)
 8004b48:	6224      	str	r4, [r4, #32]
 8004b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004b4c:	bd10      	pop	{r4, pc}
 8004b4e:	bf00      	nop
 8004b50:	08004e71 	.word	0x08004e71
 8004b54:	08004e93 	.word	0x08004e93
 8004b58:	08004ecb 	.word	0x08004ecb
 8004b5c:	08004eef 	.word	0x08004eef

08004b60 <_cleanup_r>:
 8004b60:	4901      	ldr	r1, [pc, #4]	; (8004b68 <_cleanup_r+0x8>)
 8004b62:	f000 b8af 	b.w	8004cc4 <_fwalk_reent>
 8004b66:	bf00      	nop
 8004b68:	08004aa1 	.word	0x08004aa1

08004b6c <__sfmoreglue>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	1e4a      	subs	r2, r1, #1
 8004b70:	2568      	movs	r5, #104	; 0x68
 8004b72:	4355      	muls	r5, r2
 8004b74:	460e      	mov	r6, r1
 8004b76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b7a:	f7ff faeb 	bl	8004154 <_malloc_r>
 8004b7e:	4604      	mov	r4, r0
 8004b80:	b140      	cbz	r0, 8004b94 <__sfmoreglue+0x28>
 8004b82:	2100      	movs	r1, #0
 8004b84:	e9c0 1600 	strd	r1, r6, [r0]
 8004b88:	300c      	adds	r0, #12
 8004b8a:	60a0      	str	r0, [r4, #8]
 8004b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b90:	f7ff f9ec 	bl	8003f6c <memset>
 8004b94:	4620      	mov	r0, r4
 8004b96:	bd70      	pop	{r4, r5, r6, pc}

08004b98 <__sfp_lock_acquire>:
 8004b98:	4801      	ldr	r0, [pc, #4]	; (8004ba0 <__sfp_lock_acquire+0x8>)
 8004b9a:	f000 b8b3 	b.w	8004d04 <__retarget_lock_acquire_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	200002a4 	.word	0x200002a4

08004ba4 <__sfp_lock_release>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__sfp_lock_release+0x8>)
 8004ba6:	f000 b8ae 	b.w	8004d06 <__retarget_lock_release_recursive>
 8004baa:	bf00      	nop
 8004bac:	200002a4 	.word	0x200002a4

08004bb0 <__sinit_lock_acquire>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__sinit_lock_acquire+0x8>)
 8004bb2:	f000 b8a7 	b.w	8004d04 <__retarget_lock_acquire_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	2000029f 	.word	0x2000029f

08004bbc <__sinit_lock_release>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	; (8004bc4 <__sinit_lock_release+0x8>)
 8004bbe:	f000 b8a2 	b.w	8004d06 <__retarget_lock_release_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	2000029f 	.word	0x2000029f

08004bc8 <__sinit>:
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	4604      	mov	r4, r0
 8004bcc:	f7ff fff0 	bl	8004bb0 <__sinit_lock_acquire>
 8004bd0:	69a3      	ldr	r3, [r4, #24]
 8004bd2:	b11b      	cbz	r3, 8004bdc <__sinit+0x14>
 8004bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd8:	f7ff bff0 	b.w	8004bbc <__sinit_lock_release>
 8004bdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004be0:	6523      	str	r3, [r4, #80]	; 0x50
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <__sinit+0x68>)
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <__sinit+0x6c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	bf04      	itt	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	61a3      	streq	r3, [r4, #24]
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 f820 	bl	8004c38 <__sfp>
 8004bf8:	6060      	str	r0, [r4, #4]
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f81c 	bl	8004c38 <__sfp>
 8004c00:	60a0      	str	r0, [r4, #8]
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 f818 	bl	8004c38 <__sfp>
 8004c08:	2200      	movs	r2, #0
 8004c0a:	60e0      	str	r0, [r4, #12]
 8004c0c:	2104      	movs	r1, #4
 8004c0e:	6860      	ldr	r0, [r4, #4]
 8004c10:	f7ff ff82 	bl	8004b18 <std>
 8004c14:	68a0      	ldr	r0, [r4, #8]
 8004c16:	2201      	movs	r2, #1
 8004c18:	2109      	movs	r1, #9
 8004c1a:	f7ff ff7d 	bl	8004b18 <std>
 8004c1e:	68e0      	ldr	r0, [r4, #12]
 8004c20:	2202      	movs	r2, #2
 8004c22:	2112      	movs	r1, #18
 8004c24:	f7ff ff78 	bl	8004b18 <std>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	61a3      	str	r3, [r4, #24]
 8004c2c:	e7d2      	b.n	8004bd4 <__sinit+0xc>
 8004c2e:	bf00      	nop
 8004c30:	080053fc 	.word	0x080053fc
 8004c34:	08004b61 	.word	0x08004b61

08004c38 <__sfp>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	4607      	mov	r7, r0
 8004c3c:	f7ff ffac 	bl	8004b98 <__sfp_lock_acquire>
 8004c40:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <__sfp+0x84>)
 8004c42:	681e      	ldr	r6, [r3, #0]
 8004c44:	69b3      	ldr	r3, [r6, #24]
 8004c46:	b913      	cbnz	r3, 8004c4e <__sfp+0x16>
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f7ff ffbd 	bl	8004bc8 <__sinit>
 8004c4e:	3648      	adds	r6, #72	; 0x48
 8004c50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	d503      	bpl.n	8004c60 <__sfp+0x28>
 8004c58:	6833      	ldr	r3, [r6, #0]
 8004c5a:	b30b      	cbz	r3, 8004ca0 <__sfp+0x68>
 8004c5c:	6836      	ldr	r6, [r6, #0]
 8004c5e:	e7f7      	b.n	8004c50 <__sfp+0x18>
 8004c60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c64:	b9d5      	cbnz	r5, 8004c9c <__sfp+0x64>
 8004c66:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <__sfp+0x88>)
 8004c68:	60e3      	str	r3, [r4, #12]
 8004c6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004c70:	f000 f847 	bl	8004d02 <__retarget_lock_init_recursive>
 8004c74:	f7ff ff96 	bl	8004ba4 <__sfp_lock_release>
 8004c78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c80:	6025      	str	r5, [r4, #0]
 8004c82:	61a5      	str	r5, [r4, #24]
 8004c84:	2208      	movs	r2, #8
 8004c86:	4629      	mov	r1, r5
 8004c88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c8c:	f7ff f96e 	bl	8003f6c <memset>
 8004c90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c98:	4620      	mov	r0, r4
 8004c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c9c:	3468      	adds	r4, #104	; 0x68
 8004c9e:	e7d9      	b.n	8004c54 <__sfp+0x1c>
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	f7ff ff62 	bl	8004b6c <__sfmoreglue>
 8004ca8:	4604      	mov	r4, r0
 8004caa:	6030      	str	r0, [r6, #0]
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d1d5      	bne.n	8004c5c <__sfp+0x24>
 8004cb0:	f7ff ff78 	bl	8004ba4 <__sfp_lock_release>
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	e7ee      	b.n	8004c98 <__sfp+0x60>
 8004cba:	bf00      	nop
 8004cbc:	080053fc 	.word	0x080053fc
 8004cc0:	ffff0001 	.word	0xffff0001

08004cc4 <_fwalk_reent>:
 8004cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc8:	4606      	mov	r6, r0
 8004cca:	4688      	mov	r8, r1
 8004ccc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cd0:	2700      	movs	r7, #0
 8004cd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cd6:	f1b9 0901 	subs.w	r9, r9, #1
 8004cda:	d505      	bpl.n	8004ce8 <_fwalk_reent+0x24>
 8004cdc:	6824      	ldr	r4, [r4, #0]
 8004cde:	2c00      	cmp	r4, #0
 8004ce0:	d1f7      	bne.n	8004cd2 <_fwalk_reent+0xe>
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce8:	89ab      	ldrh	r3, [r5, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d907      	bls.n	8004cfe <_fwalk_reent+0x3a>
 8004cee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	d003      	beq.n	8004cfe <_fwalk_reent+0x3a>
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	47c0      	blx	r8
 8004cfc:	4307      	orrs	r7, r0
 8004cfe:	3568      	adds	r5, #104	; 0x68
 8004d00:	e7e9      	b.n	8004cd6 <_fwalk_reent+0x12>

08004d02 <__retarget_lock_init_recursive>:
 8004d02:	4770      	bx	lr

08004d04 <__retarget_lock_acquire_recursive>:
 8004d04:	4770      	bx	lr

08004d06 <__retarget_lock_release_recursive>:
 8004d06:	4770      	bx	lr

08004d08 <__swhatbuf_r>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	460e      	mov	r6, r1
 8004d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d10:	2900      	cmp	r1, #0
 8004d12:	b096      	sub	sp, #88	; 0x58
 8004d14:	4614      	mov	r4, r2
 8004d16:	461d      	mov	r5, r3
 8004d18:	da07      	bge.n	8004d2a <__swhatbuf_r+0x22>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	89b3      	ldrh	r3, [r6, #12]
 8004d20:	061a      	lsls	r2, r3, #24
 8004d22:	d410      	bmi.n	8004d46 <__swhatbuf_r+0x3e>
 8004d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d28:	e00e      	b.n	8004d48 <__swhatbuf_r+0x40>
 8004d2a:	466a      	mov	r2, sp
 8004d2c:	f000 f906 	bl	8004f3c <_fstat_r>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	dbf2      	blt.n	8004d1a <__swhatbuf_r+0x12>
 8004d34:	9a01      	ldr	r2, [sp, #4]
 8004d36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d3e:	425a      	negs	r2, r3
 8004d40:	415a      	adcs	r2, r3
 8004d42:	602a      	str	r2, [r5, #0]
 8004d44:	e7ee      	b.n	8004d24 <__swhatbuf_r+0x1c>
 8004d46:	2340      	movs	r3, #64	; 0x40
 8004d48:	2000      	movs	r0, #0
 8004d4a:	6023      	str	r3, [r4, #0]
 8004d4c:	b016      	add	sp, #88	; 0x58
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}

08004d50 <__smakebuf_r>:
 8004d50:	898b      	ldrh	r3, [r1, #12]
 8004d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d54:	079d      	lsls	r5, r3, #30
 8004d56:	4606      	mov	r6, r0
 8004d58:	460c      	mov	r4, r1
 8004d5a:	d507      	bpl.n	8004d6c <__smakebuf_r+0x1c>
 8004d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	2301      	movs	r3, #1
 8004d66:	6163      	str	r3, [r4, #20]
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	ab01      	add	r3, sp, #4
 8004d6e:	466a      	mov	r2, sp
 8004d70:	f7ff ffca 	bl	8004d08 <__swhatbuf_r>
 8004d74:	9900      	ldr	r1, [sp, #0]
 8004d76:	4605      	mov	r5, r0
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f7ff f9eb 	bl	8004154 <_malloc_r>
 8004d7e:	b948      	cbnz	r0, 8004d94 <__smakebuf_r+0x44>
 8004d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d84:	059a      	lsls	r2, r3, #22
 8004d86:	d4ef      	bmi.n	8004d68 <__smakebuf_r+0x18>
 8004d88:	f023 0303 	bic.w	r3, r3, #3
 8004d8c:	f043 0302 	orr.w	r3, r3, #2
 8004d90:	81a3      	strh	r3, [r4, #12]
 8004d92:	e7e3      	b.n	8004d5c <__smakebuf_r+0xc>
 8004d94:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <__smakebuf_r+0x7c>)
 8004d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	6020      	str	r0, [r4, #0]
 8004d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da0:	81a3      	strh	r3, [r4, #12]
 8004da2:	9b00      	ldr	r3, [sp, #0]
 8004da4:	6163      	str	r3, [r4, #20]
 8004da6:	9b01      	ldr	r3, [sp, #4]
 8004da8:	6120      	str	r0, [r4, #16]
 8004daa:	b15b      	cbz	r3, 8004dc4 <__smakebuf_r+0x74>
 8004dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db0:	4630      	mov	r0, r6
 8004db2:	f000 f8d5 	bl	8004f60 <_isatty_r>
 8004db6:	b128      	cbz	r0, 8004dc4 <__smakebuf_r+0x74>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	89a0      	ldrh	r0, [r4, #12]
 8004dc6:	4305      	orrs	r5, r0
 8004dc8:	81a5      	strh	r5, [r4, #12]
 8004dca:	e7cd      	b.n	8004d68 <__smakebuf_r+0x18>
 8004dcc:	08004b61 	.word	0x08004b61

08004dd0 <__malloc_lock>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__malloc_lock+0x8>)
 8004dd2:	f7ff bf97 	b.w	8004d04 <__retarget_lock_acquire_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	200002a0 	.word	0x200002a0

08004ddc <__malloc_unlock>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	; (8004de4 <__malloc_unlock+0x8>)
 8004dde:	f7ff bf92 	b.w	8004d06 <__retarget_lock_release_recursive>
 8004de2:	bf00      	nop
 8004de4:	200002a0 	.word	0x200002a0

08004de8 <_raise_r>:
 8004de8:	291f      	cmp	r1, #31
 8004dea:	b538      	push	{r3, r4, r5, lr}
 8004dec:	4604      	mov	r4, r0
 8004dee:	460d      	mov	r5, r1
 8004df0:	d904      	bls.n	8004dfc <_raise_r+0x14>
 8004df2:	2316      	movs	r3, #22
 8004df4:	6003      	str	r3, [r0, #0]
 8004df6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004dfe:	b112      	cbz	r2, 8004e06 <_raise_r+0x1e>
 8004e00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e04:	b94b      	cbnz	r3, 8004e1a <_raise_r+0x32>
 8004e06:	4620      	mov	r0, r4
 8004e08:	f000 f830 	bl	8004e6c <_getpid_r>
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	4601      	mov	r1, r0
 8004e10:	4620      	mov	r0, r4
 8004e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e16:	f000 b817 	b.w	8004e48 <_kill_r>
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d00a      	beq.n	8004e34 <_raise_r+0x4c>
 8004e1e:	1c59      	adds	r1, r3, #1
 8004e20:	d103      	bne.n	8004e2a <_raise_r+0x42>
 8004e22:	2316      	movs	r3, #22
 8004e24:	6003      	str	r3, [r0, #0]
 8004e26:	2001      	movs	r0, #1
 8004e28:	e7e7      	b.n	8004dfa <_raise_r+0x12>
 8004e2a:	2400      	movs	r4, #0
 8004e2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004e30:	4628      	mov	r0, r5
 8004e32:	4798      	blx	r3
 8004e34:	2000      	movs	r0, #0
 8004e36:	e7e0      	b.n	8004dfa <_raise_r+0x12>

08004e38 <raise>:
 8004e38:	4b02      	ldr	r3, [pc, #8]	; (8004e44 <raise+0xc>)
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	f7ff bfd3 	b.w	8004de8 <_raise_r>
 8004e42:	bf00      	nop
 8004e44:	2000000c 	.word	0x2000000c

08004e48 <_kill_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4d07      	ldr	r5, [pc, #28]	; (8004e68 <_kill_r+0x20>)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	4611      	mov	r1, r2
 8004e54:	602b      	str	r3, [r5, #0]
 8004e56:	f7fc f8f3 	bl	8001040 <_kill>
 8004e5a:	1c43      	adds	r3, r0, #1
 8004e5c:	d102      	bne.n	8004e64 <_kill_r+0x1c>
 8004e5e:	682b      	ldr	r3, [r5, #0]
 8004e60:	b103      	cbz	r3, 8004e64 <_kill_r+0x1c>
 8004e62:	6023      	str	r3, [r4, #0]
 8004e64:	bd38      	pop	{r3, r4, r5, pc}
 8004e66:	bf00      	nop
 8004e68:	200002a8 	.word	0x200002a8

08004e6c <_getpid_r>:
 8004e6c:	f7fc b8e0 	b.w	8001030 <_getpid>

08004e70 <__sread>:
 8004e70:	b510      	push	{r4, lr}
 8004e72:	460c      	mov	r4, r1
 8004e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e78:	f000 f894 	bl	8004fa4 <_read_r>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	bfab      	itete	ge
 8004e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e82:	89a3      	ldrhlt	r3, [r4, #12]
 8004e84:	181b      	addge	r3, r3, r0
 8004e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e8a:	bfac      	ite	ge
 8004e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e8e:	81a3      	strhlt	r3, [r4, #12]
 8004e90:	bd10      	pop	{r4, pc}

08004e92 <__swrite>:
 8004e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e96:	461f      	mov	r7, r3
 8004e98:	898b      	ldrh	r3, [r1, #12]
 8004e9a:	05db      	lsls	r3, r3, #23
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	4616      	mov	r6, r2
 8004ea2:	d505      	bpl.n	8004eb0 <__swrite+0x1e>
 8004ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f000 f868 	bl	8004f80 <_lseek_r>
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec6:	f000 b817 	b.w	8004ef8 <_write_r>

08004eca <__sseek>:
 8004eca:	b510      	push	{r4, lr}
 8004ecc:	460c      	mov	r4, r1
 8004ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed2:	f000 f855 	bl	8004f80 <_lseek_r>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	bf15      	itete	ne
 8004edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ee6:	81a3      	strheq	r3, [r4, #12]
 8004ee8:	bf18      	it	ne
 8004eea:	81a3      	strhne	r3, [r4, #12]
 8004eec:	bd10      	pop	{r4, pc}

08004eee <__sclose>:
 8004eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef2:	f000 b813 	b.w	8004f1c <_close_r>
	...

08004ef8 <_write_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	; (8004f18 <_write_r+0x20>)
 8004efc:	4604      	mov	r4, r0
 8004efe:	4608      	mov	r0, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fc f8d1 	bl	80010ae <_write>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_write_r+0x1e>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_write_r+0x1e>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	200002a8 	.word	0x200002a8

08004f1c <_close_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d06      	ldr	r5, [pc, #24]	; (8004f38 <_close_r+0x1c>)
 8004f20:	2300      	movs	r3, #0
 8004f22:	4604      	mov	r4, r0
 8004f24:	4608      	mov	r0, r1
 8004f26:	602b      	str	r3, [r5, #0]
 8004f28:	f7fc f8dd 	bl	80010e6 <_close>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_close_r+0x1a>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_close_r+0x1a>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	200002a8 	.word	0x200002a8

08004f3c <_fstat_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d07      	ldr	r5, [pc, #28]	; (8004f5c <_fstat_r+0x20>)
 8004f40:	2300      	movs	r3, #0
 8004f42:	4604      	mov	r4, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	4611      	mov	r1, r2
 8004f48:	602b      	str	r3, [r5, #0]
 8004f4a:	f7fc f8d8 	bl	80010fe <_fstat>
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	d102      	bne.n	8004f58 <_fstat_r+0x1c>
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	b103      	cbz	r3, 8004f58 <_fstat_r+0x1c>
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	bd38      	pop	{r3, r4, r5, pc}
 8004f5a:	bf00      	nop
 8004f5c:	200002a8 	.word	0x200002a8

08004f60 <_isatty_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d06      	ldr	r5, [pc, #24]	; (8004f7c <_isatty_r+0x1c>)
 8004f64:	2300      	movs	r3, #0
 8004f66:	4604      	mov	r4, r0
 8004f68:	4608      	mov	r0, r1
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	f7fc f8d7 	bl	800111e <_isatty>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	d102      	bne.n	8004f7a <_isatty_r+0x1a>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	b103      	cbz	r3, 8004f7a <_isatty_r+0x1a>
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	200002a8 	.word	0x200002a8

08004f80 <_lseek_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4d07      	ldr	r5, [pc, #28]	; (8004fa0 <_lseek_r+0x20>)
 8004f84:	4604      	mov	r4, r0
 8004f86:	4608      	mov	r0, r1
 8004f88:	4611      	mov	r1, r2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	602a      	str	r2, [r5, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f7fc f8d0 	bl	8001134 <_lseek>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_lseek_r+0x1e>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_lseek_r+0x1e>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	200002a8 	.word	0x200002a8

08004fa4 <_read_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d07      	ldr	r5, [pc, #28]	; (8004fc4 <_read_r+0x20>)
 8004fa8:	4604      	mov	r4, r0
 8004faa:	4608      	mov	r0, r1
 8004fac:	4611      	mov	r1, r2
 8004fae:	2200      	movs	r2, #0
 8004fb0:	602a      	str	r2, [r5, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f7fc f85e 	bl	8001074 <_read>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_read_r+0x1e>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_read_r+0x1e>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	200002a8 	.word	0x200002a8

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
