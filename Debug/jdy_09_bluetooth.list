
jdy_09_bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e60  08007e60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007e60  08007e60  00017e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e68  08007e68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e6c  08007e6c  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000070  08007ee0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08007ee0  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dcf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fee  00000000  00000000  00034e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00037e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00038b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189bb  00000000  00000000  000396e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001253b  00000000  00000000  0005209b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a84c  00000000  00000000  000645d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eee22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb0  00000000  00000000  000eee78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007828 	.word	0x08007828

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007828 	.word	0x08007828

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <JDY09_DisplayTerminal>:
 *
 * @return - void
 */

static void JDY09_DisplayTerminal(char *Msg)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	uint8_t Lenght = strlen(Msg);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fa01 	bl	80001f4 <strlen>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Lenght, JDY09_UART_TIMEOUET);
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <JDY09_DisplayTerminal+0x2c>)
 8000e02:	f004 f9b0 	bl	8005166 <HAL_UART_Transmit>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002c4 	.word	0x200002c4

08000e14 <JDY09_SendAndDisplayCmd>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[Command] - predefined command to send
 * @return - void
 */
static void JDY09_SendAndDisplayCmd(JDY09_t *jdy09, uint8_t *Command)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b095      	sub	sp, #84	; 0x54
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	uint8_t MsgRecieved[JDY09_RECIEVEBUFFERSIZE];

	//display send info on user display terminal
	JDY09_DisplayTerminal("Sending: ");
 8000e1e:	481e      	ldr	r0, [pc, #120]	; (8000e98 <JDY09_SendAndDisplayCmd+0x84>)
 8000e20:	f7ff ffe0 	bl	8000de4 <JDY09_DisplayTerminal>
	JDY09_DisplayTerminal((char*) Command);
 8000e24:	6838      	ldr	r0, [r7, #0]
 8000e26:	f7ff ffdd 	bl	8000de4 <JDY09_DisplayTerminal>

	//send data to JDY-09
	HAL_UART_Transmit(jdy09->huart, Command, strlen((char*) Command),
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681c      	ldr	r4, [r3, #0]
 8000e2e:	6838      	ldr	r0, [r7, #0]
 8000e30:	f7ff f9e0 	bl	80001f4 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3c:	6839      	ldr	r1, [r7, #0]
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f004 f991 	bl	8005166 <HAL_UART_Transmit>
	JDY09_UART_TIMEOUET);

	uint32_t responsetime = HAL_GetTick();
 8000e44:	f001 fcce 	bl	80027e4 <HAL_GetTick>
 8000e48:	64f8      	str	r0, [r7, #76]	; 0x4c
	//wait for response line


	while (jdy09->LinesRecieved == 0)
 8000e4a:	e00b      	b.n	8000e64 <JDY09_SendAndDisplayCmd+0x50>
	{
		if (HAL_GetTick() - responsetime < JDY09_UART_TIMEOUET)
 8000e4c:	f001 fcca 	bl	80027e4 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e5a:	d303      	bcc.n	8000e64 <JDY09_SendAndDisplayCmd+0x50>
		{
			// wait until timeout
		}
		else
		{
			JDY09_DisplayTerminal("No response, UART communication error\n\r");
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <JDY09_SendAndDisplayCmd+0x88>)
 8000e5e:	f7ff ffc1 	bl	8000de4 <JDY09_DisplayTerminal>
 8000e62:	e016      	b.n	8000e92 <JDY09_SendAndDisplayCmd+0x7e>
	while (jdy09->LinesRecieved == 0)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0ed      	beq.n	8000e4c <JDY09_SendAndDisplayCmd+0x38>
			return;
		}
	}

	//get message out of ring buffer
	JDY09_CheckPendingMessages(jdy09, MsgRecieved);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f922 	bl	80010c0 <JDY09_CheckPendingMessages>

	//display response
	JDY09_DisplayTerminal("Response: ");
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <JDY09_SendAndDisplayCmd+0x8c>)
 8000e7e:	f7ff ffb1 	bl	8000de4 <JDY09_DisplayTerminal>
	JDY09_DisplayTerminal((char*) MsgRecieved);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ffac 	bl	8000de4 <JDY09_DisplayTerminal>

	//clear message pending flag
	JDY09_ClearMsgPendingFlag(jdy09);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f909 	bl	80010a4 <JDY09_ClearMsgPendingFlag>
}
 8000e92:	3754      	adds	r7, #84	; 0x54
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	08007840 	.word	0x08007840
 8000e9c:	0800784c 	.word	0x0800784c
 8000ea0:	08007874 	.word	0x08007874

08000ea4 <JDY09_Init>:
 *
 * @return - void
 */
void JDY09_Init(JDY09_t *jdy09, UART_HandleTypeDef *huart,
		GPIO_TypeDef *StateGPIOPort, uint16_t StateGPIOPin)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	807b      	strh	r3, [r7, #2]

	// init msg
	JDY09_DisplayTerminal("JDY-09 Initializing... \n\r");
 8000eb2:	4822      	ldr	r0, [pc, #136]	; (8000f3c <JDY09_Init+0x98>)
 8000eb4:	f7ff ff96 	bl	8000de4 <JDY09_DisplayTerminal>

	// reset the ring buffer
	RB_Flush(&(jdy09->RingBuffer));
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3346      	adds	r3, #70	; 0x46
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fd92 	bl	80019e6 <RB_Flush>

	// Assign uart
	jdy09->huart = huart;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	601a      	str	r2, [r3, #0]

	// Assign GPIO for State pin
	jdy09->StateGPIOPort = StateGPIOPort;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	jdy09->StatePinNumber = StateGPIOPin;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
	HAL_UART_Receive_IT(jdy09->huart, &(jdy09->RecieveBufferIT), 1);
#endif

	// if dma mode is used for receive
#if (JDY09_UART_RX_DMA == 1)
	HAL_UARTEx_ReceiveToIdle_DMA(jdy09->huart, jdy09->RecieveBufferDMA,
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3304      	adds	r3, #4
 8000ee0:	2240      	movs	r2, #64	; 0x40
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f004 f9d1 	bl	800528a <HAL_UARTEx_ReceiveToIdle_DMA>
	JDY09_RECIEVEBUFFERSIZE);
	// to avoid callback from half message this has be disabled
	__HAL_DMA_DISABLE_IT(jdy09->huart->hdmarx, DMA_IT_HT);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0208 	bic.w	r2, r2, #8
 8000efe:	601a      	str	r2, [r3, #0]
#endif

	// small delay before transmission
	HAL_Delay(100);
 8000f00:	2064      	movs	r0, #100	; 0x64
 8000f02:	f001 fc7b 	bl	80027fc <HAL_Delay>

	//during init - disconnect and display basic information
	JDY09_Disconnect(jdy09);
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f000 f8ac 	bl	8001064 <JDY09_Disconnect>

	//for some reason this msg will not work in DMA recieve mode
	//solution yet to find
	JDY09_SendCommand(jdy09, JDY09_CMD_GETVERSION);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f000 f816 	bl	8000f40 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETADRESS);
 8000f14:	2102      	movs	r1, #2
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f000 f812 	bl	8000f40 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETBAUDRATE);
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f000 f80e 	bl	8000f40 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETNAME);
 8000f24:	2105      	movs	r1, #5
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 f80a 	bl	8000f40 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETPASSWORD);
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f000 f806 	bl	8000f40 <JDY09_SendCommand>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08007880 	.word	0x08007880

08000f40 <JDY09_SendCommand>:
 * @param[Command] - predefined commands that are in .h file
 *
 * @return - void
 */
void JDY09_SendCommand(JDY09_t *jdy09, JDY09_CMD Command)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
	// check if there is no connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	f002 fb0a 	bl	8003574 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d138      	bne.n	8000fd8 <JDY09_SendCommand+0x98>
			== GPIO_PIN_RESET)
	{
		switch (Command)
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	2b06      	cmp	r3, #6
 8000f6a:	d839      	bhi.n	8000fe0 <JDY09_SendCommand+0xa0>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <JDY09_SendCommand+0x34>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000f91 	.word	0x08000f91
 8000f78:	08000f9b 	.word	0x08000f9b
 8000f7c:	08000fa5 	.word	0x08000fa5
 8000f80:	08000faf 	.word	0x08000faf
 8000f84:	08000fb9 	.word	0x08000fb9
 8000f88:	08000fc3 	.word	0x08000fc3
 8000f8c:	08000fcd 	.word	0x08000fcd
		{
		case JDY09_CMD_GETVERSION:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+VERSION\r\n");
 8000f90:	4915      	ldr	r1, [pc, #84]	; (8000fe8 <JDY09_SendCommand+0xa8>)
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff3e 	bl	8000e14 <JDY09_SendAndDisplayCmd>
			break;
 8000f98:	e01d      	b.n	8000fd6 <JDY09_SendCommand+0x96>

		case JDY09_CMD_RESET:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+RESET\r\n");
 8000f9a:	4914      	ldr	r1, [pc, #80]	; (8000fec <JDY09_SendCommand+0xac>)
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff39 	bl	8000e14 <JDY09_SendAndDisplayCmd>
			break;
 8000fa2:	e018      	b.n	8000fd6 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETADRESS:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+LADDR\r\n");
 8000fa4:	4912      	ldr	r1, [pc, #72]	; (8000ff0 <JDY09_SendCommand+0xb0>)
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff34 	bl	8000e14 <JDY09_SendAndDisplayCmd>
			break;
 8000fac:	e013      	b.n	8000fd6 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETBAUDRATE:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+BAUD\r\n");
 8000fae:	4911      	ldr	r1, [pc, #68]	; (8000ff4 <JDY09_SendCommand+0xb4>)
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff2f 	bl	8000e14 <JDY09_SendAndDisplayCmd>
			break;
 8000fb6:	e00e      	b.n	8000fd6 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETPASSWORD:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+PIN\r\n");
 8000fb8:	490f      	ldr	r1, [pc, #60]	; (8000ff8 <JDY09_SendCommand+0xb8>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff2a 	bl	8000e14 <JDY09_SendAndDisplayCmd>
			break;
 8000fc0:	e009      	b.n	8000fd6 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETNAME:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+NAME\r\n");
 8000fc2:	490e      	ldr	r1, [pc, #56]	; (8000ffc <JDY09_SendCommand+0xbc>)
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff25 	bl	8000e14 <JDY09_SendAndDisplayCmd>
			break;
 8000fca:	e004      	b.n	8000fd6 <JDY09_SendCommand+0x96>

		case JDY09_CMD_SETDEFAULTSETTINGS:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+DEFAULT\r\n");
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <JDY09_SendCommand+0xc0>)
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff20 	bl	8000e14 <JDY09_SendAndDisplayCmd>
			break;
 8000fd4:	bf00      	nop
		}
		return;
 8000fd6:	e003      	b.n	8000fe0 <JDY09_SendCommand+0xa0>
	}

	// AT cmd error
	JDY09_DisplayTerminal("AT commands possible only in offline mode \n\r");
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <JDY09_SendCommand+0xc4>)
 8000fda:	f7ff ff03 	bl	8000de4 <JDY09_DisplayTerminal>
 8000fde:	e000      	b.n	8000fe2 <JDY09_SendCommand+0xa2>
		return;
 8000fe0:	bf00      	nop

}
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	0800789c 	.word	0x0800789c
 8000fec:	080078ac 	.word	0x080078ac
 8000ff0:	080078b8 	.word	0x080078b8
 8000ff4:	080078c4 	.word	0x080078c4
 8000ff8:	080078d0 	.word	0x080078d0
 8000ffc:	080078dc 	.word	0x080078dc
 8001000:	080078e8 	.word	0x080078e8
 8001004:	080078f8 	.word	0x080078f8

08001008 <JDY09_SendData>:
 * @param[Data] - data to send to device
 *
 * @return - void
 */
void JDY09_SendData(JDY09_t *jdy09, uint8_t *Data)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	// check if there is a connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800101e:	4619      	mov	r1, r3
 8001020:	4610      	mov	r0, r2
 8001022:	f002 faa7 	bl	8003574 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d110      	bne.n	800104e <JDY09_SendData+0x46>
			== GPIO_PIN_SET)
	{
		// send array of bytes to external device
		HAL_UART_Transmit(jdy09->huart, Data, strlen((char*) Data),
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681c      	ldr	r4, [r3, #0]
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f7ff f8df 	bl	80001f4 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	4620      	mov	r0, r4
 8001042:	f004 f890 	bl	8005166 <HAL_UART_Transmit>
		JDY09_UART_TIMEOUET);

		JDY09_DisplayTerminal(
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <JDY09_SendData+0x54>)
 8001048:	f7ff fecc 	bl	8000de4 <JDY09_DisplayTerminal>
				"Data transfer from JDY-09 to external device completed \n\r");

		return;
 800104c:	e002      	b.n	8001054 <JDY09_SendData+0x4c>
	}

	// AT cmd error
	JDY09_DisplayTerminal("Send data possible only in online mode \n\r");
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <JDY09_SendData+0x58>)
 8001050:	f7ff fec8 	bl	8000de4 <JDY09_DisplayTerminal>

}
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	08007928 	.word	0x08007928
 8001060:	08007964 	.word	0x08007964

08001064 <JDY09_Disconnect>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_Disconnect(JDY09_t *jdy09)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	//check connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8001078:	4619      	mov	r1, r3
 800107a:	4610      	mov	r0, r2
 800107c:	f002 fa7a 	bl	8003574 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d104      	bne.n	8001090 <JDY09_Disconnect+0x2c>
			== GPIO_PIN_SET)
	{
		// disconnect
		JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+DISC\r\n");
 8001086:	4905      	ldr	r1, [pc, #20]	; (800109c <JDY09_Disconnect+0x38>)
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fec3 	bl	8000e14 <JDY09_SendAndDisplayCmd>
		return;
 800108e:	e002      	b.n	8001096 <JDY09_Disconnect+0x32>
	}

	// AT cmd error
	JDY09_DisplayTerminal("Module already disconnected \n\r");
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <JDY09_Disconnect+0x3c>)
 8001092:	f7ff fea7 	bl	8000de4 <JDY09_DisplayTerminal>
}
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08007990 	.word	0x08007990
 80010a0:	0800799c 	.word	0x0800799c

080010a4 <JDY09_ClearMsgPendingFlag>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_ClearMsgPendingFlag(JDY09_t *jdy09)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	jdy09->MessagePending = JDY09_NOMESSAGE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <JDY09_CheckPendingMessages>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[*MsgBuffer] - pointer to buffer where message has to be written
 * @return - status : massage pending 1/0
 */
uint8_t JDY09_CheckPendingMessages(JDY09_t *jdy09, uint8_t *MsgBuffer)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]

	// Check if there is message finished
	if (jdy09->LinesRecieved > 0)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d032      	beq.n	800113c <JDY09_CheckPendingMessages+0x7c>
	{

		uint8_t i = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
		uint8_t temp = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73bb      	strb	r3, [r7, #14]
		do
		{
			// Move a sign to ring buffer
			RB_Read(&(jdy09->RingBuffer), &temp);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3346      	adds	r3, #70	; 0x46
 80010e2:	f107 020e 	add.w	r2, r7, #14
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fc23 	bl	8001934 <RB_Read>
			if (temp == JDY09_LASTCHARACTER)
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	2b0a      	cmp	r3, #10
 80010f2:	d10b      	bne.n	800110c <JDY09_CheckPendingMessages+0x4c>
			{
				MsgBuffer[i] = JDY09_LASTCHARACTER;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	220a      	movs	r2, #10
 80010fc:	701a      	strb	r2, [r3, #0]
				MsgBuffer[i + 1] = 0;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	3301      	adds	r3, #1
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e004      	b.n	8001116 <JDY09_CheckPendingMessages+0x56>
			}
			else
			{
				MsgBuffer[i] = temp;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	4413      	add	r3, r2
 8001112:	7bba      	ldrb	r2, [r7, #14]
 8001114:	701a      	strb	r2, [r3, #0]
			}
			i++;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	3301      	adds	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
			//rewrite signs until last character defined by user
		} while (temp != JDY09_LASTCHARACTER);
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	2b0a      	cmp	r3, #10
 8001120:	d1dd      	bne.n	80010de <JDY09_CheckPendingMessages+0x1e>
		//decrement LinesRecieved
		jdy09->LinesRecieved--;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8001128:	b2db      	uxtb	r3, r3
 800112a:	3b01      	subs	r3, #1
 800112c:	b2da      	uxtb	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		//set up flag that message is ready to parse
		jdy09->MessagePending = JDY09_MESSAGEPENDING;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	}

	// return if flag status
	return jdy09->MessagePending;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <JDY09_RxCpltCallbackDMA>:
 * @return - void
 */
#if (JDY09_UART_RX_DMA == 1)
void JDY09_RxCpltCallbackDMA(JDY09_t *jdy09, UART_HandleTypeDef *huart,
		uint16_t size)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	4613      	mov	r3, r2
 8001158:	80fb      	strh	r3, [r7, #6]

	//check if IRQ is coming from correct uart
	if (jdy09->huart->Instance == huart->Instance)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d143      	bne.n	80011f0 <JDY09_RxCpltCallbackDMA+0xa4>
	{

		uint8_t i;
		uint8_t newlines = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	75bb      	strb	r3, [r7, #22]
		//write message to ring buffer
		for (i = 0; i < size; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	75fb      	strb	r3, [r7, #23]
 8001170:	e015      	b.n	800119e <JDY09_RxCpltCallbackDMA+0x52>
		{
			RB_Write((&(jdy09->RingBuffer)), jdy09->RecieveBufferDMA[i]);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	791b      	ldrb	r3, [r3, #4]
 8001180:	4619      	mov	r1, r3
 8001182:	f000 fc04 	bl	800198e <RB_Write>

			// when line is complete -> add 1 to received lines
			// only when last char is \n
			if (jdy09->RecieveBufferDMA[i] == JDY09_LASTCHARACTER)
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	2b0a      	cmp	r3, #10
 8001190:	d102      	bne.n	8001198 <JDY09_RxCpltCallbackDMA+0x4c>
			{
				newlines++;
 8001192:	7dbb      	ldrb	r3, [r7, #22]
 8001194:	3301      	adds	r3, #1
 8001196:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < size; i++)
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	3301      	adds	r3, #1
 800119c:	75fb      	strb	r3, [r7, #23]
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8e4      	bhi.n	8001172 <JDY09_RxCpltCallbackDMA+0x26>
			}
		}

		if (newlines == 0)
 80011a8:	7dbb      	ldrb	r3, [r7, #22]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d108      	bne.n	80011c0 <JDY09_RxCpltCallbackDMA+0x74>
		{
			// if formt of data is not correct print msg
			JDY09_SendData(jdy09,
 80011ae:	4912      	ldr	r1, [pc, #72]	; (80011f8 <JDY09_RxCpltCallbackDMA+0xac>)
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f7ff ff29 	bl	8001008 <JDY09_SendData>
					(uint8_t*) "Error, message has to be finished with +LF \n\r");

			//flush ringbuffer to not send later trash data
			RB_Flush(&(jdy09->RingBuffer));
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3346      	adds	r3, #70	; 0x46
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fc13 	bl	80019e6 <RB_Flush>
		}

		// add new lines
		jdy09->LinesRecieved = +newlines;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	7dba      	ldrb	r2, [r7, #22]
 80011c4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca

		// start another IRQ for single sign
		HAL_UARTEx_ReceiveToIdle_DMA(jdy09->huart, jdy09->RecieveBufferDMA,
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3304      	adds	r3, #4
 80011d0:	2240      	movs	r2, #64	; 0x40
 80011d2:	4619      	mov	r1, r3
 80011d4:	f004 f859 	bl	800528a <HAL_UARTEx_ReceiveToIdle_DMA>
		JDY09_RECIEVEBUFFERSIZE);
		// to avoid callback from half message this has be disabled
		__HAL_DMA_DISABLE_IT(jdy09->huart->hdmarx, DMA_IT_HT);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0208 	bic.w	r2, r2, #8
 80011ee:	601a      	str	r2, [r3, #0]
	}
}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08007a90 	.word	0x08007a90

080011fc <JDY09_EXTICallback>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[GPIO_Pin] - pin number from EXTI
 * @return - void
 */
void JDY09_EXTICallback(JDY09_t *jdy09, uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]

	//check if IRQ is coming from STATE pin
	if (jdy09->StatePinNumber == GPIO_Pin)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	429a      	cmp	r2, r3
 8001212:	d112      	bne.n	800123a <JDY09_EXTICallback+0x3e>
	{
		// if trigger is caused by rising edge then new connection is made
		if (HAL_GPIO_ReadPin(BT_STATE_GPIO_Port, BT_STATE_Pin) == GPIO_PIN_SET)
 8001214:	2108      	movs	r1, #8
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <JDY09_EXTICallback+0x48>)
 8001218:	f002 f9ac 	bl	8003574 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d103      	bne.n	800122a <JDY09_EXTICallback+0x2e>
		{
			JDY09_DisplayTerminal("Device connected \n\r");
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <JDY09_EXTICallback+0x4c>)
 8001224:	f7ff fdde 	bl	8000de4 <JDY09_DisplayTerminal>
 8001228:	e002      	b.n	8001230 <JDY09_EXTICallback+0x34>
		}
		else
		// if trigger is from falling edge then msg disconnect
		{
			JDY09_DisplayTerminal("Device disconnected \n\r");
 800122a:	4808      	ldr	r0, [pc, #32]	; (800124c <JDY09_EXTICallback+0x50>)
 800122c:	f7ff fdda 	bl	8000de4 <JDY09_DisplayTerminal>
		}

		// clear ring buffer if device is connected/disconnected
		RB_Flush(&(jdy09->RingBuffer));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3346      	adds	r3, #70	; 0x46
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fbd6 	bl	80019e6 <RB_Flush>
	}
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40020800 	.word	0x40020800
 8001248:	08007ac0 	.word	0x08007ac0
 800124c:	08007ad4 	.word	0x08007ad4

08001250 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_DMA_Init+0x30>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <MX_DMA_Init+0x30>)
 8001260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_DMA_Init+0x30>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a43      	ldr	r2, [pc, #268]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a2e      	ldr	r2, [pc, #184]	; (80013b0 <MX_GPIO_Init+0x12c>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <MX_GPIO_Init+0x12c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TM1637_CLK_Pin|TM1637_DIO_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2106      	movs	r1, #6
 800130e:	4829      	ldr	r0, [pc, #164]	; (80013b4 <MX_GPIO_Init+0x130>)
 8001310:	f002 f948 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2120      	movs	r1, #32
 8001318:	4827      	ldr	r0, [pc, #156]	; (80013b8 <MX_GPIO_Init+0x134>)
 800131a:	f002 f943 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001324:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	481f      	ldr	r0, [pc, #124]	; (80013b4 <MX_GPIO_Init+0x130>)
 8001336:	f001 ff99 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TM1637_CLK_Pin|TM1637_DIO_Pin;
 800133a:	2306      	movs	r3, #6
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001342:	2301      	movs	r3, #1
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	4818      	ldr	r0, [pc, #96]	; (80013b4 <MX_GPIO_Init+0x130>)
 8001352:	f001 ff8b 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_STATE_Pin;
 8001356:	2308      	movs	r3, #8
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800135a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_STATE_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4812      	ldr	r0, [pc, #72]	; (80013b4 <MX_GPIO_Init+0x130>)
 800136c:	f001 ff7e 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001370:	2320      	movs	r3, #32
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_GPIO_Init+0x134>)
 8001388:	f001 ff70 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TMP102_ALERT_Pin;
 800138c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMP102_ALERT_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_GPIO_Init+0x138>)
 80013a2:	f001 ff63 	bl	800326c <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400

080013c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_I2C1_Init+0x50>)
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_I2C1_Init+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_I2C1_Init+0x50>)
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_I2C1_Init+0x58>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_I2C1_Init+0x50>)
 80013de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_I2C1_Init+0x50>)
 80013fe:	f002 f903 	bl	8003608 <HAL_I2C_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001408:	f000 f956 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000098 	.word	0x20000098
 8001414:	40005400 	.word	0x40005400
 8001418:	000186a0 	.word	0x000186a0

0800141c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_I2C_MspInit+0x84>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12b      	bne.n	8001496 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145a:	23c0      	movs	r3, #192	; 0xc0
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145e:	2312      	movs	r3, #18
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146a:	2304      	movs	r3, #4
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <HAL_I2C_MspInit+0x8c>)
 8001476:	f001 fef9 	bl	800326c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b0:	f001 f932 	bl	8002718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b4:	f000 f856 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b8:	f7ff fee4 	bl	8001284 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014bc:	f000 ffb6 	bl	800242c <MX_USART2_UART_Init>
  MX_DMA_Init();
 80014c0:	f7ff fec6 	bl	8001250 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014c4:	f000 ff88 	bl	80023d8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80014c8:	f7ff ff7a 	bl	80013c0 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014cc:	f000 f8b6 	bl	800163c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  I2CScan(&hi2c1);
 80014d0:	481c      	ldr	r0, [pc, #112]	; (8001544 <main+0x98>)
 80014d2:	f001 f883 	bl	80025dc <I2CScan>
  JDY09_Init(&JDY09_1, &huart1,BT_STATE_GPIO_Port,BT_STATE_Pin);
 80014d6:	2308      	movs	r3, #8
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <main+0x9c>)
 80014da:	491c      	ldr	r1, [pc, #112]	; (800154c <main+0xa0>)
 80014dc:	481c      	ldr	r0, [pc, #112]	; (8001550 <main+0xa4>)
 80014de:	f7ff fce1 	bl	8000ea4 <JDY09_Init>
  TMP102Init(&TMP102_1, &hi2c1, TMP102_ADDRESS);
 80014e2:	2248      	movs	r2, #72	; 0x48
 80014e4:	4917      	ldr	r1, [pc, #92]	; (8001544 <main+0x98>)
 80014e6:	481b      	ldr	r0, [pc, #108]	; (8001554 <main+0xa8>)
 80014e8:	f000 ff54 	bl	8002394 <TMP102Init>
  tm1637Init();
 80014ec:	f000 fa8e 	bl	8001a0c <tm1637Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // check if there is msg - if yes transfer it to a buffer
	  if(JDY09_CheckPendingMessages(&JDY09_1, TransferBuffer) == JDY09_MESSAGEPENDING)
 80014f0:	4919      	ldr	r1, [pc, #100]	; (8001558 <main+0xac>)
 80014f2:	4817      	ldr	r0, [pc, #92]	; (8001550 <main+0xa4>)
 80014f4:	f7ff fde4 	bl	80010c0 <JDY09_CheckPendingMessages>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10a      	bne.n	8001514 <main+0x68>
	  {
		  //clear pending flag
		  JDY09_ClearMsgPendingFlag(&JDY09_1);
 80014fe:	4814      	ldr	r0, [pc, #80]	; (8001550 <main+0xa4>)
 8001500:	f7ff fdd0 	bl	80010a4 <JDY09_ClearMsgPendingFlag>

		  //parse msg
		  ParseStatus = Parser_Parse(TransferBuffer,&TMP102_1);
 8001504:	4913      	ldr	r1, [pc, #76]	; (8001554 <main+0xa8>)
 8001506:	4814      	ldr	r0, [pc, #80]	; (8001558 <main+0xac>)
 8001508:	f000 f966 	bl	80017d8 <Parser_Parse>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <main+0xb0>)
 8001512:	701a      	strb	r2, [r3, #0]
	  }

	  tm1637DisplayDecimal((uint16_t)(TMP102GetTempFloat(&TMP102_1)*100), 1);
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <main+0xa8>)
 8001516:	f000 fda5 	bl	8002064 <TMP102GetTempFloat>
 800151a:	eef0 7a40 	vmov.f32	s15, s0
 800151e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001560 <main+0xb4>
 8001522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800152a:	ee17 3a90 	vmov	r3, s15
 800152e:	b29b      	uxth	r3, r3
 8001530:	2101      	movs	r1, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fab2 	bl	8001a9c <tm1637DisplayDecimal>
	  HAL_Delay(500);
 8001538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800153c:	f001 f95e 	bl	80027fc <HAL_Delay>
	  if(JDY09_CheckPendingMessages(&JDY09_1, TransferBuffer) == JDY09_MESSAGEPENDING)
 8001540:	e7d6      	b.n	80014f0 <main+0x44>
 8001542:	bf00      	nop
 8001544:	20000098 	.word	0x20000098
 8001548:	40020800 	.word	0x40020800
 800154c:	20000280 	.word	0x20000280
 8001550:	2000010c 	.word	0x2000010c
 8001554:	200000f8 	.word	0x200000f8
 8001558:	200001e0 	.word	0x200001e0
 800155c:	200000ec 	.word	0x200000ec
 8001560:	42c80000 	.word	0x42c80000

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	; 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	2230      	movs	r2, #48	; 0x30
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f004 ff58 	bl	8006428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <SystemClock_Config+0xd0>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a28      	ldr	r2, [pc, #160]	; (8001634 <SystemClock_Config+0xd0>)
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <SystemClock_Config+0xd0>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <SystemClock_Config+0xd4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <SystemClock_Config+0xd4>)
 80015b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <SystemClock_Config+0xd4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015cc:	2310      	movs	r3, #16
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d0:	2302      	movs	r3, #2
 80015d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015d8:	2310      	movs	r3, #16
 80015da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015e2:	2304      	movs	r3, #4
 80015e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015e6:	2307      	movs	r3, #7
 80015e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 f8f8 	bl	80047e4 <HAL_RCC_OscConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015fa:	f000 f85d 	bl	80016b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	230f      	movs	r3, #15
 8001600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001602:	2302      	movs	r3, #2
 8001604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2102      	movs	r1, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fb5a 	bl	8004cd4 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001626:	f000 f847 	bl	80016b8 <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	3750      	adds	r7, #80	; 0x50
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000

0800163c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2009      	movs	r0, #9
 8001646:	f001 f9d8 	bl	80029fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800164a:	2009      	movs	r0, #9
 800164c:	f001 f9f1 	bl	8002a32 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	2025      	movs	r0, #37	; 0x25
 8001656:	f001 f9d0 	bl	80029fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800165a:	2025      	movs	r0, #37	; 0x25
 800165c:	f001 f9e9 	bl	8002a32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	203a      	movs	r0, #58	; 0x3a
 8001666:	f001 f9c8 	bl	80029fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800166a:	203a      	movs	r0, #58	; 0x3a
 800166c:	f001 f9e1 	bl	8002a32 <HAL_NVIC_EnableIRQ>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_UARTEx_RxEventCallback>:
}
#endif

#if (JDY09_UART_RX_DMA == 1)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
	// Callback from BT module
	JDY09_RxCpltCallbackDMA(&JDY09_1, huart, Size);
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	461a      	mov	r2, r3
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <HAL_UARTEx_RxEventCallback+0x20>)
 8001688:	f7ff fd60 	bl	800114c <JDY09_RxCpltCallbackDMA>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000010c 	.word	0x2000010c

08001698 <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
	// Callback from EXTI
	JDY09_EXTICallback(&JDY09_1,GPIO_Pin);
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4803      	ldr	r0, [pc, #12]	; (80016b4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80016a8:	f7ff fda8 	bl	80011fc <JDY09_EXTICallback>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000010c 	.word	0x2000010c

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <Parser_DisplayTerminal>:
#include "stdlib.h"
#include "stdio.h"
#include "parse.h"

void Parser_DisplayTerminal(char *Msg)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	uint8_t Lenght = strlen(Msg);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7fe fd91 	bl	80001f4 <strlen>
 80016d2:	4603      	mov	r3, r0
 80016d4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) Msg, Lenght, 1000);
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <Parser_DisplayTerminal+0x2c>)
 80016e2:	f003 fd40 	bl	8005166 <HAL_UART_Transmit>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000280 	.word	0x20000280

080016f4 <Parser_WAKEUP>:

/*
 * @ WAKE UP procedure
 */
static void Parser_WAKEUP(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	//wake up for 5 mins
	Parser_DisplayTerminal("System wake up\n\r");
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <Parser_WAKEUP+0x10>)
 80016fa:	f7ff ffe3 	bl	80016c4 <Parser_DisplayTerminal>

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	08007aec 	.word	0x08007aec

08001708 <Parser_MEASURE>:

/*
 * @ MEASURE procedure
 */
static void Parser_MEASURE(TMP102_t *TMP102)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	// send log to uart
	Parser_DisplayTerminal("Measurment done :");
 8001710:	4815      	ldr	r0, [pc, #84]	; (8001768 <Parser_MEASURE+0x60>)
 8001712:	f7ff ffd7 	bl	80016c4 <Parser_DisplayTerminal>

	uint8_t buffer[2];
	uint8_t Msg[32];

	TMP102GetTempInt(TMP102,buffer);
 8001716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171a:	4619      	mov	r1, r3
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fce9 	bl	80020f4 <TMP102GetTempInt>

	if (buffer[1] > 9)
 8001722:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001726:	2b09      	cmp	r3, #9
 8001728:	d90a      	bls.n	8001740 <Parser_MEASURE+0x38>
	{
	sprintf((char*)Msg, " %d.%d deg C\n\r",buffer[0],buffer[1]);
 800172a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800172e:	461a      	mov	r2, r3
 8001730:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001734:	f107 000c 	add.w	r0, r7, #12
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <Parser_MEASURE+0x64>)
 800173a:	f004 fe7d 	bl	8006438 <siprintf>
 800173e:	e009      	b.n	8001754 <Parser_MEASURE+0x4c>
	}
	else
	{
	sprintf((char*)Msg, " %d.0%d deg C\n\r",buffer[0],buffer[1]);
 8001740:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001744:	461a      	mov	r2, r3
 8001746:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800174a:	f107 000c 	add.w	r0, r7, #12
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <Parser_MEASURE+0x68>)
 8001750:	f004 fe72 	bl	8006438 <siprintf>
	}
	Parser_DisplayTerminal((char*)Msg);
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ffb3 	bl	80016c4 <Parser_DisplayTerminal>

	return;
 800175e:	bf00      	nop

	//bluetooth send to master
}
 8001760:	3730      	adds	r7, #48	; 0x30
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08007b00 	.word	0x08007b00
 800176c:	08007b14 	.word	0x08007b14
 8001770:	08007b24 	.word	0x08007b24

08001774 <Parser_DISPLAY>:

/*
 * @ DISPLAY procedure
 */
static void Parser_DISPLAY(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	// send log to uart
	Parser_DisplayTerminal("Parametres displayed \n\r");
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <Parser_DISPLAY+0x10>)
 800177a:	f7ff ffa3 	bl	80016c4 <Parser_DisplayTerminal>

	//start timer to measure every 1 second for 1 minute
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	08007b34 	.word	0x08007b34

08001788 <Parser_HELP>:

static void Parser_HELP(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	// send log to uart
	Parser_DisplayTerminal("WAKEUP; - wake up from sleep mode \n\r");
 800178c:	4808      	ldr	r0, [pc, #32]	; (80017b0 <Parser_HELP+0x28>)
 800178e:	f7ff ff99 	bl	80016c4 <Parser_DisplayTerminal>
	Parser_DisplayTerminal("MEASURE; - measure and send to terminal \n\r");
 8001792:	4808      	ldr	r0, [pc, #32]	; (80017b4 <Parser_HELP+0x2c>)
 8001794:	f7ff ff96 	bl	80016c4 <Parser_DisplayTerminal>
	Parser_DisplayTerminal("DISPLAY; - start measuring and display on 8segment \n\r");
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <Parser_HELP+0x30>)
 800179a:	f7ff ff93 	bl	80016c4 <Parser_DisplayTerminal>
	Parser_DisplayTerminal("SLEEP; - enter sleep mode \n\r");
 800179e:	4807      	ldr	r0, [pc, #28]	; (80017bc <Parser_HELP+0x34>)
 80017a0:	f7ff ff90 	bl	80016c4 <Parser_DisplayTerminal>
	Parser_DisplayTerminal("HELP; - print all commands \n\r");
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <Parser_HELP+0x38>)
 80017a6:	f7ff ff8d 	bl	80016c4 <Parser_DisplayTerminal>


	//start timer to measure every 1 second for 1 minute
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	08007b4c 	.word	0x08007b4c
 80017b4:	08007b74 	.word	0x08007b74
 80017b8:	08007ba0 	.word	0x08007ba0
 80017bc:	08007bd8 	.word	0x08007bd8
 80017c0:	08007bf8 	.word	0x08007bf8

080017c4 <Parser_SLEEP>:

/*
 * @ SLEEP procedure
 */
static void Parser_SLEEP(uint8_t *ParseBuffer)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
//	UartLogBT("Welcome back broski\n\r");
//
//	//start count down for going back to sleep
//	HAL_TIM_Base_Start_IT(&htim1);

}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <Parser_Parse>:
/*
 * @ function parse message and start command procedures
 */

uint8_t Parser_Parse(uint8_t *ParseBuffer, TMP102_t *TMP102)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
	// Count how many commands we have to parse
	uint8_t cmd_count = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	77fb      	strb	r3, [r7, #31]
	uint8_t i = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	77bb      	strb	r3, [r7, #30]
	uint8_t LastCommand[16] =  {0};
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]

	// For every semicolon count up until EOL
	do
	{
		if (ParseBuffer[i] == ';')
 80017fa:	7fbb      	ldrb	r3, [r7, #30]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b3b      	cmp	r3, #59	; 0x3b
 8001804:	d102      	bne.n	800180c <Parser_Parse+0x34>
		{
			cmd_count++;
 8001806:	7ffb      	ldrb	r3, [r7, #31]
 8001808:	3301      	adds	r3, #1
 800180a:	77fb      	strb	r3, [r7, #31]
		}
		i++;
 800180c:	7fbb      	ldrb	r3, [r7, #30]
 800180e:	3301      	adds	r3, #1
 8001810:	77bb      	strb	r3, [r7, #30]
	} while (ParseBuffer[i] != '\n');
 8001812:	7fbb      	ldrb	r3, [r7, #30]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b0a      	cmp	r3, #10
 800181c:	d1ed      	bne.n	80017fa <Parser_Parse+0x22>


	// if there is no msg that we want to parse then just send it

	if (cmd_count == 0)
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <Parser_Parse+0x5c>
	{
		Parser_DisplayTerminal("Message received :");
 8001824:	483a      	ldr	r0, [pc, #232]	; (8001910 <Parser_Parse+0x138>)
 8001826:	f7ff ff4d 	bl	80016c4 <Parser_DisplayTerminal>
		Parser_DisplayTerminal((char*)ParseBuffer);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff4a 	bl	80016c4 <Parser_DisplayTerminal>
		// return ERROR
		return PARSE_ERROR_NOCMD;
 8001830:	2301      	movs	r3, #1
 8001832:	e068      	b.n	8001906 <Parser_Parse+0x12e>


	uint8_t *ParsePointer;

	// Execute cmd_count number of commands
	for (i = 0; i < cmd_count; i++)
 8001834:	2300      	movs	r3, #0
 8001836:	77bb      	strb	r3, [r7, #30]
 8001838:	e060      	b.n	80018fc <Parser_Parse+0x124>
	{

		// cut command from the message -> from beginning to ;
		//if first msg start from beginning
		if(i == 0)
 800183a:	7fbb      	ldrb	r3, [r7, #30]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <Parser_Parse+0x74>
		{
			ParsePointer = (uint8_t*)(strtok((char*)ParseBuffer, ";"));
 8001840:	4934      	ldr	r1, [pc, #208]	; (8001914 <Parser_Parse+0x13c>)
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f004 fe20 	bl	8006488 <strtok>
 8001848:	61b8      	str	r0, [r7, #24]
 800184a:	e004      	b.n	8001856 <Parser_Parse+0x7e>

		}else
		{
			ParsePointer = (uint8_t*)(strtok(NULL, ";"));
 800184c:	4931      	ldr	r1, [pc, #196]	; (8001914 <Parser_Parse+0x13c>)
 800184e:	2000      	movs	r0, #0
 8001850:	f004 fe1a 	bl	8006488 <strtok>
 8001854:	61b8      	str	r0, [r7, #24]
		}


		// if you put two same commands in a row - error
		if(strcmp((char*)ParsePointer,(char*)LastCommand) == 0)
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	4619      	mov	r1, r3
 800185c:	69b8      	ldr	r0, [r7, #24]
 800185e:	f7fe fcbf 	bl	80001e0 <strcmp>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d104      	bne.n	8001872 <Parser_Parse+0x9a>
		{
			Parser_DisplayTerminal("Error, same command twice in a row!\n\r");
 8001868:	482b      	ldr	r0, [pc, #172]	; (8001918 <Parser_Parse+0x140>)
 800186a:	f7ff ff2b 	bl	80016c4 <Parser_DisplayTerminal>
			return PARSE_ERROR_2CMDS;
 800186e:	2302      	movs	r3, #2
 8001870:	e049      	b.n	8001906 <Parser_Parse+0x12e>
		/*
		 * EXECUTE COMMANDS
		 */

		// do WAKE_UP
		if (strcmp("WAKEUP", (char*)ParsePointer) == 0)
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	4829      	ldr	r0, [pc, #164]	; (800191c <Parser_Parse+0x144>)
 8001876:	f7fe fcb3 	bl	80001e0 <strcmp>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <Parser_Parse+0xae>
		{
			Parser_WAKEUP();
 8001880:	f7ff ff38 	bl	80016f4 <Parser_WAKEUP>
 8001884:	e031      	b.n	80018ea <Parser_Parse+0x112>
		}
		// do MEASURE
		else if (strcmp("MEASURE", (char*)ParsePointer) == 0)
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	4825      	ldr	r0, [pc, #148]	; (8001920 <Parser_Parse+0x148>)
 800188a:	f7fe fca9 	bl	80001e0 <strcmp>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d103      	bne.n	800189c <Parser_Parse+0xc4>
		{
			Parser_MEASURE(TMP102);
 8001894:	6838      	ldr	r0, [r7, #0]
 8001896:	f7ff ff37 	bl	8001708 <Parser_MEASURE>
 800189a:	e026      	b.n	80018ea <Parser_Parse+0x112>
		}
		// do DISPLAY
		else if (strcmp("DISPLAY", (char*)ParsePointer) == 0)
 800189c:	69b9      	ldr	r1, [r7, #24]
 800189e:	4821      	ldr	r0, [pc, #132]	; (8001924 <Parser_Parse+0x14c>)
 80018a0:	f7fe fc9e 	bl	80001e0 <strcmp>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <Parser_Parse+0xd8>
		{
			Parser_DISPLAY();
 80018aa:	f7ff ff63 	bl	8001774 <Parser_DISPLAY>
 80018ae:	e01c      	b.n	80018ea <Parser_Parse+0x112>
		}
		//do help
		else if (strcmp("HELP", (char*)ParsePointer) == 0)
 80018b0:	69b9      	ldr	r1, [r7, #24]
 80018b2:	481d      	ldr	r0, [pc, #116]	; (8001928 <Parser_Parse+0x150>)
 80018b4:	f7fe fc94 	bl	80001e0 <strcmp>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <Parser_Parse+0xec>
		{
			Parser_HELP();
 80018be:	f7ff ff63 	bl	8001788 <Parser_HELP>
 80018c2:	e012      	b.n	80018ea <Parser_Parse+0x112>
		}
		// do SLEEP
		else if (strcmp("SLEEP", (char*)ParsePointer) == 0)
 80018c4:	69b9      	ldr	r1, [r7, #24]
 80018c6:	4819      	ldr	r0, [pc, #100]	; (800192c <Parser_Parse+0x154>)
 80018c8:	f7fe fc8a 	bl	80001e0 <strcmp>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d104      	bne.n	80018dc <Parser_Parse+0x104>
		{
			Parser_SLEEP(ParsePointer);
 80018d2:	69b8      	ldr	r0, [r7, #24]
 80018d4:	f7ff ff76 	bl	80017c4 <Parser_SLEEP>
			return PARSE_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e014      	b.n	8001906 <Parser_Parse+0x12e>
		}
		else
		{
			Parser_DisplayTerminal("Commmand unknown \n\r");
 80018dc:	4814      	ldr	r0, [pc, #80]	; (8001930 <Parser_Parse+0x158>)
 80018de:	f7ff fef1 	bl	80016c4 <Parser_DisplayTerminal>
			Parser_HELP();
 80018e2:	f7ff ff51 	bl	8001788 <Parser_HELP>
			return PARSE_ERROR_NOCMD;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00d      	b.n	8001906 <Parser_Parse+0x12e>
		}

		strcpy((char*)LastCommand,(char*)ParsePointer);
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 fdc1 	bl	8006478 <strcpy>
	for (i = 0; i < cmd_count; i++)
 80018f6:	7fbb      	ldrb	r3, [r7, #30]
 80018f8:	3301      	adds	r3, #1
 80018fa:	77bb      	strb	r3, [r7, #30]
 80018fc:	7fba      	ldrb	r2, [r7, #30]
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
 8001900:	429a      	cmp	r2, r3
 8001902:	d39a      	bcc.n	800183a <Parser_Parse+0x62>
	}

	return PARSE_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	08007c18 	.word	0x08007c18
 8001914:	08007c2c 	.word	0x08007c2c
 8001918:	08007c30 	.word	0x08007c30
 800191c:	08007c58 	.word	0x08007c58
 8001920:	08007c60 	.word	0x08007c60
 8001924:	08007c68 	.word	0x08007c68
 8001928:	08007c70 	.word	0x08007c70
 800192c:	08007c78 	.word	0x08007c78
 8001930:	08007c80 	.word	0x08007c80

08001934 <RB_Read>:
#include "main.h"
#include "ringbuffer.h"
#include "parse.h"

RB_Status RB_Read(Ringbuffer_t *buffer, uint8_t *value)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	if(buffer->Head == buffer->Tail)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800194a:	429a      	cmp	r2, r3
 800194c:	d101      	bne.n	8001952 <RB_Read+0x1e>
	{
		return RB_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e017      	b.n	8001982 <RB_Read+0x4e>
	}

	*value = buffer->buffer[buffer->Tail];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001958:	461a      	mov	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	5c9a      	ldrb	r2, [r3, r2]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	701a      	strb	r2, [r3, #0]

	buffer->Tail = (buffer->Tail + 1) % RING_BUFFER_SIZE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001968:	3301      	adds	r3, #1
 800196a:	425a      	negs	r2, r3
 800196c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001970:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001974:	bf58      	it	pl
 8001976:	4253      	negpl	r3, r2
 8001978:	b29a      	uxth	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	return RB_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <RB_Write>:

RB_Status RB_Write(Ringbuffer_t *buffer, uint8_t value)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	70fb      	strb	r3, [r7, #3]

	uint16_t HeadTmp;
	HeadTmp = (buffer->Head + 1) % RING_BUFFER_SIZE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80019a0:	3301      	adds	r3, #1
 80019a2:	425a      	negs	r2, r3
 80019a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ac:	bf58      	it	pl
 80019ae:	4253      	negpl	r3, r2
 80019b0:	81fb      	strh	r3, [r7, #14]

	if (HeadTmp == buffer->Tail)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80019b8:	89fa      	ldrh	r2, [r7, #14]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d101      	bne.n	80019c2 <RB_Write+0x34>
	{
		return RB_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00b      	b.n	80019da <RB_Write+0x4c>
	}

	buffer->buffer[buffer->Head] = value;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80019c8:	4619      	mov	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	545a      	strb	r2, [r3, r1]
	buffer->Head = HeadTmp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	89fa      	ldrh	r2, [r7, #14]
 80019d4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	return RB_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <RB_Flush>:

void RB_Flush(Ringbuffer_t *buffer)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	buffer->Head = 0;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	buffer->Tail = 0;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <tm1637Init>:
    0x00
};


void tm1637Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <tm1637Init+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <tm1637Init+0x88>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <tm1637Init+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <tm1637Init+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <tm1637Init+0x88>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <tm1637Init+0x88>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_PULLUP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 8001a5e:	2311      	movs	r3, #17
 8001a60:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 8001a66:	2302      	movs	r3, #2
 8001a68:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4809      	ldr	r0, [pc, #36]	; (8001a98 <tm1637Init+0x8c>)
 8001a72:	f001 fbfb 	bl	800326c <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 8001a76:	2304      	movs	r3, #4
 8001a78:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <tm1637Init+0x8c>)
 8001a82:	f001 fbf3 	bl	800326c <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 8001a86:	2008      	movs	r0, #8
 8001a88:	f000 f876 	bl	8001b78 <tm1637SetBrightness>
}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020800 	.word	0x40020800

08001a9c <tm1637DisplayDecimal>:

void tm1637DisplayDecimal(int v, int displaySeparator)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e032      	b.n	8001b12 <tm1637DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <tm1637DisplayDecimal+0xd4>)
 8001ab0:	fb83 2301 	smull	r2, r3, r3, r1
 8001ab4:	109a      	asrs	r2, r3, #2
 8001ab6:	17cb      	asrs	r3, r1, #31
 8001ab8:	1ad2      	subs	r2, r2, r3
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	1aca      	subs	r2, r1, r3
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <tm1637DisplayDecimal+0xd8>)
 8001ac6:	5c99      	ldrb	r1, [r3, r2]
 8001ac8:	f107 020c 	add.w	r2, r7, #12
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	4413      	add	r3, r2
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d110      	bne.n	8001afc <tm1637DisplayDecimal+0x60>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00d      	beq.n	8001afc <tm1637DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8001ae0:	f107 020c 	add.w	r2, r7, #12
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aee:	b2d9      	uxtb	r1, r3
 8001af0:	f107 020c 	add.w	r2, r7, #12
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	4413      	add	r3, r2
 8001af8:	460a      	mov	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <tm1637DisplayDecimal+0xd4>)
 8001b00:	fb82 1203 	smull	r1, r2, r2, r3
 8001b04:	1092      	asrs	r2, r2, #2
 8001b06:	17db      	asrs	r3, r3, #31
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	ddc9      	ble.n	8001aac <tm1637DisplayDecimal+0x10>
    }

    _tm1637Start();
 8001b18:	f000 f843 	bl	8001ba2 <_tm1637Start>
    _tm1637WriteByte(0x40);
 8001b1c:	2040      	movs	r0, #64	; 0x40
 8001b1e:	f000 f872 	bl	8001c06 <_tm1637WriteByte>
    _tm1637ReadResult();
 8001b22:	f000 f860 	bl	8001be6 <_tm1637ReadResult>
    _tm1637Stop();
 8001b26:	f000 f849 	bl	8001bbc <_tm1637Stop>

    _tm1637Start();
 8001b2a:	f000 f83a 	bl	8001ba2 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 8001b2e:	20c0      	movs	r0, #192	; 0xc0
 8001b30:	f000 f869 	bl	8001c06 <_tm1637WriteByte>
    _tm1637ReadResult();
 8001b34:	f000 f857 	bl	8001be6 <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	e00f      	b.n	8001b5e <tm1637DisplayDecimal+0xc2>
        _tm1637WriteByte(digitArr[3 - i]);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f1c3 0303 	rsb	r3, r3, #3
 8001b44:	f107 0218 	add.w	r2, r7, #24
 8001b48:	4413      	add	r3, r2
 8001b4a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f859 	bl	8001c06 <_tm1637WriteByte>
        _tm1637ReadResult();
 8001b54:	f000 f847 	bl	8001be6 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	ddec      	ble.n	8001b3e <tm1637DisplayDecimal+0xa2>
    }

    _tm1637Stop();
 8001b64:	f000 f82a 	bl	8001bbc <_tm1637Stop>
}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	66666667 	.word	0x66666667
 8001b74:	08007ce0 	.word	0x08007ce0

08001b78 <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8001b82:	f000 f80e 	bl	8001ba2 <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	3b79      	subs	r3, #121	; 0x79
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f83a 	bl	8001c06 <_tm1637WriteByte>
    _tm1637ReadResult();
 8001b92:	f000 f828 	bl	8001be6 <_tm1637ReadResult>
    _tm1637Stop();
 8001b96:	f000 f811 	bl	8001bbc <_tm1637Stop>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_tm1637Start>:

void _tm1637Start(void)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 8001ba6:	f000 f86b 	bl	8001c80 <_tm1637ClkHigh>
    _tm1637DioHigh();
 8001baa:	f000 f881 	bl	8001cb0 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f000 f853 	bl	8001c5a <_tm1637DelayUsec>
    _tm1637DioLow();
 8001bb4:	f000 f888 	bl	8001cc8 <_tm1637DioLow>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_tm1637Stop>:

void _tm1637Stop(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001bc0:	f000 f86a 	bl	8001c98 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f000 f848 	bl	8001c5a <_tm1637DelayUsec>
    _tm1637DioLow();
 8001bca:	f000 f87d 	bl	8001cc8 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 8001bce:	2002      	movs	r0, #2
 8001bd0:	f000 f843 	bl	8001c5a <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8001bd4:	f000 f854 	bl	8001c80 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f000 f83e 	bl	8001c5a <_tm1637DelayUsec>
    _tm1637DioHigh();
 8001bde:	f000 f867 	bl	8001cb0 <_tm1637DioHigh>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001bea:	f000 f855 	bl	8001c98 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8001bee:	2005      	movs	r0, #5
 8001bf0:	f000 f833 	bl	8001c5a <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 8001bf4:	f000 f844 	bl	8001c80 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f000 f82e 	bl	8001c5a <_tm1637DelayUsec>
    _tm1637ClkLow();
 8001bfe:	f000 f84b 	bl	8001c98 <_tm1637ClkLow>
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e019      	b.n	8001c4a <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8001c16:	f000 f83f 	bl	8001c98 <_tm1637ClkLow>
        if (b & 0x01) {
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8001c24:	f000 f844 	bl	8001cb0 <_tm1637DioHigh>
 8001c28:	e001      	b.n	8001c2e <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 8001c2a:	f000 f84d 	bl	8001cc8 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 8001c2e:	2003      	movs	r0, #3
 8001c30:	f000 f813 	bl	8001c5a <_tm1637DelayUsec>
        b >>= 1;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	085b      	lsrs	r3, r3, #1
 8001c38:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 8001c3a:	f000 f821 	bl	8001c80 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f000 f80b 	bl	8001c5a <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	dde2      	ble.n	8001c16 <_tm1637WriteByte+0x10>
    }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	uint32_t delay = HAL_GetTick();
 8001c62:	f000 fdbf 	bl	80027e4 <HAL_GetTick>
 8001c66:	60f8      	str	r0, [r7, #12]

	do
	{
	}while((HAL_GetTick() - delay) < 2);
 8001c68:	f000 fdbc 	bl	80027e4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d9f8      	bls.n	8001c68 <_tm1637DelayUsec+0xe>
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2102      	movs	r1, #2
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <_tm1637ClkHigh+0x14>)
 8001c8a:	f001 fc8b 	bl	80035a4 <HAL_GPIO_WritePin>
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40020800 	.word	0x40020800

08001c98 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <_tm1637ClkLow+0x14>)
 8001ca2:	f001 fc7f 	bl	80035a4 <HAL_GPIO_WritePin>
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40020800 	.word	0x40020800

08001cb0 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <_tm1637DioHigh+0x14>)
 8001cba:	f001 fc73 	bl	80035a4 <HAL_GPIO_WritePin>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020800 	.word	0x40020800

08001cc8 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2104      	movs	r1, #4
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <_tm1637DioLow+0x14>)
 8001cd2:	f001 fc67 	bl	80035a4 <HAL_GPIO_WritePin>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40020800 	.word	0x40020800

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d1e:	2007      	movs	r0, #7
 8001d20:	f000 fe60 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <NMI_Handler+0x4>

08001d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <HardFault_Handler+0x4>

08001d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <MemManage_Handler+0x4>

08001d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <BusFault_Handler+0x4>

08001d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <UsageFault_Handler+0x4>

08001d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7c:	f000 fd1e 	bl	80027bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d88:	2008      	movs	r0, #8
 8001d8a:	f001 fc25 	bl	80035d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <USART1_IRQHandler+0x10>)
 8001d9a:	f003 fadb 	bl	8005354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000280 	.word	0x20000280

08001da8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <DMA2_Stream2_IRQHandler+0x10>)
 8001dae:	f000 fff3 	bl	8002d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000220 	.word	0x20000220

08001dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
	return 1;
 8001dc0:	2301      	movs	r3, #1
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_kill>:

int _kill(int pid, int sig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dd6:	f004 fafd 	bl	80063d4 <__errno>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2216      	movs	r2, #22
 8001dde:	601a      	str	r2, [r3, #0]
	return -1;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_exit>:

void _exit (int status)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ffe7 	bl	8001dcc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dfe:	e7fe      	b.n	8001dfe <_exit+0x12>

08001e00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00a      	b.n	8001e28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e12:	f3af 8000 	nop.w
 8001e16:	4601      	mov	r1, r0
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	60ba      	str	r2, [r7, #8]
 8001e1e:	b2ca      	uxtb	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf0      	blt.n	8001e12 <_read+0x12>
	}

return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e009      	b.n	8001e60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf1      	blt.n	8001e4c <_write+0x12>
	}
	return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_close>:

int _close(int file)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_isatty>:

int _isatty(int file)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
	return 1;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <_sbrk+0x5c>)
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <_sbrk+0x60>)
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <_sbrk+0x64>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <_sbrk+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d207      	bcs.n	8001f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f0c:	f004 fa62 	bl	80063d4 <__errno>
 8001f10:	4603      	mov	r3, r0
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e009      	b.n	8001f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <_sbrk+0x64>)
 8001f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20018000 	.word	0x20018000
 8001f3c:	00000400 	.word	0x00000400
 8001f40:	2000008c 	.word	0x2000008c
 8001f44:	20000320 	.word	0x20000320

08001f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <SystemInit+0x20>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <SystemInit+0x20>)
 8001f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <TMP102_Read16>:
 * @param[reg] - predefined registers address
 *
 * @return - 16 bit value from register
 */
static uint16_t TMP102_Read16(TMP102_t *tmp102, uint8_t reg)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af04      	add	r7, sp, #16
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	70fb      	strb	r3, [r7, #3]

	// buffer for return data
	uint8_t value[2];

	// check if register address is more than 3
	if (reg > TMP102_REG_MAXTEMP)
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d904      	bls.n	8001f88 <TMP102_Read16+0x1c>
	{
		tmp102->ErrorCode = TMP102_ERR_WRONGREGISTERDEFINED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2203      	movs	r2, #3
 8001f82:	749a      	strb	r2, [r3, #18]
		return 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e029      	b.n	8001fdc <TMP102_Read16+0x70>
	}

	// address has to be shifted one place left because hal requires left allinged 7bit address
	HAL_I2C_Mem_Read(tmp102->I2CHandle, ((tmp102->DeviceAdress) << 1), reg, 1, value, 2, TMP102_I2C_TIMEOUT);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	791b      	ldrb	r3, [r3, #4]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	b299      	uxth	r1, r3
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	9302      	str	r3, [sp, #8]
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	f001 fd6a 	bl	8003a84 <HAL_I2C_Mem_Read>
	// 0000 0000 XXXX XXXX // << 4
	// 0000 XXXX XXXX 0000 // then we push value[1] which has only 4 significant bits (YYYY 0000) >> 4
	// 0000 XXXX XXXX YYYY // combined

	// return 16 bit data
	if (reg != TMP102_REG_CONFIG)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d00a      	beq.n	8001fcc <TMP102_Read16+0x60>
	{
		return (value[0] << 4) | (value[1] >> 4);
 8001fb6:	7b3b      	ldrb	r3, [r7, #12]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	7b7b      	ldrb	r3, [r7, #13]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	e007      	b.n	8001fdc <TMP102_Read16+0x70>
	}
	else
	{
		// use union structure for config register
		return (value[0]) | (value[1] << 8);
 8001fcc:	7b3b      	ldrb	r3, [r7, #12]
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	b29b      	uxth	r3, r3
	}
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <TMP102_Write16>:
 * @param[reg] - predefined registers address
 * @param[value] - value to write
 * @return - 16 bit value from register
 */
static void TMP102_Write16(TMP102_t *tmp102, uint8_t reg, uint16_t value)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af04      	add	r7, sp, #16
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	803b      	strh	r3, [r7, #0]
	// buffer to take 2 bytes
	uint8_t buf[2];

	// check if register address is more than 3
	if (reg > TMP102_REG_MAXTEMP)
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d903      	bls.n	8002002 <TMP102_Write16+0x1e>
	{
		tmp102->ErrorCode = TMP102_ERR_WRONGREGISTERDEFINED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	749a      	strb	r2, [r3, #18]
		return;
 8002000:	e02d      	b.n	800205e <TMP102_Write16+0x7a>
	}

	// define bit structure for temp and config
	if (reg != TMP102_REG_CONFIG)
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d00a      	beq.n	800201e <TMP102_Write16+0x3a>
	{
		buf[0] = value >> 4;
 8002008:	883b      	ldrh	r3, [r7, #0]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	b29b      	uxth	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	733b      	strb	r3, [r7, #12]
		buf[1] = value << 4;
 8002012:	883b      	ldrh	r3, [r7, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	b2db      	uxtb	r3, r3
 800201a:	737b      	strb	r3, [r7, #13]
 800201c:	e007      	b.n	800202e <TMP102_Write16+0x4a>
	}
	else
	{
		buf[0] = value;
 800201e:	883b      	ldrh	r3, [r7, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	733b      	strb	r3, [r7, #12]
		buf[1] = value >> 8;
 8002024:	883b      	ldrh	r3, [r7, #0]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b29b      	uxth	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	737b      	strb	r3, [r7, #13]
	}

	// write 16 bit data to TMP102
	HAL_I2C_Mem_Write(tmp102->I2CHandle, ((tmp102->DeviceAdress) << 1), reg, 1, buf, 2, TMP102_I2C_TIMEOUT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	791b      	ldrb	r3, [r3, #4]
 8002036:	b29b      	uxth	r3, r3
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	b299      	uxth	r1, r3
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	b29a      	uxth	r2, r3
 8002040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	2302      	movs	r3, #2
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2301      	movs	r3, #1
 8002052:	f001 fc1d 	bl	8003890 <HAL_I2C_Mem_Write>
	tmp102->ErrorCode = TMP102_ERR_NOERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	749a      	strb	r2, [r3, #18]
	return;
 800205c:	bf00      	nop
}
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <TMP102GetTempFloat>:
 *
 * @param[*tmp102] - TMP102 sensor structure
 * @return - temperature calculated from register
 */
float TMP102GetTempFloat(TMP102_t *tmp102)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	// define variables
	int16_t val;
	float temp_c;

	// check configuration
	TMP102GetConfiguration(tmp102);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f87d 	bl	800216c <TMP102GetConfiguration>


	// read temp data from register
	val = (int16_t)TMP102_Read16(tmp102,TMP102_REG_TEMP);
 8002072:	2100      	movs	r1, #0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff79 	bl	8001f6c <TMP102_Read16>
 800207a:	4603      	mov	r3, r0
 800207c:	81fb      	strh	r3, [r7, #14]

	// 12 bit mode - normal
	if(tmp102->Configuration.TMP102_EM == 0)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7c5b      	ldrb	r3, [r3, #17]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10b      	bne.n	80020a4 <TMP102GetTempFloat+0x40>
	{
		// Convert to 2's complement, since temperature can be negative
		if (val > 0x7FF) {
 800208c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002094:	db11      	blt.n	80020ba <TMP102GetTempFloat+0x56>
			val |= 0xF000;
 8002096:	89fb      	ldrh	r3, [r7, #14]
 8002098:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800209c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80020a0:	81fb      	strh	r3, [r7, #14]
 80020a2:	e00a      	b.n	80020ba <TMP102GetTempFloat+0x56>
			}
	}
	else
		//13 bit mode - extended
	{
		if (val > 0xFFF){
 80020a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ac:	db05      	blt.n	80020ba <TMP102GetTempFloat+0x56>
			val |= 0xE000;
 80020ae:	89fb      	ldrh	r3, [r7, #14]
 80020b0:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80020b4:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80020b8:	81fb      	strh	r3, [r7, #14]
		}
	}

	// Convert to float temperature value (Celsius)
	temp_c = (float)(val * 0.0625);
 80020ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa48 	bl	8000554 <__aeabi_i2d>
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <TMP102GetTempFloat+0x8c>)
 80020ca:	f7fe faad 	bl	8000628 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	f7fe fcb9 	bl	8000a4c <__aeabi_d2f>
 80020da:	4603      	mov	r3, r0
 80020dc:	60bb      	str	r3, [r7, #8]


	return temp_c;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	ee07 3a90 	vmov	s15, r3
}
 80020e4:	eeb0 0a67 	vmov.f32	s0, s15
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	3fb00000 	.word	0x3fb00000

080020f4 <TMP102GetTempInt>:
 * @param[*tmp102] - TMP102 sensor structure
 * @param[*value] - array of 2 bytes, [0] integer part , [1] decimal part
 * @return - void
 */
void TMP102GetTempInt(TMP102_t *tmp102, uint8_t *value)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
	// define variables
	int16_t val;
	// read temp data from register
	val = (int16_t) TMP102_Read16(tmp102, TMP102_REG_TEMP);
 80020fe:	2100      	movs	r1, #0
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff33 	bl	8001f6c <TMP102_Read16>
 8002106:	4603      	mov	r3, r0
 8002108:	81fb      	strh	r3, [r7, #14]

	// Convert to 2's complement, since temperature can be negative
	if (val > 0x7FF)
 800210a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800210e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002112:	db05      	blt.n	8002120 <TMP102GetTempInt+0x2c>
	{
		val |= 0xF000;
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800211a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800211e:	81fb      	strh	r3, [r7, #14]
	}

	// Convert to float temperature value (Celsius)
	value[0] = val / 16; // // integer part
 8002120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002124:	2b00      	cmp	r3, #0
 8002126:	da00      	bge.n	800212a <TMP102GetTempInt+0x36>
 8002128:	330f      	adds	r3, #15
 800212a:	111b      	asrs	r3, r3, #4
 800212c:	b21b      	sxth	r3, r3
 800212e:	b2da      	uxtb	r2, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	701a      	strb	r2, [r3, #0]
	value[1] = ((val * 100) / 16) - (value[0] * 100); // decimal part
 8002134:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002138:	2264      	movs	r2, #100	; 0x64
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	da00      	bge.n	8002144 <TMP102GetTempInt+0x50>
 8002142:	330f      	adds	r3, #15
 8002144:	111b      	asrs	r3, r3, #4
 8002146:	b2d9      	uxtb	r1, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	441a      	add	r2, r3
 8002152:	00d2      	lsls	r2, r2, #3
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	b2da      	uxtb	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	440a      	add	r2, r1
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <TMP102GetConfiguration>:
 *
 * @param[*tmp102] - TMP102 sensor structure
 * @return - void
 */
void TMP102GetConfiguration(TMP102_t *tmp102)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	// read uint16 config register value and convert it to bitfield
	configConverter tempConfig;
	tempConfig.i = TMP102_Read16(tmp102, TMP102_REG_CONFIG);
 8002174:	2101      	movs	r1, #1
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fef8 	bl	8001f6c <TMP102_Read16>
 800217c:	4603      	mov	r3, r0
 800217e:	81bb      	strh	r3, [r7, #12]
	tmp102->Configuration = tempConfig.conf;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	89ba      	ldrh	r2, [r7, #12]
 8002184:	821a      	strh	r2, [r3, #16]
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <TMP102WriteConfig>:
 * @param[command] - predefined command TMP102_WRITE_XXX @commands
 * @param[value] - predefined register values TMP102_CR_XXX @config
 * @return - status msg
 */
uint8_t TMP102WriteConfig(TMP102_t *tmp102, TMP102writeConfig command, uint16_t value)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
 800219c:	4613      	mov	r3, r2
 800219e:	803b      	strh	r3, [r7, #0]
	// read raw config value
	uint16_t config;
	config = TMP102_Read16(tmp102, TMP102_REG_CONFIG);
 80021a0:	2101      	movs	r1, #1
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fee2 	bl	8001f6c <TMP102_Read16>
 80021a8:	4603      	mov	r3, r0
 80021aa:	81fb      	strh	r3, [r7, #14]
	// CONTROL REGISTER :
	// MSB [CR1][CR0][AL][EM][0][0][0][0][OS][R1][R0][F1][F0][POL][TM][SD] LSB
	//     [7]  [6]  [5] [4] [3][2][1][0] [7] [6] [5] [4] [3] [2] [1] [0]

	// select command
	switch (command)
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	f200 808e 	bhi.w	80022d0 <TMP102WriteConfig+0x140>
 80021b4:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <TMP102WriteConfig+0x2c>)
 80021b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ba:	bf00      	nop
 80021bc:	080021d5 	.word	0x080021d5
 80021c0:	080021f7 	.word	0x080021f7
 80021c4:	08002221 	.word	0x08002221
 80021c8:	0800224d 	.word	0x0800224d
 80021cc:	08002279 	.word	0x08002279
 80021d0:	080022a5 	.word	0x080022a5
	{

	case TMP102_WRITE_SHUTDOWN:

		// check if the value fits in the register [1 bit]
		if (value > 1)
 80021d4:	883b      	ldrh	r3, [r7, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d904      	bls.n	80021e4 <TMP102WriteConfig+0x54>
		{
			tmp102->ErrorCode = TMP102_ERR_WRONGCONFIG;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	749a      	strb	r2, [r3, #18]
			return TMP102_ERR_WRONGCONFIG;
 80021e0:	2302      	movs	r3, #2
 80021e2:	e080      	b.n	80022e6 <TMP102WriteConfig+0x156>
		}

		TMP102_EDITCONIFG_1BIT(config,value,TMP102_CR_OFFSET_SD);
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	81fb      	strh	r3, [r7, #14]
 80021ec:	89fa      	ldrh	r2, [r7, #14]
 80021ee:	883b      	ldrh	r3, [r7, #0]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	81fb      	strh	r3, [r7, #14]
		break;
 80021f4:	e06c      	b.n	80022d0 <TMP102WriteConfig+0x140>

	case TMP102_WRITE_THERMOSTATMODE:

		// check if the value fits in the register [1 bit]
		if (value > 1)
 80021f6:	883b      	ldrh	r3, [r7, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d904      	bls.n	8002206 <TMP102WriteConfig+0x76>
		{
			tmp102->ErrorCode = TMP102_ERR_WRONGCONFIG;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	749a      	strb	r2, [r3, #18]
			return TMP102_ERR_WRONGCONFIG;
 8002202:	2302      	movs	r3, #2
 8002204:	e06f      	b.n	80022e6 <TMP102WriteConfig+0x156>
		}

		TMP102_EDITCONIFG_1BIT(config,value,TMP102_CR_OFFSET_TM);
 8002206:	89fb      	ldrh	r3, [r7, #14]
 8002208:	f023 0302 	bic.w	r3, r3, #2
 800220c:	81fb      	strh	r3, [r7, #14]
 800220e:	883b      	ldrh	r3, [r7, #0]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	b21a      	sxth	r2, r3
 8002214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002218:	4313      	orrs	r3, r2
 800221a:	b21b      	sxth	r3, r3
 800221c:	81fb      	strh	r3, [r7, #14]
		break;
 800221e:	e057      	b.n	80022d0 <TMP102WriteConfig+0x140>

	case TMP102_WRITE_POLARITY:

		// check if the value fits in the register [1 bit]
		if (value > 1)
 8002220:	883b      	ldrh	r3, [r7, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d905      	bls.n	8002232 <TMP102WriteConfig+0xa2>
		{
			tmp102->ErrorCode = TMP102_ERR_WRONGCONFIG;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2202      	movs	r2, #2
 800222a:	749a      	strb	r2, [r3, #18]
			return tmp102->ErrorCode;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7c9b      	ldrb	r3, [r3, #18]
 8002230:	e059      	b.n	80022e6 <TMP102WriteConfig+0x156>
		}

		TMP102_EDITCONIFG_1BIT(config,value,TMP102_CR_OFFSET_POL);
 8002232:	89fb      	ldrh	r3, [r7, #14]
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	81fb      	strh	r3, [r7, #14]
 800223a:	883b      	ldrh	r3, [r7, #0]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	b21a      	sxth	r2, r3
 8002240:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002244:	4313      	orrs	r3, r2
 8002246:	b21b      	sxth	r3, r3
 8002248:	81fb      	strh	r3, [r7, #14]
		break;
 800224a:	e041      	b.n	80022d0 <TMP102WriteConfig+0x140>

	case TMP102_WRITE_FALUTQUEUE:

		// check if the value fits in the register [2 bits]
		if (value > 3)
 800224c:	883b      	ldrh	r3, [r7, #0]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d905      	bls.n	800225e <TMP102WriteConfig+0xce>
		{
			tmp102->ErrorCode = TMP102_ERR_WRONGCONFIG;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	749a      	strb	r2, [r3, #18]
			return tmp102->ErrorCode;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7c9b      	ldrb	r3, [r3, #18]
 800225c:	e043      	b.n	80022e6 <TMP102WriteConfig+0x156>
		}

		TMP102_EDITCONIFG_2BIT(config,value,TMP102_CR_OFFSET_FQ);
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	f023 0318 	bic.w	r3, r3, #24
 8002264:	81fb      	strh	r3, [r7, #14]
 8002266:	883b      	ldrh	r3, [r7, #0]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	b21a      	sxth	r2, r3
 800226c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002270:	4313      	orrs	r3, r2
 8002272:	b21b      	sxth	r3, r3
 8002274:	81fb      	strh	r3, [r7, #14]
		break;
 8002276:	e02b      	b.n	80022d0 <TMP102WriteConfig+0x140>

	case TMP102_WRITE_EXTENDEDMODE:

		// check if the value fits in the register [1 bit]
		if (value > 1)
 8002278:	883b      	ldrh	r3, [r7, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d905      	bls.n	800228a <TMP102WriteConfig+0xfa>
		{
			tmp102->ErrorCode = TMP102_ERR_WRONGCONFIG;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	749a      	strb	r2, [r3, #18]
			return tmp102->ErrorCode;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7c9b      	ldrb	r3, [r3, #18]
 8002288:	e02d      	b.n	80022e6 <TMP102WriteConfig+0x156>
		}

		TMP102_EDITCONIFG_1BIT(config,value,TMP102_CR_OFFSET_EM);
 800228a:	89fb      	ldrh	r3, [r7, #14]
 800228c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002290:	81fb      	strh	r3, [r7, #14]
 8002292:	883b      	ldrh	r3, [r7, #0]
 8002294:	031b      	lsls	r3, r3, #12
 8002296:	b21a      	sxth	r2, r3
 8002298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800229c:	4313      	orrs	r3, r2
 800229e:	b21b      	sxth	r3, r3
 80022a0:	81fb      	strh	r3, [r7, #14]
		break;
 80022a2:	e015      	b.n	80022d0 <TMP102WriteConfig+0x140>

	case TMP102_WRITE_CONV_RATE:

		// check if the value fits in the register [2 bits]
		if (value > 3)
 80022a4:	883b      	ldrh	r3, [r7, #0]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d905      	bls.n	80022b6 <TMP102WriteConfig+0x126>
		{
			tmp102->ErrorCode = TMP102_ERR_WRONGCONFIG;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	749a      	strb	r2, [r3, #18]
			return tmp102->ErrorCode;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7c9b      	ldrb	r3, [r3, #18]
 80022b4:	e017      	b.n	80022e6 <TMP102WriteConfig+0x156>
		}

		TMP102_EDITCONIFG_2BIT(config,value,TMP102_CR_OFFSET_CR);
 80022b6:	89fb      	ldrh	r3, [r7, #14]
 80022b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80022bc:	81fb      	strh	r3, [r7, #14]
 80022be:	883b      	ldrh	r3, [r7, #0]
 80022c0:	039b      	lsls	r3, r3, #14
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	81fb      	strh	r3, [r7, #14]
		break;
 80022ce:	bf00      	nop
	}

	// write new config to register
	TMP102_Write16(tmp102, TMP102_REG_CONFIG, config);
 80022d0:	89fb      	ldrh	r3, [r7, #14]
 80022d2:	461a      	mov	r2, r3
 80022d4:	2101      	movs	r1, #1
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fe84 	bl	8001fe4 <TMP102_Write16>

	// read updated config to structure
	TMP102GetConfiguration(tmp102);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff45 	bl	800216c <TMP102GetConfiguration>
	return tmp102->ErrorCode;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7c9b      	ldrb	r3, [r3, #18]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop

080022f0 <TMP102GetMinMaxTemp>:
 *
 * @param[*tmp102] - TMP102 sensor structure
 * @return - void
 */
void TMP102GetMinMaxTemp(TMP102_t *tmp102)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	// define variables
	int16_t val_max, val_min;

	// read temp data from register
	val_max = (int16_t) TMP102_Read16(tmp102, TMP102_REG_MAXTEMP);
 80022f8:	2103      	movs	r1, #3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fe36 	bl	8001f6c <TMP102_Read16>
 8002300:	4603      	mov	r3, r0
 8002302:	81fb      	strh	r3, [r7, #14]
	val_min = (int16_t) TMP102_Read16(tmp102, TMP102_REG_MINTEMP);
 8002304:	2102      	movs	r1, #2
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fe30 	bl	8001f6c <TMP102_Read16>
 800230c:	4603      	mov	r3, r0
 800230e:	81bb      	strh	r3, [r7, #12]

	// Convert to 2's complement, since temperature can be negative
	if (val_max > 0x7FF)
 8002310:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002318:	db05      	blt.n	8002326 <TMP102GetMinMaxTemp+0x36>
	{
		val_max |= 0xF000;
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002320:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002324:	81fb      	strh	r3, [r7, #14]
	}

	if (val_min > 0x7FF)
 8002326:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800232a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800232e:	db05      	blt.n	800233c <TMP102GetMinMaxTemp+0x4c>
	{
		val_min |= 0xF000;
 8002330:	89bb      	ldrh	r3, [r7, #12]
 8002332:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002336:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800233a:	81bb      	strh	r3, [r7, #12]
	}
#if(TMP102_USE_FLOATNUMBERS == 1)
	// Convert to float temperature value (Celsius)
	tmp102->MaxTemperature = (float)(val_max * TMP102_RESOLUTION);
 800233c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f907 	bl	8000554 <__aeabi_i2d>
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <TMP102GetMinMaxTemp+0xa0>)
 800234c:	f7fe f96c 	bl	8000628 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fb78 	bl	8000a4c <__aeabi_d2f>
 800235c:	4602      	mov	r2, r0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	609a      	str	r2, [r3, #8]
	tmp102->MinTemperature = (float)(val_min * TMP102_RESOLUTION);
 8002362:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f8f4 	bl	8000554 <__aeabi_i2d>
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <TMP102GetMinMaxTemp+0xa0>)
 8002372:	f7fe f959 	bl	8000628 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fb65 	bl	8000a4c <__aeabi_d2f>
 8002382:	4602      	mov	r2, r0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	60da      	str	r2, [r3, #12]
	tmp102->MaxTemperatureDecimalPart = abs(((val_max - (tmp102->MaxTemperatureIntegerPart / TMP102_RESOLUTION)) * 100) * TMP102_RESOLUTION);
	tmp102->MinTemperatureIntegerPart = (val_min * TMP102_RESOLUTION);
	tmp102->MinTemperatureDecimalPart = abs(((val_min - (tmp102->MinTemperatureIntegerPart / TMP102_RESOLUTION)) * 100) * TMP102_RESOLUTION);
#endif

}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	3fb00000 	.word	0x3fb00000

08002394 <TMP102Init>:
 * @param[initDeviceAddress] - device address @address
 * @return - void
 */
void TMP102Init(TMP102_t *tmp102, I2C_HandleTypeDef *initI2CHandle,
		uint8_t initDeviceAddress)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	71fb      	strb	r3, [r7, #7]

	// Read basic information
	tmp102->I2CHandle = initI2CHandle;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	601a      	str	r2, [r3, #0]
	tmp102->DeviceAdress = initDeviceAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	79fa      	ldrb	r2, [r7, #7]
 80023ac:	711a      	strb	r2, [r3, #4]

	// Write new config - defined by user
	TMP102WriteConfig(tmp102, TMP102_WRITE_CONV_RATE, TMP102_CR_CONV_RATE_4Hz);
 80023ae:	2202      	movs	r2, #2
 80023b0:	2105      	movs	r1, #5
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7ff feec 	bl	8002190 <TMP102WriteConfig>
	TMP102WriteConfig(tmp102, TMP102_WRITE_SHUTDOWN, TMP102_CR_MODE_CONTINUOS);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff fee7 	bl	8002190 <TMP102WriteConfig>

	TMP102GetConfiguration(tmp102);
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7ff fed2 	bl	800216c <TMP102GetConfiguration>
	TMP102GetMinMaxTemp(tmp102);
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f7ff ff91 	bl	80022f0 <TMP102GetMinMaxTemp>
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_USART1_UART_Init+0x4c>)
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <MX_USART1_UART_Init+0x50>)
 80023e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <MX_USART1_UART_Init+0x4c>)
 80023e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_USART1_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_USART1_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_USART1_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_USART1_UART_Init+0x4c>)
 80023fe:	220c      	movs	r2, #12
 8002400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_USART1_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_USART1_UART_Init+0x4c>)
 8002410:	f002 fe5c 	bl	80050cc <HAL_UART_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800241a:	f7ff f94d 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000280 	.word	0x20000280
 8002428:	40011000 	.word	0x40011000

0800242c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <MX_USART2_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002464:	f002 fe32 	bl	80050cc <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f7ff f923 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200002c4 	.word	0x200002c4
 800247c:	40004400 	.word	0x40004400

08002480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a49      	ldr	r2, [pc, #292]	; (80025c4 <HAL_UART_MspInit+0x144>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d15b      	bne.n	800255a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <HAL_UART_MspInit+0x148>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a47      	ldr	r2, [pc, #284]	; (80025c8 <HAL_UART_MspInit+0x148>)
 80024ac:	f043 0310 	orr.w	r3, r3, #16
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <HAL_UART_MspInit+0x148>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_UART_MspInit+0x148>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a40      	ldr	r2, [pc, #256]	; (80025c8 <HAL_UART_MspInit+0x148>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <HAL_UART_MspInit+0x148>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024ec:	2307      	movs	r3, #7
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	4619      	mov	r1, r3
 80024f6:	4835      	ldr	r0, [pc, #212]	; (80025cc <HAL_UART_MspInit+0x14c>)
 80024f8:	f000 feb8 	bl	800326c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80024fc:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_UART_MspInit+0x150>)
 80024fe:	4a35      	ldr	r2, [pc, #212]	; (80025d4 <HAL_UART_MspInit+0x154>)
 8002500:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002502:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_UART_MspInit+0x150>)
 8002504:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002508:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_UART_MspInit+0x150>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002510:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <HAL_UART_MspInit+0x150>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_UART_MspInit+0x150>)
 8002518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800251c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_UART_MspInit+0x150>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_UART_MspInit+0x150>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_UART_MspInit+0x150>)
 800252c:	2200      	movs	r2, #0
 800252e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_UART_MspInit+0x150>)
 8002532:	2200      	movs	r2, #0
 8002534:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_UART_MspInit+0x150>)
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800253c:	4824      	ldr	r0, [pc, #144]	; (80025d0 <HAL_UART_MspInit+0x150>)
 800253e:	f000 fa93 	bl	8002a68 <HAL_DMA_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002548:	f7ff f8b6 	bl	80016b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <HAL_UART_MspInit+0x150>)
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
 8002552:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_UART_MspInit+0x150>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002558:	e030      	b.n	80025bc <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <HAL_UART_MspInit+0x158>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d12b      	bne.n	80025bc <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_UART_MspInit+0x148>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <HAL_UART_MspInit+0x148>)
 800256e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_UART_MspInit+0x148>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_UART_MspInit+0x148>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_UART_MspInit+0x148>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6313      	str	r3, [r2, #48]	; 0x30
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_UART_MspInit+0x148>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800259c:	230c      	movs	r3, #12
 800259e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ac:	2307      	movs	r3, #7
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <HAL_UART_MspInit+0x14c>)
 80025b8:	f000 fe58 	bl	800326c <HAL_GPIO_Init>
}
 80025bc:	bf00      	nop
 80025be:	3730      	adds	r7, #48	; 0x30
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40011000 	.word	0x40011000
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	20000220 	.word	0x20000220
 80025d4:	40026440 	.word	0x40026440
 80025d8:	40004400 	.word	0x40004400

080025dc <I2CScan>:
void UartLogPC (char *Msg) {
	HAL_UART_Transmit(&huart2, (uint8_t*)Msg, strlen(Msg), 100);
}

void I2CScan (I2C_HandleTypeDef* i2chandle)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b094      	sub	sp, #80	; 0x50
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 	HAL_StatusTypeDef result;
  	uint8_t i;
	char Msg[64];
	uint16_t Len;

	Len = sprintf(Msg,"Scanning i2c bus...");
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	4931      	ldr	r1, [pc, #196]	; (80026b0 <I2CScan+0xd4>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 ff24 	bl	8006438 <siprintf>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Len, 1000);
 80025f6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80025fa:	f107 0108 	add.w	r1, r7, #8
 80025fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002602:	482c      	ldr	r0, [pc, #176]	; (80026b4 <I2CScan+0xd8>)
 8002604:	f002 fdaf 	bl	8005166 <HAL_UART_Transmit>

  	for (i=0; i<127; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800260e:	e034      	b.n	800267a <I2CScan+0x9e>
  	   * (uint16_t)(i<<1) is the i2c address left aligned
  	   * retries 2
  	   * timeout 2
  	   */

  	  result = HAL_I2C_IsDeviceReady(i2chandle, (uint16_t)(i<<1), 2, 2);
 8002610:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002614:	b29b      	uxth	r3, r3
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	b299      	uxth	r1, r3
 800261a:	2302      	movs	r3, #2
 800261c:	2202      	movs	r2, #2
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f001 fc56 	bl	8003ed0 <HAL_I2C_IsDeviceReady>
 8002624:	4603      	mov	r3, r0
 8002626:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 800262a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <I2CScan+0x64>
  	  {
  		HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, 1000);
 8002632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002636:	2201      	movs	r2, #1
 8002638:	491f      	ldr	r1, [pc, #124]	; (80026b8 <I2CScan+0xdc>)
 800263a:	481e      	ldr	r0, [pc, #120]	; (80026b4 <I2CScan+0xd8>)
 800263c:	f002 fd93 	bl	8005166 <HAL_UART_Transmit>
  	  }
  	  if (result == HAL_OK)
 8002640:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002644:	2b00      	cmp	r3, #0
 8002646:	d113      	bne.n	8002670 <I2CScan+0x94>
  	  {
  		Len = sprintf(Msg,"\r\nDevice found! Address : 0x%X\r\n", i);
 8002648:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	491a      	ldr	r1, [pc, #104]	; (80026bc <I2CScan+0xe0>)
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fef0 	bl	8006438 <siprintf>
 8002658:	4603      	mov	r3, r0
 800265a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  		HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Len, 1000);
 800265e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002662:	f107 0108 	add.w	r1, r7, #8
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	4812      	ldr	r0, [pc, #72]	; (80026b4 <I2CScan+0xd8>)
 800266c:	f002 fd7b 	bl	8005166 <HAL_UART_Transmit>
  	for (i=0; i<127; i++)
 8002670:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002674:	3301      	adds	r3, #1
 8002676:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800267a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800267e:	2b7e      	cmp	r3, #126	; 0x7e
 8002680:	d9c6      	bls.n	8002610 <I2CScan+0x34>
  	  }
  	}

  	Len = sprintf(Msg,"Scan finished\r\n");
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	490e      	ldr	r1, [pc, #56]	; (80026c0 <I2CScan+0xe4>)
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fed5 	bl	8006438 <siprintf>
 800268e:	4603      	mov	r3, r0
 8002690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  	HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Len, 1000);
 8002694:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002698:	f107 0108 	add.w	r1, r7, #8
 800269c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a0:	4804      	ldr	r0, [pc, #16]	; (80026b4 <I2CScan+0xd8>)
 80026a2:	f002 fd60 	bl	8005166 <HAL_UART_Transmit>
}
 80026a6:	bf00      	nop
 80026a8:	3750      	adds	r7, #80	; 0x50
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	08007c94 	.word	0x08007c94
 80026b4:	200002c4 	.word	0x200002c4
 80026b8:	08007ca8 	.word	0x08007ca8
 80026bc:	08007cac 	.word	0x08007cac
 80026c0:	08007cd0 	.word	0x08007cd0

080026c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ca:	490e      	ldr	r1, [pc, #56]	; (8002704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026cc:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026e0:	4c0b      	ldr	r4, [pc, #44]	; (8002710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ee:	f7ff fc2b 	bl	8001f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f003 fe75 	bl	80063e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7fe fed9 	bl	80014ac <main>
  bx  lr    
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002704:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002708:	08007e70 	.word	0x08007e70
  ldr r2, =_sbss
 800270c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002710:	2000031c 	.word	0x2000031c

08002714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <ADC_IRQHandler>
	...

08002718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <HAL_Init+0x40>)
 8002722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_Init+0x40>)
 800272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_Init+0x40>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f000 f94f 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002746:	2000      	movs	r0, #0
 8002748:	f000 f808 	bl	800275c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800274c:	f7ff fac8 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x54>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x58>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	fbb3 f3f1 	udiv	r3, r3, r1
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f967 	bl	8002a4e <HAL_SYSTICK_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00e      	b.n	80027a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d80a      	bhi.n	80027a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f000 f92f 	bl	80029fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_InitTick+0x5c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000008 	.word	0x20000008
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x24>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_IncTick+0x24>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000008 	.word	0x20000008
 80027e0:	20000308 	.word	0x20000308

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GetTick+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000308 	.word	0x20000308

080027fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff ffee 	bl	80027e4 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d005      	beq.n	8002822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_Delay+0x44>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002822:	bf00      	nop
 8002824:	f7ff ffde 	bl	80027e4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	429a      	cmp	r2, r3
 8002832:	d8f7      	bhi.n	8002824 <HAL_Delay+0x28>
  {
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000008 	.word	0x20000008

08002844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002860:	4013      	ands	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800286c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002876:	4a04      	ldr	r2, [pc, #16]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	60d3      	str	r3, [r2, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	f003 0307 	and.w	r3, r3, #7
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db0b      	blt.n	80028d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <__NVIC_EnableIRQ+0x38>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2001      	movs	r0, #1
 80028ca:	fa00 f202 	lsl.w	r2, r0, r2
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	; (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	; (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f1c3 0307 	rsb	r3, r3, #7
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf28      	it	cs
 8002956:	2304      	movcs	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	2b06      	cmp	r3, #6
 8002960:	d902      	bls.n	8002968 <NVIC_EncodePriority+0x30>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b03      	subs	r3, #3
 8002966:	e000      	b.n	800296a <NVIC_EncodePriority+0x32>
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	401a      	ands	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002980:	f04f 31ff 	mov.w	r1, #4294967295
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43d9      	mvns	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	4313      	orrs	r3, r2
         );
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b0:	d301      	bcc.n	80029b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00f      	b.n	80029d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <SysTick_Config+0x40>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029be:	210f      	movs	r1, #15
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f7ff ff8e 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <SysTick_Config+0x40>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SysTick_Config+0x40>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff29 	bl	8002844 <__NVIC_SetPriorityGrouping>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0c:	f7ff ff3e 	bl	800288c <__NVIC_GetPriorityGrouping>
 8002a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f7ff ff8e 	bl	8002938 <NVIC_EncodePriority>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff5d 	bl	80028e4 <__NVIC_SetPriority>
}
 8002a2a:	bf00      	nop
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff31 	bl	80028a8 <__NVIC_EnableIRQ>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ffa2 	bl	80029a0 <SysTick_Config>
 8002a5c:	4603      	mov	r3, r0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff feb6 	bl	80027e4 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e099      	b.n	8002bb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa4:	e00f      	b.n	8002ac6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa6:	f7ff fe9d 	bl	80027e4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d908      	bls.n	8002ac6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2203      	movs	r2, #3
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e078      	b.n	8002bb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e8      	bne.n	8002aa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_DMA_Init+0x158>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d107      	bne.n	8002b30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0307 	bic.w	r3, r3, #7
 8002b46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d117      	bne.n	8002b8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00e      	beq.n	8002b8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fb01 	bl	8003174 <DMA_CheckFifoParam>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2240      	movs	r2, #64	; 0x40
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b86:	2301      	movs	r3, #1
 8002b88:	e016      	b.n	8002bb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fab8 	bl	8003108 <DMA_CalcBaseAndBitshift>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	223f      	movs	r2, #63	; 0x3f
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	f010803f 	.word	0xf010803f

08002bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_DMA_Start_IT+0x26>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e040      	b.n	8002c6c <HAL_DMA_Start_IT+0xa8>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d12f      	bne.n	8002c5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fa4a 	bl	80030ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	223f      	movs	r2, #63	; 0x3f
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0216 	orr.w	r2, r2, #22
 8002c32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0208 	orr.w	r2, r2, #8
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e005      	b.n	8002c6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c82:	f7ff fdaf 	bl	80027e4 <HAL_GetTick>
 8002c86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d008      	beq.n	8002ca6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e052      	b.n	8002d4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0216 	bic.w	r2, r2, #22
 8002cb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_DMA_Abort+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0208 	bic.w	r2, r2, #8
 8002ce4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf6:	e013      	b.n	8002d20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf8:	f7ff fd74 	bl	80027e4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d90c      	bls.n	8002d20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e015      	b.n	8002d4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e4      	bne.n	8002cf8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	223f      	movs	r2, #63	; 0x3f
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d004      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00c      	b.n	8002d8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2205      	movs	r2, #5
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002da4:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <HAL_DMA_IRQHandler+0x258>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a92      	ldr	r2, [pc, #584]	; (8002ff4 <HAL_DMA_IRQHandler+0x25c>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0a9b      	lsrs	r3, r3, #10
 8002db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	2208      	movs	r2, #8
 8002df2:	409a      	lsls	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	2201      	movs	r2, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	2204      	movs	r2, #4
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d012      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	2210      	movs	r2, #16
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d043      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03c      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	2210      	movs	r2, #16
 8002e94:	409a      	lsls	r2, r3
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d024      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
 8002ec6:	e01f      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
 8002ed8:	e016      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0208 	bic.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 808e 	beq.w	8003036 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8086 	beq.w	8003036 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	2220      	movs	r2, #32
 8002f30:	409a      	lsls	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d136      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0216 	bic.w	r2, r2, #22
 8002f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x1da>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0208 	bic.w	r2, r2, #8
 8002f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	223f      	movs	r2, #63	; 0x3f
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d07d      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
        }
        return;
 8002fae:	e078      	b.n	80030a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01c      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d108      	bne.n	8002fde <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d030      	beq.n	8003036 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	e02b      	b.n	8003036 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d027      	beq.n	8003036 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
 8002fee:	e022      	b.n	8003036 <HAL_DMA_IRQHandler+0x29e>
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10f      	bne.n	8003026 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0210 	bic.w	r2, r2, #16
 8003014:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	2b00      	cmp	r3, #0
 800303c:	d032      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d022      	beq.n	8003090 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2205      	movs	r2, #5
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3301      	adds	r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	429a      	cmp	r2, r3
 800306c:	d307      	bcc.n	800307e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f2      	bne.n	8003062 <HAL_DMA_IRQHandler+0x2ca>
 800307c:	e000      	b.n	8003080 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800307e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
 80030a0:	e000      	b.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80030a2:	bf00      	nop
    }
  }
}
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop

080030ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b40      	cmp	r3, #64	; 0x40
 80030d8:	d108      	bne.n	80030ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030ea:	e007      	b.n	80030fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	60da      	str	r2, [r3, #12]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	3b10      	subs	r3, #16
 8003118:	4a14      	ldr	r2, [pc, #80]	; (800316c <DMA_CalcBaseAndBitshift+0x64>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <DMA_CalcBaseAndBitshift+0x68>)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b03      	cmp	r3, #3
 8003134:	d909      	bls.n	800314a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	1d1a      	adds	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	659a      	str	r2, [r3, #88]	; 0x58
 8003148:	e007      	b.n	800315a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003152:	f023 0303 	bic.w	r3, r3, #3
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	aaaaaaab 	.word	0xaaaaaaab
 8003170:	08007d0c 	.word	0x08007d0c

08003174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11f      	bne.n	80031ce <DMA_CheckFifoParam+0x5a>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d856      	bhi.n	8003242 <DMA_CheckFifoParam+0xce>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <DMA_CheckFifoParam+0x28>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031ad 	.word	0x080031ad
 80031a0:	080031bf 	.word	0x080031bf
 80031a4:	080031ad 	.word	0x080031ad
 80031a8:	08003243 	.word	0x08003243
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d046      	beq.n	8003246 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031bc:	e043      	b.n	8003246 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031c6:	d140      	bne.n	800324a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031cc:	e03d      	b.n	800324a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d6:	d121      	bne.n	800321c <DMA_CheckFifoParam+0xa8>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d837      	bhi.n	800324e <DMA_CheckFifoParam+0xda>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <DMA_CheckFifoParam+0x70>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	080031fb 	.word	0x080031fb
 80031ec:	080031f5 	.word	0x080031f5
 80031f0:	0800320d 	.word	0x0800320d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e030      	b.n	800325c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d025      	beq.n	8003252 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800320a:	e022      	b.n	8003252 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003214:	d11f      	bne.n	8003256 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800321a:	e01c      	b.n	8003256 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d903      	bls.n	800322a <DMA_CheckFifoParam+0xb6>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d003      	beq.n	8003230 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003228:	e018      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
      break;
 800322e:	e015      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      break;
 8003240:	e00b      	b.n	800325a <DMA_CheckFifoParam+0xe6>
      break;
 8003242:	bf00      	nop
 8003244:	e00a      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 8003246:	bf00      	nop
 8003248:	e008      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 800324a:	bf00      	nop
 800324c:	e006      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
 8003250:	e004      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;   
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <DMA_CheckFifoParam+0xe8>
      break;
 800325a:	bf00      	nop
    }
  } 
  
  return status; 
 800325c:	7bfb      	ldrb	r3, [r7, #15]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop

0800326c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	e159      	b.n	800353c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003288:	2201      	movs	r2, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	f040 8148 	bne.w	8003536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d005      	beq.n	80032be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d130      	bne.n	8003320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	2203      	movs	r2, #3
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f4:	2201      	movs	r2, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 0201 	and.w	r2, r3, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	2b03      	cmp	r3, #3
 800332a:	d017      	beq.n	800335c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d123      	bne.n	80033b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	08da      	lsrs	r2, r3, #3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3208      	adds	r2, #8
 8003370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	220f      	movs	r2, #15
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	08da      	lsrs	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3208      	adds	r2, #8
 80033aa:	69b9      	ldr	r1, [r7, #24]
 80033ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2203      	movs	r2, #3
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0203 	and.w	r2, r3, #3
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80a2 	beq.w	8003536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	4b57      	ldr	r3, [pc, #348]	; (8003554 <HAL_GPIO_Init+0x2e8>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_GPIO_Init+0x2e8>)
 80033fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003400:	6453      	str	r3, [r2, #68]	; 0x44
 8003402:	4b54      	ldr	r3, [pc, #336]	; (8003554 <HAL_GPIO_Init+0x2e8>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800340e:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_GPIO_Init+0x2ec>)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	3302      	adds	r3, #2
 8003416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	220f      	movs	r2, #15
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a49      	ldr	r2, [pc, #292]	; (800355c <HAL_GPIO_Init+0x2f0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d019      	beq.n	800346e <HAL_GPIO_Init+0x202>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a48      	ldr	r2, [pc, #288]	; (8003560 <HAL_GPIO_Init+0x2f4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_GPIO_Init+0x1fe>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a47      	ldr	r2, [pc, #284]	; (8003564 <HAL_GPIO_Init+0x2f8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00d      	beq.n	8003466 <HAL_GPIO_Init+0x1fa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a46      	ldr	r2, [pc, #280]	; (8003568 <HAL_GPIO_Init+0x2fc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <HAL_GPIO_Init+0x1f6>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a45      	ldr	r2, [pc, #276]	; (800356c <HAL_GPIO_Init+0x300>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_GPIO_Init+0x1f2>
 800345a:	2304      	movs	r3, #4
 800345c:	e008      	b.n	8003470 <HAL_GPIO_Init+0x204>
 800345e:	2307      	movs	r3, #7
 8003460:	e006      	b.n	8003470 <HAL_GPIO_Init+0x204>
 8003462:	2303      	movs	r3, #3
 8003464:	e004      	b.n	8003470 <HAL_GPIO_Init+0x204>
 8003466:	2302      	movs	r3, #2
 8003468:	e002      	b.n	8003470 <HAL_GPIO_Init+0x204>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_GPIO_Init+0x204>
 800346e:	2300      	movs	r3, #0
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	f002 0203 	and.w	r2, r2, #3
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	4093      	lsls	r3, r2
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003480:	4935      	ldr	r1, [pc, #212]	; (8003558 <HAL_GPIO_Init+0x2ec>)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800348e:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_GPIO_Init+0x304>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b2:	4a2f      	ldr	r2, [pc, #188]	; (8003570 <HAL_GPIO_Init+0x304>)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034b8:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_GPIO_Init+0x304>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034dc:	4a24      	ldr	r2, [pc, #144]	; (8003570 <HAL_GPIO_Init+0x304>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e2:	4b23      	ldr	r3, [pc, #140]	; (8003570 <HAL_GPIO_Init+0x304>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003506:	4a1a      	ldr	r2, [pc, #104]	; (8003570 <HAL_GPIO_Init+0x304>)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_GPIO_Init+0x304>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003530:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <HAL_GPIO_Init+0x304>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3301      	adds	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	f67f aea2 	bls.w	8003288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	40013800 	.word	0x40013800
 800355c:	40020000 	.word	0x40020000
 8003560:	40020400 	.word	0x40020400
 8003564:	40020800 	.word	0x40020800
 8003568:	40020c00 	.word	0x40020c00
 800356c:	40021000 	.word	0x40021000
 8003570:	40013c00 	.word	0x40013c00

08003574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e001      	b.n	8003596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	807b      	strh	r3, [r7, #2]
 80035b0:	4613      	mov	r3, r2
 80035b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b4:	787b      	ldrb	r3, [r7, #1]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035c0:	e003      	b.n	80035ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	041a      	lsls	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	619a      	str	r2, [r3, #24]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d006      	beq.n	80035fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ee:	4a05      	ldr	r2, [pc, #20]	; (8003604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe f84e 	bl	8001698 <HAL_GPIO_EXTI_Callback>
  }
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40013c00 	.word	0x40013c00

08003608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e12b      	b.n	8003872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fef4 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800365a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800366a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800366c:	f001 fd06 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8003670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4a81      	ldr	r2, [pc, #516]	; (800387c <HAL_I2C_Init+0x274>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d807      	bhi.n	800368c <HAL_I2C_Init+0x84>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a80      	ldr	r2, [pc, #512]	; (8003880 <HAL_I2C_Init+0x278>)
 8003680:	4293      	cmp	r3, r2
 8003682:	bf94      	ite	ls
 8003684:	2301      	movls	r3, #1
 8003686:	2300      	movhi	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e006      	b.n	800369a <HAL_I2C_Init+0x92>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a7d      	ldr	r2, [pc, #500]	; (8003884 <HAL_I2C_Init+0x27c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0e7      	b.n	8003872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a78      	ldr	r2, [pc, #480]	; (8003888 <HAL_I2C_Init+0x280>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9b      	lsrs	r3, r3, #18
 80036ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a6a      	ldr	r2, [pc, #424]	; (800387c <HAL_I2C_Init+0x274>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d802      	bhi.n	80036dc <HAL_I2C_Init+0xd4>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	3301      	adds	r3, #1
 80036da:	e009      	b.n	80036f0 <HAL_I2C_Init+0xe8>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	4a69      	ldr	r2, [pc, #420]	; (800388c <HAL_I2C_Init+0x284>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	099b      	lsrs	r3, r3, #6
 80036ee:	3301      	adds	r3, #1
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	495c      	ldr	r1, [pc, #368]	; (800387c <HAL_I2C_Init+0x274>)
 800370c:	428b      	cmp	r3, r1
 800370e:	d819      	bhi.n	8003744 <HAL_I2C_Init+0x13c>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1e59      	subs	r1, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	fbb1 f3f3 	udiv	r3, r1, r3
 800371e:	1c59      	adds	r1, r3, #1
 8003720:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003724:	400b      	ands	r3, r1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_I2C_Init+0x138>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1e59      	subs	r1, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fbb1 f3f3 	udiv	r3, r1, r3
 8003738:	3301      	adds	r3, #1
 800373a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373e:	e051      	b.n	80037e4 <HAL_I2C_Init+0x1dc>
 8003740:	2304      	movs	r3, #4
 8003742:	e04f      	b.n	80037e4 <HAL_I2C_Init+0x1dc>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d111      	bne.n	8003770 <HAL_I2C_Init+0x168>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e58      	subs	r0, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	440b      	add	r3, r1
 800375a:	fbb0 f3f3 	udiv	r3, r0, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e012      	b.n	8003796 <HAL_I2C_Init+0x18e>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	0099      	lsls	r1, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Init+0x196>
 800379a:	2301      	movs	r3, #1
 800379c:	e022      	b.n	80037e4 <HAL_I2C_Init+0x1dc>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10e      	bne.n	80037c4 <HAL_I2C_Init+0x1bc>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1e58      	subs	r0, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6859      	ldr	r1, [r3, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	440b      	add	r3, r1
 80037b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b8:	3301      	adds	r3, #1
 80037ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c2:	e00f      	b.n	80037e4 <HAL_I2C_Init+0x1dc>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	0099      	lsls	r1, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	6809      	ldr	r1, [r1, #0]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6911      	ldr	r1, [r2, #16]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	4311      	orrs	r1, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	430b      	orrs	r3, r1
 8003826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	000186a0 	.word	0x000186a0
 8003880:	001e847f 	.word	0x001e847f
 8003884:	003d08ff 	.word	0x003d08ff
 8003888:	431bde83 	.word	0x431bde83
 800388c:	10624dd3 	.word	0x10624dd3

08003890 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	817b      	strh	r3, [r7, #10]
 80038a2:	460b      	mov	r3, r1
 80038a4:	813b      	strh	r3, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038aa:	f7fe ff9b 	bl	80027e4 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	f040 80d9 	bne.w	8003a70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2319      	movs	r3, #25
 80038c4:	2201      	movs	r2, #1
 80038c6:	496d      	ldr	r1, [pc, #436]	; (8003a7c <HAL_I2C_Mem_Write+0x1ec>)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fdad 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
 80038d6:	e0cc      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_I2C_Mem_Write+0x56>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e0c5      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d007      	beq.n	800390c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2221      	movs	r2, #33	; 0x21
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a4d      	ldr	r2, [pc, #308]	; (8003a80 <HAL_I2C_Mem_Write+0x1f0>)
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800394e:	88f8      	ldrh	r0, [r7, #6]
 8003950:	893a      	ldrh	r2, [r7, #8]
 8003952:	8979      	ldrh	r1, [r7, #10]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4603      	mov	r3, r0
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fbe4 	bl	800412c <I2C_RequestMemoryWrite>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d052      	beq.n	8003a10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e081      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fe2e 	bl	80045d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00d      	beq.n	800399a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b04      	cmp	r3, #4
 8003984:	d107      	bne.n	8003996 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e06b      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d11b      	bne.n	8003a10 <HAL_I2C_Mem_Write+0x180>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d017      	beq.n	8003a10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1aa      	bne.n	800396e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fe1a 	bl	8004656 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d107      	bne.n	8003a40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e016      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	00100002 	.word	0x00100002
 8003a80:	ffff0000 	.word	0xffff0000

08003a84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	461a      	mov	r2, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	817b      	strh	r3, [r7, #10]
 8003a96:	460b      	mov	r3, r1
 8003a98:	813b      	strh	r3, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a9e:	f7fe fea1 	bl	80027e4 <HAL_GetTick>
 8003aa2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	f040 8208 	bne.w	8003ec2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2319      	movs	r3, #25
 8003ab8:	2201      	movs	r2, #1
 8003aba:	497b      	ldr	r1, [pc, #492]	; (8003ca8 <HAL_I2C_Mem_Read+0x224>)
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fcb3 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e1fb      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_I2C_Mem_Read+0x56>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e1f4      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d007      	beq.n	8003b00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2222      	movs	r2, #34	; 0x22
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2240      	movs	r2, #64	; 0x40
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a5b      	ldr	r2, [pc, #364]	; (8003cac <HAL_I2C_Mem_Read+0x228>)
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b42:	88f8      	ldrh	r0, [r7, #6]
 8003b44:	893a      	ldrh	r2, [r7, #8]
 8003b46:	8979      	ldrh	r1, [r7, #10]
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	4603      	mov	r3, r0
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fb80 	bl	8004258 <I2C_RequestMemoryRead>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1b0      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d113      	bne.n	8003b92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	623b      	str	r3, [r7, #32]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	623b      	str	r3, [r7, #32]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e184      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d11b      	bne.n	8003bd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e164      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d11b      	bne.n	8003c12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	e144      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c28:	e138      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	f200 80f1 	bhi.w	8003e16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d123      	bne.n	8003c84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fd49 	bl	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e139      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c82:	e10b      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d14e      	bne.n	8003d2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2200      	movs	r2, #0
 8003c94:	4906      	ldr	r1, [pc, #24]	; (8003cb0 <HAL_I2C_Mem_Read+0x22c>)
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fbc6 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e10e      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
 8003ca6:	bf00      	nop
 8003ca8:	00100002 	.word	0x00100002
 8003cac:	ffff0000 	.word	0xffff0000
 8003cb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d28:	e0b8      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2200      	movs	r2, #0
 8003d32:	4966      	ldr	r1, [pc, #408]	; (8003ecc <HAL_I2C_Mem_Read+0x448>)
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fb77 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0bf      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	494f      	ldr	r1, [pc, #316]	; (8003ecc <HAL_I2C_Mem_Read+0x448>)
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fb49 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e091      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e14:	e042      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fc5c 	bl	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e04c      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d118      	bne.n	8003e9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f47f aec2 	bne.w	8003c2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e000      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
  }
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	00010004 	.word	0x00010004

08003ed0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	460b      	mov	r3, r1
 8003ede:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7fe fc80 	bl	80027e4 <HAL_GetTick>
 8003ee4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	f040 8111 	bne.w	800411a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2319      	movs	r3, #25
 8003efe:	2201      	movs	r2, #1
 8003f00:	4988      	ldr	r1, [pc, #544]	; (8004124 <HAL_I2C_IsDeviceReady+0x254>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa90 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e104      	b.n	800411c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_I2C_IsDeviceReady+0x50>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0fd      	b.n	800411c <HAL_I2C_IsDeviceReady+0x24c>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d007      	beq.n	8003f46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2224      	movs	r2, #36	; 0x24
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a70      	ldr	r2, [pc, #448]	; (8004128 <HAL_I2C_IsDeviceReady+0x258>)
 8003f68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fa4e 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa0:	d103      	bne.n	8003faa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e0b6      	b.n	800411c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fae:	897b      	ldrh	r3, [r7, #10]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003fbe:	f7fe fc11 	bl	80027e4 <HAL_GetTick>
 8003fc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ff2:	e025      	b.n	8004040 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ff4:	f7fe fbf6 	bl	80027e4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <HAL_I2C_IsDeviceReady+0x13a>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	22a0      	movs	r2, #160	; 0xa0
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2ba0      	cmp	r3, #160	; 0xa0
 800404a:	d005      	beq.n	8004058 <HAL_I2C_IsDeviceReady+0x188>
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <HAL_I2C_IsDeviceReady+0x188>
 8004052:	7dbb      	ldrb	r3, [r7, #22]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0cd      	beq.n	8003ff4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d129      	bne.n	80040c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2319      	movs	r3, #25
 800409a:	2201      	movs	r2, #1
 800409c:	4921      	ldr	r1, [pc, #132]	; (8004124 <HAL_I2C_IsDeviceReady+0x254>)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f9c2 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e036      	b.n	800411c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e02c      	b.n	800411c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2319      	movs	r3, #25
 80040e2:	2201      	movs	r2, #1
 80040e4:	490f      	ldr	r1, [pc, #60]	; (8004124 <HAL_I2C_IsDeviceReady+0x254>)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f99e 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e012      	b.n	800411c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	3301      	adds	r3, #1
 80040fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	f4ff af32 	bcc.w	8003f6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	00100002 	.word	0x00100002
 8004128:	ffff0000 	.word	0xffff0000

0800412c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	461a      	mov	r2, r3
 800413a:	4603      	mov	r3, r0
 800413c:	817b      	strh	r3, [r7, #10]
 800413e:	460b      	mov	r3, r1
 8004140:	813b      	strh	r3, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004154:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	2200      	movs	r2, #0
 800415e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f960 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417c:	d103      	bne.n	8004186 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e05f      	b.n	800424a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800418a:	897b      	ldrh	r3, [r7, #10]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004198:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	6a3a      	ldr	r2, [r7, #32]
 800419e:	492d      	ldr	r1, [pc, #180]	; (8004254 <I2C_RequestMemoryWrite+0x128>)
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f998 	bl	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e04c      	b.n	800424a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c8:	6a39      	ldr	r1, [r7, #32]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fa02 	bl	80045d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d107      	bne.n	80041ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e02b      	b.n	800424a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f8:	893b      	ldrh	r3, [r7, #8]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	611a      	str	r2, [r3, #16]
 8004202:	e021      	b.n	8004248 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004204:	893b      	ldrh	r3, [r7, #8]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	b29b      	uxth	r3, r3
 800420a:	b2da      	uxtb	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	6a39      	ldr	r1, [r7, #32]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f9dc 	bl	80045d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2b04      	cmp	r3, #4
 8004228:	d107      	bne.n	800423a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004238:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e005      	b.n	800424a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800423e:	893b      	ldrh	r3, [r7, #8]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	00010002 	.word	0x00010002

08004258 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	817b      	strh	r3, [r7, #10]
 800426a:	460b      	mov	r3, r1
 800426c:	813b      	strh	r3, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004280:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004290:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	2200      	movs	r2, #0
 800429a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f8c2 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b8:	d103      	bne.n	80042c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0aa      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	4952      	ldr	r1, [pc, #328]	; (8004424 <I2C_RequestMemoryRead+0x1cc>)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f8fa 	bl	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e097      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	6a39      	ldr	r1, [r7, #32]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f964 	bl	80045d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b04      	cmp	r3, #4
 8004318:	d107      	bne.n	800432a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004328:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e076      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	611a      	str	r2, [r3, #16]
 800433e:	e021      	b.n	8004384 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004340:	893b      	ldrh	r3, [r7, #8]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	b29b      	uxth	r3, r3
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	6a39      	ldr	r1, [r7, #32]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f93e 	bl	80045d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2b04      	cmp	r3, #4
 8004364:	d107      	bne.n	8004376 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004374:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e050      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800437a:	893b      	ldrh	r3, [r7, #8]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004386:	6a39      	ldr	r1, [r7, #32]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f923 	bl	80045d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2b04      	cmp	r3, #4
 800439a:	d107      	bne.n	80043ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e035      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f82b 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00d      	beq.n	80043f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e6:	d103      	bne.n	80043f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e013      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043f4:	897b      	ldrh	r3, [r7, #10]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	6a3a      	ldr	r2, [r7, #32]
 8004408:	4906      	ldr	r1, [pc, #24]	; (8004424 <I2C_RequestMemoryRead+0x1cc>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f863 	bl	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010002 	.word	0x00010002

08004428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004438:	e025      	b.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d021      	beq.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fe f9cf 	bl	80027e4 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d116      	bne.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e023      	b.n	80044ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d10d      	bne.n	80044ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	e00c      	b.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	43da      	mvns	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4013      	ands	r3, r2
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bf0c      	ite	eq
 80044be:	2301      	moveq	r3, #1
 80044c0:	2300      	movne	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d0b6      	beq.n	800443a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e4:	e051      	b.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f4:	d123      	bne.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004504:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800450e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f043 0204 	orr.w	r2, r3, #4
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e046      	b.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d021      	beq.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fe f94d 	bl	80027e4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e020      	b.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10c      	bne.n	80045ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	43da      	mvns	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e00b      	b.n	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	43da      	mvns	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d18d      	bne.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e0:	e02d      	b.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f8ce 	bl	8004784 <I2C_IsAcknowledgeFailed>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e02d      	b.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d021      	beq.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe f8f3 	bl	80027e4 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d116      	bne.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e007      	b.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d1ca      	bne.n	80045e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004662:	e02d      	b.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f88d 	bl	8004784 <I2C_IsAcknowledgeFailed>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e02d      	b.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d021      	beq.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fe f8b2 	bl	80027e4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e007      	b.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d1ca      	bne.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e4:	e042      	b.n	800476c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d119      	bne.n	8004728 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0210 	mvn.w	r2, #16
 80046fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e029      	b.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004728:	f7fe f85c 	bl	80027e4 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	d302      	bcc.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d116      	bne.n	800476c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e007      	b.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d1b5      	bne.n	80046e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479a:	d11b      	bne.n	80047d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f043 0204 	orr.w	r2, r3, #4
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e264      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d075      	beq.n	80048ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004802:	4ba3      	ldr	r3, [pc, #652]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b04      	cmp	r3, #4
 800480c:	d00c      	beq.n	8004828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480e:	4ba0      	ldr	r3, [pc, #640]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004816:	2b08      	cmp	r3, #8
 8004818:	d112      	bne.n	8004840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481a:	4b9d      	ldr	r3, [pc, #628]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004826:	d10b      	bne.n	8004840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004828:	4b99      	ldr	r3, [pc, #612]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d05b      	beq.n	80048ec <HAL_RCC_OscConfig+0x108>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d157      	bne.n	80048ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e23f      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004848:	d106      	bne.n	8004858 <HAL_RCC_OscConfig+0x74>
 800484a:	4b91      	ldr	r3, [pc, #580]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a90      	ldr	r2, [pc, #576]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e01d      	b.n	8004894 <HAL_RCC_OscConfig+0xb0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0x98>
 8004862:	4b8b      	ldr	r3, [pc, #556]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a8a      	ldr	r2, [pc, #552]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a87      	ldr	r2, [pc, #540]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e00b      	b.n	8004894 <HAL_RCC_OscConfig+0xb0>
 800487c:	4b84      	ldr	r3, [pc, #528]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a83      	ldr	r2, [pc, #524]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	4b81      	ldr	r3, [pc, #516]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a80      	ldr	r2, [pc, #512]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fd ffa2 	bl	80027e4 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fd ff9e 	bl	80027e4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	; 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e204      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	4b76      	ldr	r3, [pc, #472]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0xc0>
 80048c2:	e014      	b.n	80048ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fd ff8e 	bl	80027e4 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fd ff8a 	bl	80027e4 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	; 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1f0      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048de:	4b6c      	ldr	r3, [pc, #432]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0xe8>
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d063      	beq.n	80049c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048fa:	4b65      	ldr	r3, [pc, #404]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004906:	4b62      	ldr	r3, [pc, #392]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800490e:	2b08      	cmp	r3, #8
 8004910:	d11c      	bne.n	800494c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004912:	4b5f      	ldr	r3, [pc, #380]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d116      	bne.n	800494c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491e:	4b5c      	ldr	r3, [pc, #368]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_RCC_OscConfig+0x152>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d001      	beq.n	8004936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e1c4      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004936:	4b56      	ldr	r3, [pc, #344]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4952      	ldr	r1, [pc, #328]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494a:	e03a      	b.n	80049c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004954:	4b4f      	ldr	r3, [pc, #316]	; (8004a94 <HAL_RCC_OscConfig+0x2b0>)
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7fd ff43 	bl	80027e4 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004962:	f7fd ff3f 	bl	80027e4 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e1a5      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004974:	4b46      	ldr	r3, [pc, #280]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004980:	4b43      	ldr	r3, [pc, #268]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4940      	ldr	r1, [pc, #256]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]
 8004994:	e015      	b.n	80049c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004996:	4b3f      	ldr	r3, [pc, #252]	; (8004a94 <HAL_RCC_OscConfig+0x2b0>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fd ff22 	bl	80027e4 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a4:	f7fd ff1e 	bl	80027e4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e184      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b6:	4b36      	ldr	r3, [pc, #216]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d030      	beq.n	8004a30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d6:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <HAL_RCC_OscConfig+0x2b4>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fd ff02 	bl	80027e4 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e4:	f7fd fefe 	bl	80027e4 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e164      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f6:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x200>
 8004a02:	e015      	b.n	8004a30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a04:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <HAL_RCC_OscConfig+0x2b4>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a0a:	f7fd feeb 	bl	80027e4 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a12:	f7fd fee7 	bl	80027e4 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e14d      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a24:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a0 	beq.w	8004b7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a42:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10f      	bne.n	8004a6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	4a0e      	ldr	r2, [pc, #56]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_OscConfig+0x2b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d121      	bne.n	8004abe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <HAL_RCC_OscConfig+0x2b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a07      	ldr	r2, [pc, #28]	; (8004a9c <HAL_RCC_OscConfig+0x2b8>)
 8004a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a86:	f7fd fead 	bl	80027e4 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	e011      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2ce>
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800
 8004a94:	42470000 	.word	0x42470000
 8004a98:	42470e80 	.word	0x42470e80
 8004a9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa0:	f7fd fea0 	bl	80027e4 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e106      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	4b85      	ldr	r3, [pc, #532]	; (8004cc8 <HAL_RCC_OscConfig+0x4e4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d106      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x2f0>
 8004ac6:	4b81      	ldr	r3, [pc, #516]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	4a80      	ldr	r2, [pc, #512]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad2:	e01c      	b.n	8004b0e <HAL_RCC_OscConfig+0x32a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b05      	cmp	r3, #5
 8004ada:	d10c      	bne.n	8004af6 <HAL_RCC_OscConfig+0x312>
 8004adc:	4b7b      	ldr	r3, [pc, #492]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	4a7a      	ldr	r2, [pc, #488]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004ae2:	f043 0304 	orr.w	r3, r3, #4
 8004ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae8:	4b78      	ldr	r3, [pc, #480]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	4a77      	ldr	r2, [pc, #476]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	6713      	str	r3, [r2, #112]	; 0x70
 8004af4:	e00b      	b.n	8004b0e <HAL_RCC_OscConfig+0x32a>
 8004af6:	4b75      	ldr	r3, [pc, #468]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a74      	ldr	r2, [pc, #464]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	6713      	str	r3, [r2, #112]	; 0x70
 8004b02:	4b72      	ldr	r3, [pc, #456]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a71      	ldr	r2, [pc, #452]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004b08:	f023 0304 	bic.w	r3, r3, #4
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d015      	beq.n	8004b42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b16:	f7fd fe65 	bl	80027e4 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1c:	e00a      	b.n	8004b34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b1e:	f7fd fe61 	bl	80027e4 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e0c5      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b34:	4b65      	ldr	r3, [pc, #404]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0ee      	beq.n	8004b1e <HAL_RCC_OscConfig+0x33a>
 8004b40:	e014      	b.n	8004b6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b42:	f7fd fe4f 	bl	80027e4 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b48:	e00a      	b.n	8004b60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b4a:	f7fd fe4b 	bl	80027e4 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e0af      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b60:	4b5a      	ldr	r3, [pc, #360]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ee      	bne.n	8004b4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d105      	bne.n	8004b7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b72:	4b56      	ldr	r3, [pc, #344]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	4a55      	ldr	r2, [pc, #340]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 809b 	beq.w	8004cbe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b88:	4b50      	ldr	r3, [pc, #320]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d05c      	beq.n	8004c4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d141      	bne.n	8004c20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9c:	4b4c      	ldr	r3, [pc, #304]	; (8004cd0 <HAL_RCC_OscConfig+0x4ec>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fd fe1f 	bl	80027e4 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fd fe1b 	bl	80027e4 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e081      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbc:	4b43      	ldr	r3, [pc, #268]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f0      	bne.n	8004baa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	019b      	lsls	r3, r3, #6
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	3b01      	subs	r3, #1
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	061b      	lsls	r3, r3, #24
 8004bec:	4937      	ldr	r1, [pc, #220]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf2:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <HAL_RCC_OscConfig+0x4ec>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fdf4 	bl	80027e4 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fd fdf0 	bl	80027e4 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e056      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x41c>
 8004c1e:	e04e      	b.n	8004cbe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c20:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <HAL_RCC_OscConfig+0x4ec>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c26:	f7fd fddd 	bl	80027e4 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2e:	f7fd fdd9 	bl	80027e4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e03f      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c40:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f0      	bne.n	8004c2e <HAL_RCC_OscConfig+0x44a>
 8004c4c:	e037      	b.n	8004cbe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e032      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <HAL_RCC_OscConfig+0x4e8>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d028      	beq.n	8004cba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d121      	bne.n	8004cba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d11a      	bne.n	8004cba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d111      	bne.n	8004cba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	42470060 	.word	0x42470060

08004cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0cc      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b68      	ldr	r3, [pc, #416]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d90c      	bls.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b65      	ldr	r3, [pc, #404]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b63      	ldr	r3, [pc, #396]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0b8      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d28:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a58      	ldr	r2, [pc, #352]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d40:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4a52      	ldr	r2, [pc, #328]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d4c:	4b50      	ldr	r3, [pc, #320]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	494d      	ldr	r1, [pc, #308]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d044      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	4b47      	ldr	r3, [pc, #284]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d119      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e06f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e067      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004db2:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f023 0203 	bic.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4934      	ldr	r1, [pc, #208]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc4:	f7fd fd0e 	bl	80027e4 <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dcc:	f7fd fd0a 	bl	80027e4 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e04f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 020c 	and.w	r2, r3, #12
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d1eb      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d20c      	bcs.n	8004e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e032      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e28:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4916      	ldr	r1, [pc, #88]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	490e      	ldr	r1, [pc, #56]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e5a:	f000 f821 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	490a      	ldr	r1, [pc, #40]	; (8004e94 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	5ccb      	ldrb	r3, [r1, r3]
 8004e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e72:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_ClockConfig+0x1c8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd fc6e 	bl	800275c <HAL_InitTick>

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023c00 	.word	0x40023c00
 8004e90:	40023800 	.word	0x40023800
 8004e94:	08007cf4 	.word	0x08007cf4
 8004e98:	20000000 	.word	0x20000000
 8004e9c:	20000004 	.word	0x20000004

08004ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb8:	4b67      	ldr	r3, [pc, #412]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	f200 80bd 	bhi.w	8005044 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d003      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0x3a>
 8004ed2:	e0b7      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ed4:	4b61      	ldr	r3, [pc, #388]	; (800505c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ed6:	60bb      	str	r3, [r7, #8]
       break;
 8004ed8:	e0b7      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eda:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004edc:	60bb      	str	r3, [r7, #8]
      break;
 8004ede:	e0b4      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee0:	4b5d      	ldr	r3, [pc, #372]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eea:	4b5b      	ldr	r3, [pc, #364]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04d      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b58      	ldr	r3, [pc, #352]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	461a      	mov	r2, r3
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f06:	f04f 0100 	mov.w	r1, #0
 8004f0a:	ea02 0800 	and.w	r8, r2, r0
 8004f0e:	ea03 0901 	and.w	r9, r3, r1
 8004f12:	4640      	mov	r0, r8
 8004f14:	4649      	mov	r1, r9
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	014b      	lsls	r3, r1, #5
 8004f20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f24:	0142      	lsls	r2, r0, #5
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	ebb0 0008 	subs.w	r0, r0, r8
 8004f2e:	eb61 0109 	sbc.w	r1, r1, r9
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	018b      	lsls	r3, r1, #6
 8004f3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f40:	0182      	lsls	r2, r0, #6
 8004f42:	1a12      	subs	r2, r2, r0
 8004f44:	eb63 0301 	sbc.w	r3, r3, r1
 8004f48:	f04f 0000 	mov.w	r0, #0
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	00d9      	lsls	r1, r3, #3
 8004f52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f56:	00d0      	lsls	r0, r2, #3
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	eb12 0208 	adds.w	r2, r2, r8
 8004f60:	eb43 0309 	adc.w	r3, r3, r9
 8004f64:	f04f 0000 	mov.w	r0, #0
 8004f68:	f04f 0100 	mov.w	r1, #0
 8004f6c:	0259      	lsls	r1, r3, #9
 8004f6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f72:	0250      	lsls	r0, r2, #9
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	f7fb fdb2 	bl	8000aec <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e04a      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f92:	4b31      	ldr	r3, [pc, #196]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fa2:	f04f 0100 	mov.w	r1, #0
 8004fa6:	ea02 0400 	and.w	r4, r2, r0
 8004faa:	ea03 0501 	and.w	r5, r3, r1
 8004fae:	4620      	mov	r0, r4
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	014b      	lsls	r3, r1, #5
 8004fbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fc0:	0142      	lsls	r2, r0, #5
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	1b00      	subs	r0, r0, r4
 8004fc8:	eb61 0105 	sbc.w	r1, r1, r5
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	018b      	lsls	r3, r1, #6
 8004fd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fda:	0182      	lsls	r2, r0, #6
 8004fdc:	1a12      	subs	r2, r2, r0
 8004fde:	eb63 0301 	sbc.w	r3, r3, r1
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f04f 0100 	mov.w	r1, #0
 8004fea:	00d9      	lsls	r1, r3, #3
 8004fec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ff0:	00d0      	lsls	r0, r2, #3
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	1912      	adds	r2, r2, r4
 8004ff8:	eb45 0303 	adc.w	r3, r5, r3
 8004ffc:	f04f 0000 	mov.w	r0, #0
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	0299      	lsls	r1, r3, #10
 8005006:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800500a:	0290      	lsls	r0, r2, #10
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	461a      	mov	r2, r3
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	f7fb fd66 	bl	8000aec <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	60bb      	str	r3, [r7, #8]
      break;
 8005042:	e002      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005046:	60bb      	str	r3, [r7, #8]
      break;
 8005048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504a:	68bb      	ldr	r3, [r7, #8]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	00f42400 	.word	0x00f42400
 8005060:	007a1200 	.word	0x007a1200

08005064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005080:	f7ff fff0 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0a9b      	lsrs	r3, r3, #10
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	08007d04 	.word	0x08007d04

080050a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050a8:	f7ff ffdc 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0b5b      	lsrs	r3, r3, #13
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	08007d04 	.word	0x08007d04

080050cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e03f      	b.n	800515e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd f9c4 	bl	8002480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800510e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 ff97 	bl	8006044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b08a      	sub	sp, #40	; 0x28
 800516a:	af02      	add	r7, sp, #8
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	603b      	str	r3, [r7, #0]
 8005172:	4613      	mov	r3, r2
 8005174:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b20      	cmp	r3, #32
 8005184:	d17c      	bne.n	8005280 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_UART_Transmit+0x2c>
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e075      	b.n	8005282 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_UART_Transmit+0x3e>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e06e      	b.n	8005282 <HAL_UART_Transmit+0x11c>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2221      	movs	r2, #33	; 0x21
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ba:	f7fd fb13 	bl	80027e4 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d4:	d108      	bne.n	80051e8 <HAL_UART_Transmit+0x82>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	e003      	b.n	80051f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051f8:	e02a      	b.n	8005250 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2200      	movs	r2, #0
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fc53 	bl	8005ab0 <UART_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e036      	b.n	8005282 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005228:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	3302      	adds	r3, #2
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e007      	b.n	8005242 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	781a      	ldrb	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1cf      	bne.n	80051fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	2140      	movs	r1, #64	; 0x40
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fc23 	bl	8005ab0 <UART_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e006      	b.n	8005282 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e000      	b.n	8005282 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005280:	2302      	movs	r3, #2
  }
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b08c      	sub	sp, #48	; 0x30
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	4613      	mov	r3, r2
 8005296:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d152      	bne.n	800534a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e04b      	b.n	800534c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80052be:	2302      	movs	r3, #2
 80052c0:	e044      	b.n	800534c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	461a      	mov	r2, r3
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fc58 	bl	8005b8c <UART_Start_Receive_DMA>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80052e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d12c      	bne.n	8005344 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d125      	bne.n	800533e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	617b      	str	r3, [r7, #20]
   return(result);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f043 0310 	orr.w	r3, r3, #16
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005328:	627a      	str	r2, [r7, #36]	; 0x24
 800532a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6a39      	ldr	r1, [r7, #32]
 800532e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	61fb      	str	r3, [r7, #28]
   return(result);
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800533c:	e002      	b.n	8005344 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005348:	e000      	b.n	800534c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800534a:	2302      	movs	r3, #2
  }
}
 800534c:	4618      	mov	r0, r3
 800534e:	3730      	adds	r7, #48	; 0x30
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b0ba      	sub	sp, #232	; 0xe8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800537a:	2300      	movs	r3, #0
 800537c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10f      	bne.n	80053ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_UART_IRQHandler+0x66>
 80053a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fd8b 	bl	8005ece <UART_Receive_IT>
      return;
 80053b8:	e256      	b.n	8005868 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80de 	beq.w	8005580 <HAL_UART_IRQHandler+0x22c>
 80053c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80d1 	beq.w	8005580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_UART_IRQHandler+0xae>
 80053ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f043 0201 	orr.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <HAL_UART_IRQHandler+0xd2>
 800540e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f043 0202 	orr.w	r2, r3, #2
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <HAL_UART_IRQHandler+0xf6>
 8005432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0204 	orr.w	r2, r3, #4
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d011      	beq.n	800547a <HAL_UART_IRQHandler+0x126>
 8005456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f043 0208 	orr.w	r2, r3, #8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 81ed 	beq.w	800585e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_UART_IRQHandler+0x14e>
 8005490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fd16 	bl	8005ece <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <HAL_UART_IRQHandler+0x17a>
 80054c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d04f      	beq.n	800556e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fc1e 	bl	8005d10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d141      	bne.n	8005566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3314      	adds	r3, #20
 80054e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3314      	adds	r3, #20
 800550a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800550e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800551a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1d9      	bne.n	80054e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	2b00      	cmp	r3, #0
 8005534:	d013      	beq.n	800555e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	4a7d      	ldr	r2, [pc, #500]	; (8005730 <HAL_UART_IRQHandler+0x3dc>)
 800553c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	4618      	mov	r0, r3
 8005544:	f7fd fc06 	bl	8002d54 <HAL_DMA_Abort_IT>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005558:	4610      	mov	r0, r2
 800555a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555c:	e00e      	b.n	800557c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9a4 	bl	80058ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	e00a      	b.n	800557c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9a0 	bl	80058ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	e006      	b.n	800557c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f99c 	bl	80058ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800557a:	e170      	b.n	800585e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	bf00      	nop
    return;
 800557e:	e16e      	b.n	800585e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	2b01      	cmp	r3, #1
 8005586:	f040 814a 	bne.w	800581e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8143 	beq.w	800581e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 813c 	beq.w	800581e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	f040 80b4 	bne.w	8005734 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8140 	beq.w	8005862 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ea:	429a      	cmp	r2, r3
 80055ec:	f080 8139 	bcs.w	8005862 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005602:	f000 8088 	beq.w	8005716 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800561c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800563e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800564a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1d9      	bne.n	8005606 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3314      	adds	r3, #20
 8005658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3314      	adds	r3, #20
 8005672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005676:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800567a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800567e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e1      	bne.n	8005652 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3314      	adds	r3, #20
 8005694:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800569e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3314      	adds	r3, #20
 80056ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e3      	bne.n	800568e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e6:	f023 0310 	bic.w	r3, r3, #16
 80056ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80056fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e3      	bne.n	80056d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	4618      	mov	r0, r3
 8005712:	f7fd faaf 	bl	8002c74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800571e:	b29b      	uxth	r3, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	b29b      	uxth	r3, r3
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fb ffa4 	bl	8001674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800572c:	e099      	b.n	8005862 <HAL_UART_IRQHandler+0x50e>
 800572e:	bf00      	nop
 8005730:	08005dd7 	.word	0x08005dd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800573c:	b29b      	uxth	r3, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 808b 	beq.w	8005866 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8086 	beq.w	8005866 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	330c      	adds	r3, #12
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800577e:	647a      	str	r2, [r7, #68]	; 0x44
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e3      	bne.n	800575a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	623b      	str	r3, [r7, #32]
   return(result);
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3314      	adds	r3, #20
 80057b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057b6:	633a      	str	r2, [r7, #48]	; 0x30
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e3      	bne.n	8005792 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0310 	bic.w	r3, r3, #16
 80057ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057fc:	61fa      	str	r2, [r7, #28]
 80057fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	69b9      	ldr	r1, [r7, #24]
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	617b      	str	r3, [r7, #20]
   return(result);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e3      	bne.n	80057d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fb ff2c 	bl	8001674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800581c:	e023      	b.n	8005866 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <HAL_UART_IRQHandler+0x4ea>
 800582a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fae1 	bl	8005dfe <UART_Transmit_IT>
    return;
 800583c:	e014      	b.n	8005868 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800583e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00e      	beq.n	8005868 <HAL_UART_IRQHandler+0x514>
 800584a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fb21 	bl	8005e9e <UART_EndTransmit_IT>
    return;
 800585c:	e004      	b.n	8005868 <HAL_UART_IRQHandler+0x514>
    return;
 800585e:	bf00      	nop
 8005860:	e002      	b.n	8005868 <HAL_UART_IRQHandler+0x514>
      return;
 8005862:	bf00      	nop
 8005864:	e000      	b.n	8005868 <HAL_UART_IRQHandler+0x514>
      return;
 8005866:	bf00      	nop
  }
}
 8005868:	37e8      	adds	r7, #232	; 0xe8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop

08005870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b09c      	sub	sp, #112	; 0x70
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d172      	bne.n	80059c2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80058dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058de:	2200      	movs	r2, #0
 80058e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80058fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005902:	65ba      	str	r2, [r7, #88]	; 0x58
 8005904:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e5      	bne.n	80058e2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3314      	adds	r3, #20
 800591c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	667b      	str	r3, [r7, #100]	; 0x64
 800592e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3314      	adds	r3, #20
 8005934:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005936:	647a      	str	r2, [r7, #68]	; 0x44
 8005938:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800593c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e5      	bne.n	8005916 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	623b      	str	r3, [r7, #32]
   return(result);
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005960:	663b      	str	r3, [r7, #96]	; 0x60
 8005962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800596a:	633a      	str	r2, [r7, #48]	; 0x30
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e5      	bne.n	800594a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800597e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005980:	2220      	movs	r2, #32
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	2b01      	cmp	r3, #1
 800598c:	d119      	bne.n	80059c2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330c      	adds	r3, #12
 8005994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	60fb      	str	r3, [r7, #12]
   return(result);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f023 0310 	bic.w	r3, r3, #16
 80059a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059ae:	61fa      	str	r2, [r7, #28]
 80059b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	69b9      	ldr	r1, [r7, #24]
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	617b      	str	r3, [r7, #20]
   return(result);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e5      	bne.n	800598e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d106      	bne.n	80059d8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059ce:	4619      	mov	r1, r3
 80059d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059d2:	f7fb fe4f 	bl	8001674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059d6:	e002      	b.n	80059de <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80059d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059da:	f7ff ff53 	bl	8005884 <HAL_UART_RxCpltCallback>
}
 80059de:	bf00      	nop
 80059e0:	3770      	adds	r7, #112	; 0x70
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d108      	bne.n	8005a0e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7fb fe34 	bl	8001674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a0c:	e002      	b.n	8005a14 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7ff ff42 	bl	8005898 <HAL_UART_RxHalfCpltCallback>
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a38:	2b80      	cmp	r3, #128	; 0x80
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b21      	cmp	r3, #33	; 0x21
 8005a4e:	d108      	bne.n	8005a62 <UART_DMAError+0x46>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a5c:	68b8      	ldr	r0, [r7, #8]
 8005a5e:	f000 f92f 	bl	8005cc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b22      	cmp	r3, #34	; 0x22
 8005a82:	d108      	bne.n	8005a96 <UART_DMAError+0x7a>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005a90:	68b8      	ldr	r0, [r7, #8]
 8005a92:	f000 f93d 	bl	8005d10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0210 	orr.w	r2, r3, #16
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aa2:	68b8      	ldr	r0, [r7, #8]
 8005aa4:	f7ff ff02 	bl	80058ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b090      	sub	sp, #64	; 0x40
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac0:	e050      	b.n	8005b64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d04c      	beq.n	8005b64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ad0:	f7fc fe88 	bl	80027e4 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d241      	bcs.n	8005b64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b00:	637a      	str	r2, [r7, #52]	; 0x34
 8005b02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e5      	bne.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3314      	adds	r3, #20
 8005b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	613b      	str	r3, [r7, #16]
   return(result);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3314      	adds	r3, #20
 8005b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b34:	623a      	str	r2, [r7, #32]
 8005b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	69f9      	ldr	r1, [r7, #28]
 8005b3a:	6a3a      	ldr	r2, [r7, #32]
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e5      	bne.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e00f      	b.n	8005b84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d09f      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3740      	adds	r7, #64	; 0x40
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b098      	sub	sp, #96	; 0x60
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2222      	movs	r2, #34	; 0x22
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	4a3e      	ldr	r2, [pc, #248]	; (8005cb4 <UART_Start_Receive_DMA+0x128>)
 8005bba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	4a3d      	ldr	r2, [pc, #244]	; (8005cb8 <UART_Start_Receive_DMA+0x12c>)
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	4a3c      	ldr	r2, [pc, #240]	; (8005cbc <UART_Start_Receive_DMA+0x130>)
 8005bca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005bd4:	f107 0308 	add.w	r3, r7, #8
 8005bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	f7fc ffea 	bl	8002bc4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c24:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c2e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005c30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e5      	bne.n	8005c0e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3314      	adds	r3, #20
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	657b      	str	r3, [r7, #84]	; 0x54
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c62:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3314      	adds	r3, #20
 8005c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	617b      	str	r3, [r7, #20]
   return(result);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3314      	adds	r3, #20
 8005c94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c96:	627a      	str	r2, [r7, #36]	; 0x24
 8005c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6a39      	ldr	r1, [r7, #32]
 8005c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e5      	bne.n	8005c76 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3760      	adds	r7, #96	; 0x60
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	080058c1 	.word	0x080058c1
 8005cb8:	080059e7 	.word	0x080059e7
 8005cbc:	08005a1d 	.word	0x08005a1d

08005cc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b089      	sub	sp, #36	; 0x24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cde:	61fb      	str	r3, [r7, #28]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	61ba      	str	r2, [r7, #24]
 8005cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005d04:	bf00      	nop
 8005d06:	3724      	adds	r7, #36	; 0x24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b095      	sub	sp, #84	; 0x54
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d38:	643a      	str	r2, [r7, #64]	; 0x40
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3314      	adds	r3, #20
 8005d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e5      	bne.n	8005d4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d119      	bne.n	8005dbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f023 0310 	bic.w	r3, r3, #16
 8005d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	330c      	adds	r3, #12
 8005da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005da8:	61ba      	str	r2, [r7, #24]
 8005daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6979      	ldr	r1, [r7, #20]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	613b      	str	r3, [r7, #16]
   return(result);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e5      	bne.n	8005d88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dca:	bf00      	nop
 8005dcc:	3754      	adds	r7, #84	; 0x54
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff fd5b 	bl	80058ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005df6:	bf00      	nop
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b21      	cmp	r3, #33	; 0x21
 8005e10:	d13e      	bne.n	8005e90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	d114      	bne.n	8005e46 <UART_Transmit_IT+0x48>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d110      	bne.n	8005e46 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	1c9a      	adds	r2, r3, #2
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	621a      	str	r2, [r3, #32]
 8005e44:	e008      	b.n	8005e58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6211      	str	r1, [r2, #32]
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	4619      	mov	r1, r3
 8005e66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10f      	bne.n	8005e8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fcd6 	bl	8005870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b08c      	sub	sp, #48	; 0x30
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b22      	cmp	r3, #34	; 0x22
 8005ee0:	f040 80ab 	bne.w	800603a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eec:	d117      	bne.n	8005f1e <UART_Receive_IT+0x50>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d113      	bne.n	8005f1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	1c9a      	adds	r2, r3, #2
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f1c:	e026      	b.n	8005f6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f24:	2300      	movs	r3, #0
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f30:	d007      	beq.n	8005f42 <UART_Receive_IT+0x74>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <UART_Receive_IT+0x82>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	e008      	b.n	8005f62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d15a      	bne.n	8006036 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0220 	bic.w	r2, r2, #32
 8005f8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d135      	bne.n	800602c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f023 0310 	bic.w	r3, r3, #16
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe6:	623a      	str	r2, [r7, #32]
 8005fe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	69f9      	ldr	r1, [r7, #28]
 8005fec:	6a3a      	ldr	r2, [r7, #32]
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b10      	cmp	r3, #16
 8006006:	d10a      	bne.n	800601e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7fb fb25 	bl	8001674 <HAL_UARTEx_RxEventCallback>
 800602a:	e002      	b.n	8006032 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff fc29 	bl	8005884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	e002      	b.n	800603c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3730      	adds	r7, #48	; 0x30
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	b09f      	sub	sp, #124	; 0x7c
 800604a:	af00      	add	r7, sp, #0
 800604c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605a:	68d9      	ldr	r1, [r3, #12]
 800605c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	ea40 0301 	orr.w	r3, r0, r1
 8006064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	431a      	orrs	r2, r3
 8006070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	431a      	orrs	r2, r3
 8006076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	4313      	orrs	r3, r2
 800607c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800607e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006088:	f021 010c 	bic.w	r1, r1, #12
 800608c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006092:	430b      	orrs	r3, r1
 8006094:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a2:	6999      	ldr	r1, [r3, #24]
 80060a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	ea40 0301 	orr.w	r3, r0, r1
 80060ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4bc5      	ldr	r3, [pc, #788]	; (80063c8 <UART_SetConfig+0x384>)
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d004      	beq.n	80060c2 <UART_SetConfig+0x7e>
 80060b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	4bc3      	ldr	r3, [pc, #780]	; (80063cc <UART_SetConfig+0x388>)
 80060be:	429a      	cmp	r2, r3
 80060c0:	d103      	bne.n	80060ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060c2:	f7fe ffef 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 80060c6:	6778      	str	r0, [r7, #116]	; 0x74
 80060c8:	e002      	b.n	80060d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ca:	f7fe ffd7 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 80060ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d8:	f040 80b6 	bne.w	8006248 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060de:	461c      	mov	r4, r3
 80060e0:	f04f 0500 	mov.w	r5, #0
 80060e4:	4622      	mov	r2, r4
 80060e6:	462b      	mov	r3, r5
 80060e8:	1891      	adds	r1, r2, r2
 80060ea:	6439      	str	r1, [r7, #64]	; 0x40
 80060ec:	415b      	adcs	r3, r3
 80060ee:	647b      	str	r3, [r7, #68]	; 0x44
 80060f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060f4:	1912      	adds	r2, r2, r4
 80060f6:	eb45 0303 	adc.w	r3, r5, r3
 80060fa:	f04f 0000 	mov.w	r0, #0
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	00d9      	lsls	r1, r3, #3
 8006104:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006108:	00d0      	lsls	r0, r2, #3
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	1911      	adds	r1, r2, r4
 8006110:	6639      	str	r1, [r7, #96]	; 0x60
 8006112:	416b      	adcs	r3, r5
 8006114:	667b      	str	r3, [r7, #100]	; 0x64
 8006116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	461a      	mov	r2, r3
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	1891      	adds	r1, r2, r2
 8006122:	63b9      	str	r1, [r7, #56]	; 0x38
 8006124:	415b      	adcs	r3, r3
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006128:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800612c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006130:	f7fa fcdc 	bl	8000aec <__aeabi_uldivmod>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4ba5      	ldr	r3, [pc, #660]	; (80063d0 <UART_SetConfig+0x38c>)
 800613a:	fba3 2302 	umull	r2, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	011e      	lsls	r6, r3, #4
 8006142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006144:	461c      	mov	r4, r3
 8006146:	f04f 0500 	mov.w	r5, #0
 800614a:	4622      	mov	r2, r4
 800614c:	462b      	mov	r3, r5
 800614e:	1891      	adds	r1, r2, r2
 8006150:	6339      	str	r1, [r7, #48]	; 0x30
 8006152:	415b      	adcs	r3, r3
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
 8006156:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800615a:	1912      	adds	r2, r2, r4
 800615c:	eb45 0303 	adc.w	r3, r5, r3
 8006160:	f04f 0000 	mov.w	r0, #0
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	00d9      	lsls	r1, r3, #3
 800616a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800616e:	00d0      	lsls	r0, r2, #3
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	1911      	adds	r1, r2, r4
 8006176:	65b9      	str	r1, [r7, #88]	; 0x58
 8006178:	416b      	adcs	r3, r5
 800617a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800617c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	461a      	mov	r2, r3
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	1891      	adds	r1, r2, r2
 8006188:	62b9      	str	r1, [r7, #40]	; 0x28
 800618a:	415b      	adcs	r3, r3
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800618e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006192:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006196:	f7fa fca9 	bl	8000aec <__aeabi_uldivmod>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4b8c      	ldr	r3, [pc, #560]	; (80063d0 <UART_SetConfig+0x38c>)
 80061a0:	fba3 1302 	umull	r1, r3, r3, r2
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	2164      	movs	r1, #100	; 0x64
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	3332      	adds	r3, #50	; 0x32
 80061b2:	4a87      	ldr	r2, [pc, #540]	; (80063d0 <UART_SetConfig+0x38c>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061c0:	441e      	add	r6, r3
 80061c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c4:	4618      	mov	r0, r3
 80061c6:	f04f 0100 	mov.w	r1, #0
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	1894      	adds	r4, r2, r2
 80061d0:	623c      	str	r4, [r7, #32]
 80061d2:	415b      	adcs	r3, r3
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
 80061d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061da:	1812      	adds	r2, r2, r0
 80061dc:	eb41 0303 	adc.w	r3, r1, r3
 80061e0:	f04f 0400 	mov.w	r4, #0
 80061e4:	f04f 0500 	mov.w	r5, #0
 80061e8:	00dd      	lsls	r5, r3, #3
 80061ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061ee:	00d4      	lsls	r4, r2, #3
 80061f0:	4622      	mov	r2, r4
 80061f2:	462b      	mov	r3, r5
 80061f4:	1814      	adds	r4, r2, r0
 80061f6:	653c      	str	r4, [r7, #80]	; 0x50
 80061f8:	414b      	adcs	r3, r1
 80061fa:	657b      	str	r3, [r7, #84]	; 0x54
 80061fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	461a      	mov	r2, r3
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	1891      	adds	r1, r2, r2
 8006208:	61b9      	str	r1, [r7, #24]
 800620a:	415b      	adcs	r3, r3
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006212:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006216:	f7fa fc69 	bl	8000aec <__aeabi_uldivmod>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4b6c      	ldr	r3, [pc, #432]	; (80063d0 <UART_SetConfig+0x38c>)
 8006220:	fba3 1302 	umull	r1, r3, r3, r2
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	2164      	movs	r1, #100	; 0x64
 8006228:	fb01 f303 	mul.w	r3, r1, r3
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	3332      	adds	r3, #50	; 0x32
 8006232:	4a67      	ldr	r2, [pc, #412]	; (80063d0 <UART_SetConfig+0x38c>)
 8006234:	fba2 2303 	umull	r2, r3, r2, r3
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f003 0207 	and.w	r2, r3, #7
 800623e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4432      	add	r2, r6
 8006244:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006246:	e0b9      	b.n	80063bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624a:	461c      	mov	r4, r3
 800624c:	f04f 0500 	mov.w	r5, #0
 8006250:	4622      	mov	r2, r4
 8006252:	462b      	mov	r3, r5
 8006254:	1891      	adds	r1, r2, r2
 8006256:	6139      	str	r1, [r7, #16]
 8006258:	415b      	adcs	r3, r3
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006260:	1912      	adds	r2, r2, r4
 8006262:	eb45 0303 	adc.w	r3, r5, r3
 8006266:	f04f 0000 	mov.w	r0, #0
 800626a:	f04f 0100 	mov.w	r1, #0
 800626e:	00d9      	lsls	r1, r3, #3
 8006270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006274:	00d0      	lsls	r0, r2, #3
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	eb12 0804 	adds.w	r8, r2, r4
 800627e:	eb43 0905 	adc.w	r9, r3, r5
 8006282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4618      	mov	r0, r3
 8006288:	f04f 0100 	mov.w	r1, #0
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	008b      	lsls	r3, r1, #2
 8006296:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800629a:	0082      	lsls	r2, r0, #2
 800629c:	4640      	mov	r0, r8
 800629e:	4649      	mov	r1, r9
 80062a0:	f7fa fc24 	bl	8000aec <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4b49      	ldr	r3, [pc, #292]	; (80063d0 <UART_SetConfig+0x38c>)
 80062aa:	fba3 2302 	umull	r2, r3, r3, r2
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	011e      	lsls	r6, r3, #4
 80062b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b4:	4618      	mov	r0, r3
 80062b6:	f04f 0100 	mov.w	r1, #0
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	1894      	adds	r4, r2, r2
 80062c0:	60bc      	str	r4, [r7, #8]
 80062c2:	415b      	adcs	r3, r3
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062ca:	1812      	adds	r2, r2, r0
 80062cc:	eb41 0303 	adc.w	r3, r1, r3
 80062d0:	f04f 0400 	mov.w	r4, #0
 80062d4:	f04f 0500 	mov.w	r5, #0
 80062d8:	00dd      	lsls	r5, r3, #3
 80062da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062de:	00d4      	lsls	r4, r2, #3
 80062e0:	4622      	mov	r2, r4
 80062e2:	462b      	mov	r3, r5
 80062e4:	1814      	adds	r4, r2, r0
 80062e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80062e8:	414b      	adcs	r3, r1
 80062ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	008b      	lsls	r3, r1, #2
 8006300:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006304:	0082      	lsls	r2, r0, #2
 8006306:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800630a:	f7fa fbef 	bl	8000aec <__aeabi_uldivmod>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4b2f      	ldr	r3, [pc, #188]	; (80063d0 <UART_SetConfig+0x38c>)
 8006314:	fba3 1302 	umull	r1, r3, r3, r2
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	2164      	movs	r1, #100	; 0x64
 800631c:	fb01 f303 	mul.w	r3, r1, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	3332      	adds	r3, #50	; 0x32
 8006326:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <UART_SetConfig+0x38c>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006332:	441e      	add	r6, r3
 8006334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006336:	4618      	mov	r0, r3
 8006338:	f04f 0100 	mov.w	r1, #0
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	1894      	adds	r4, r2, r2
 8006342:	603c      	str	r4, [r7, #0]
 8006344:	415b      	adcs	r3, r3
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634c:	1812      	adds	r2, r2, r0
 800634e:	eb41 0303 	adc.w	r3, r1, r3
 8006352:	f04f 0400 	mov.w	r4, #0
 8006356:	f04f 0500 	mov.w	r5, #0
 800635a:	00dd      	lsls	r5, r3, #3
 800635c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006360:	00d4      	lsls	r4, r2, #3
 8006362:	4622      	mov	r2, r4
 8006364:	462b      	mov	r3, r5
 8006366:	eb12 0a00 	adds.w	sl, r2, r0
 800636a:	eb43 0b01 	adc.w	fp, r3, r1
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	4618      	mov	r0, r3
 8006374:	f04f 0100 	mov.w	r1, #0
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	008b      	lsls	r3, r1, #2
 8006382:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006386:	0082      	lsls	r2, r0, #2
 8006388:	4650      	mov	r0, sl
 800638a:	4659      	mov	r1, fp
 800638c:	f7fa fbae 	bl	8000aec <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <UART_SetConfig+0x38c>)
 8006396:	fba3 1302 	umull	r1, r3, r3, r2
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	2164      	movs	r1, #100	; 0x64
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	3332      	adds	r3, #50	; 0x32
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <UART_SetConfig+0x38c>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	f003 020f 	and.w	r2, r3, #15
 80063b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4432      	add	r2, r6
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	377c      	adds	r7, #124	; 0x7c
 80063c0:	46bd      	mov	sp, r7
 80063c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c6:	bf00      	nop
 80063c8:	40011000 	.word	0x40011000
 80063cc:	40011400 	.word	0x40011400
 80063d0:	51eb851f 	.word	0x51eb851f

080063d4 <__errno>:
 80063d4:	4b01      	ldr	r3, [pc, #4]	; (80063dc <__errno+0x8>)
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	2000000c 	.word	0x2000000c

080063e0 <__libc_init_array>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	4d0d      	ldr	r5, [pc, #52]	; (8006418 <__libc_init_array+0x38>)
 80063e4:	4c0d      	ldr	r4, [pc, #52]	; (800641c <__libc_init_array+0x3c>)
 80063e6:	1b64      	subs	r4, r4, r5
 80063e8:	10a4      	asrs	r4, r4, #2
 80063ea:	2600      	movs	r6, #0
 80063ec:	42a6      	cmp	r6, r4
 80063ee:	d109      	bne.n	8006404 <__libc_init_array+0x24>
 80063f0:	4d0b      	ldr	r5, [pc, #44]	; (8006420 <__libc_init_array+0x40>)
 80063f2:	4c0c      	ldr	r4, [pc, #48]	; (8006424 <__libc_init_array+0x44>)
 80063f4:	f001 fa18 	bl	8007828 <_init>
 80063f8:	1b64      	subs	r4, r4, r5
 80063fa:	10a4      	asrs	r4, r4, #2
 80063fc:	2600      	movs	r6, #0
 80063fe:	42a6      	cmp	r6, r4
 8006400:	d105      	bne.n	800640e <__libc_init_array+0x2e>
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	f855 3b04 	ldr.w	r3, [r5], #4
 8006408:	4798      	blx	r3
 800640a:	3601      	adds	r6, #1
 800640c:	e7ee      	b.n	80063ec <__libc_init_array+0xc>
 800640e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006412:	4798      	blx	r3
 8006414:	3601      	adds	r6, #1
 8006416:	e7f2      	b.n	80063fe <__libc_init_array+0x1e>
 8006418:	08007e68 	.word	0x08007e68
 800641c:	08007e68 	.word	0x08007e68
 8006420:	08007e68 	.word	0x08007e68
 8006424:	08007e6c 	.word	0x08007e6c

08006428 <memset>:
 8006428:	4402      	add	r2, r0
 800642a:	4603      	mov	r3, r0
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <memset+0xa>
 8006430:	4770      	bx	lr
 8006432:	f803 1b01 	strb.w	r1, [r3], #1
 8006436:	e7f9      	b.n	800642c <memset+0x4>

08006438 <siprintf>:
 8006438:	b40e      	push	{r1, r2, r3}
 800643a:	b500      	push	{lr}
 800643c:	b09c      	sub	sp, #112	; 0x70
 800643e:	ab1d      	add	r3, sp, #116	; 0x74
 8006440:	9002      	str	r0, [sp, #8]
 8006442:	9006      	str	r0, [sp, #24]
 8006444:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006448:	4809      	ldr	r0, [pc, #36]	; (8006470 <siprintf+0x38>)
 800644a:	9107      	str	r1, [sp, #28]
 800644c:	9104      	str	r1, [sp, #16]
 800644e:	4909      	ldr	r1, [pc, #36]	; (8006474 <siprintf+0x3c>)
 8006450:	f853 2b04 	ldr.w	r2, [r3], #4
 8006454:	9105      	str	r1, [sp, #20]
 8006456:	6800      	ldr	r0, [r0, #0]
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	a902      	add	r1, sp, #8
 800645c:	f000 f9ae 	bl	80067bc <_svfiprintf_r>
 8006460:	9b02      	ldr	r3, [sp, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	b01c      	add	sp, #112	; 0x70
 8006468:	f85d eb04 	ldr.w	lr, [sp], #4
 800646c:	b003      	add	sp, #12
 800646e:	4770      	bx	lr
 8006470:	2000000c 	.word	0x2000000c
 8006474:	ffff0208 	.word	0xffff0208

08006478 <strcpy>:
 8006478:	4603      	mov	r3, r0
 800647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647e:	f803 2b01 	strb.w	r2, [r3], #1
 8006482:	2a00      	cmp	r2, #0
 8006484:	d1f9      	bne.n	800647a <strcpy+0x2>
 8006486:	4770      	bx	lr

08006488 <strtok>:
 8006488:	4b16      	ldr	r3, [pc, #88]	; (80064e4 <strtok+0x5c>)
 800648a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800648c:	681e      	ldr	r6, [r3, #0]
 800648e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006490:	4605      	mov	r5, r0
 8006492:	b9fc      	cbnz	r4, 80064d4 <strtok+0x4c>
 8006494:	2050      	movs	r0, #80	; 0x50
 8006496:	9101      	str	r1, [sp, #4]
 8006498:	f000 f882 	bl	80065a0 <malloc>
 800649c:	9901      	ldr	r1, [sp, #4]
 800649e:	65b0      	str	r0, [r6, #88]	; 0x58
 80064a0:	4602      	mov	r2, r0
 80064a2:	b920      	cbnz	r0, 80064ae <strtok+0x26>
 80064a4:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <strtok+0x60>)
 80064a6:	4811      	ldr	r0, [pc, #68]	; (80064ec <strtok+0x64>)
 80064a8:	2157      	movs	r1, #87	; 0x57
 80064aa:	f000 f849 	bl	8006540 <__assert_func>
 80064ae:	e9c0 4400 	strd	r4, r4, [r0]
 80064b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80064b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80064ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80064be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80064c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80064c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80064ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80064ce:	6184      	str	r4, [r0, #24]
 80064d0:	7704      	strb	r4, [r0, #28]
 80064d2:	6244      	str	r4, [r0, #36]	; 0x24
 80064d4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80064d6:	2301      	movs	r3, #1
 80064d8:	4628      	mov	r0, r5
 80064da:	b002      	add	sp, #8
 80064dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064e0:	f000 b806 	b.w	80064f0 <__strtok_r>
 80064e4:	2000000c 	.word	0x2000000c
 80064e8:	08007d18 	.word	0x08007d18
 80064ec:	08007d2f 	.word	0x08007d2f

080064f0 <__strtok_r>:
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	b908      	cbnz	r0, 80064f8 <__strtok_r+0x8>
 80064f4:	6810      	ldr	r0, [r2, #0]
 80064f6:	b188      	cbz	r0, 800651c <__strtok_r+0x2c>
 80064f8:	4604      	mov	r4, r0
 80064fa:	4620      	mov	r0, r4
 80064fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006500:	460f      	mov	r7, r1
 8006502:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006506:	b91e      	cbnz	r6, 8006510 <__strtok_r+0x20>
 8006508:	b965      	cbnz	r5, 8006524 <__strtok_r+0x34>
 800650a:	6015      	str	r5, [r2, #0]
 800650c:	4628      	mov	r0, r5
 800650e:	e005      	b.n	800651c <__strtok_r+0x2c>
 8006510:	42b5      	cmp	r5, r6
 8006512:	d1f6      	bne.n	8006502 <__strtok_r+0x12>
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f0      	bne.n	80064fa <__strtok_r+0xa>
 8006518:	6014      	str	r4, [r2, #0]
 800651a:	7003      	strb	r3, [r0, #0]
 800651c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800651e:	461c      	mov	r4, r3
 8006520:	e00c      	b.n	800653c <__strtok_r+0x4c>
 8006522:	b915      	cbnz	r5, 800652a <__strtok_r+0x3a>
 8006524:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006528:	460e      	mov	r6, r1
 800652a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800652e:	42ab      	cmp	r3, r5
 8006530:	d1f7      	bne.n	8006522 <__strtok_r+0x32>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f3      	beq.n	800651e <__strtok_r+0x2e>
 8006536:	2300      	movs	r3, #0
 8006538:	f804 3c01 	strb.w	r3, [r4, #-1]
 800653c:	6014      	str	r4, [r2, #0]
 800653e:	e7ed      	b.n	800651c <__strtok_r+0x2c>

08006540 <__assert_func>:
 8006540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006542:	4614      	mov	r4, r2
 8006544:	461a      	mov	r2, r3
 8006546:	4b09      	ldr	r3, [pc, #36]	; (800656c <__assert_func+0x2c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4605      	mov	r5, r0
 800654c:	68d8      	ldr	r0, [r3, #12]
 800654e:	b14c      	cbz	r4, 8006564 <__assert_func+0x24>
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <__assert_func+0x30>)
 8006552:	9100      	str	r1, [sp, #0]
 8006554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006558:	4906      	ldr	r1, [pc, #24]	; (8006574 <__assert_func+0x34>)
 800655a:	462b      	mov	r3, r5
 800655c:	f000 f80e 	bl	800657c <fiprintf>
 8006560:	f000 fdea 	bl	8007138 <abort>
 8006564:	4b04      	ldr	r3, [pc, #16]	; (8006578 <__assert_func+0x38>)
 8006566:	461c      	mov	r4, r3
 8006568:	e7f3      	b.n	8006552 <__assert_func+0x12>
 800656a:	bf00      	nop
 800656c:	2000000c 	.word	0x2000000c
 8006570:	08007d90 	.word	0x08007d90
 8006574:	08007d9d 	.word	0x08007d9d
 8006578:	08007dcb 	.word	0x08007dcb

0800657c <fiprintf>:
 800657c:	b40e      	push	{r1, r2, r3}
 800657e:	b503      	push	{r0, r1, lr}
 8006580:	4601      	mov	r1, r0
 8006582:	ab03      	add	r3, sp, #12
 8006584:	4805      	ldr	r0, [pc, #20]	; (800659c <fiprintf+0x20>)
 8006586:	f853 2b04 	ldr.w	r2, [r3], #4
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	f000 fa3f 	bl	8006a10 <_vfiprintf_r>
 8006592:	b002      	add	sp, #8
 8006594:	f85d eb04 	ldr.w	lr, [sp], #4
 8006598:	b003      	add	sp, #12
 800659a:	4770      	bx	lr
 800659c:	2000000c 	.word	0x2000000c

080065a0 <malloc>:
 80065a0:	4b02      	ldr	r3, [pc, #8]	; (80065ac <malloc+0xc>)
 80065a2:	4601      	mov	r1, r0
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	f000 b853 	b.w	8006650 <_malloc_r>
 80065aa:	bf00      	nop
 80065ac:	2000000c 	.word	0x2000000c

080065b0 <_free_r>:
 80065b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065b2:	2900      	cmp	r1, #0
 80065b4:	d048      	beq.n	8006648 <_free_r+0x98>
 80065b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ba:	9001      	str	r0, [sp, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f1a1 0404 	sub.w	r4, r1, #4
 80065c2:	bfb8      	it	lt
 80065c4:	18e4      	addlt	r4, r4, r3
 80065c6:	f001 f805 	bl	80075d4 <__malloc_lock>
 80065ca:	4a20      	ldr	r2, [pc, #128]	; (800664c <_free_r+0x9c>)
 80065cc:	9801      	ldr	r0, [sp, #4]
 80065ce:	6813      	ldr	r3, [r2, #0]
 80065d0:	4615      	mov	r5, r2
 80065d2:	b933      	cbnz	r3, 80065e2 <_free_r+0x32>
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	6014      	str	r4, [r2, #0]
 80065d8:	b003      	add	sp, #12
 80065da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065de:	f000 bfff 	b.w	80075e0 <__malloc_unlock>
 80065e2:	42a3      	cmp	r3, r4
 80065e4:	d90b      	bls.n	80065fe <_free_r+0x4e>
 80065e6:	6821      	ldr	r1, [r4, #0]
 80065e8:	1862      	adds	r2, r4, r1
 80065ea:	4293      	cmp	r3, r2
 80065ec:	bf04      	itt	eq
 80065ee:	681a      	ldreq	r2, [r3, #0]
 80065f0:	685b      	ldreq	r3, [r3, #4]
 80065f2:	6063      	str	r3, [r4, #4]
 80065f4:	bf04      	itt	eq
 80065f6:	1852      	addeq	r2, r2, r1
 80065f8:	6022      	streq	r2, [r4, #0]
 80065fa:	602c      	str	r4, [r5, #0]
 80065fc:	e7ec      	b.n	80065d8 <_free_r+0x28>
 80065fe:	461a      	mov	r2, r3
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	b10b      	cbz	r3, 8006608 <_free_r+0x58>
 8006604:	42a3      	cmp	r3, r4
 8006606:	d9fa      	bls.n	80065fe <_free_r+0x4e>
 8006608:	6811      	ldr	r1, [r2, #0]
 800660a:	1855      	adds	r5, r2, r1
 800660c:	42a5      	cmp	r5, r4
 800660e:	d10b      	bne.n	8006628 <_free_r+0x78>
 8006610:	6824      	ldr	r4, [r4, #0]
 8006612:	4421      	add	r1, r4
 8006614:	1854      	adds	r4, r2, r1
 8006616:	42a3      	cmp	r3, r4
 8006618:	6011      	str	r1, [r2, #0]
 800661a:	d1dd      	bne.n	80065d8 <_free_r+0x28>
 800661c:	681c      	ldr	r4, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	6053      	str	r3, [r2, #4]
 8006622:	4421      	add	r1, r4
 8006624:	6011      	str	r1, [r2, #0]
 8006626:	e7d7      	b.n	80065d8 <_free_r+0x28>
 8006628:	d902      	bls.n	8006630 <_free_r+0x80>
 800662a:	230c      	movs	r3, #12
 800662c:	6003      	str	r3, [r0, #0]
 800662e:	e7d3      	b.n	80065d8 <_free_r+0x28>
 8006630:	6825      	ldr	r5, [r4, #0]
 8006632:	1961      	adds	r1, r4, r5
 8006634:	428b      	cmp	r3, r1
 8006636:	bf04      	itt	eq
 8006638:	6819      	ldreq	r1, [r3, #0]
 800663a:	685b      	ldreq	r3, [r3, #4]
 800663c:	6063      	str	r3, [r4, #4]
 800663e:	bf04      	itt	eq
 8006640:	1949      	addeq	r1, r1, r5
 8006642:	6021      	streq	r1, [r4, #0]
 8006644:	6054      	str	r4, [r2, #4]
 8006646:	e7c7      	b.n	80065d8 <_free_r+0x28>
 8006648:	b003      	add	sp, #12
 800664a:	bd30      	pop	{r4, r5, pc}
 800664c:	20000090 	.word	0x20000090

08006650 <_malloc_r>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	1ccd      	adds	r5, r1, #3
 8006654:	f025 0503 	bic.w	r5, r5, #3
 8006658:	3508      	adds	r5, #8
 800665a:	2d0c      	cmp	r5, #12
 800665c:	bf38      	it	cc
 800665e:	250c      	movcc	r5, #12
 8006660:	2d00      	cmp	r5, #0
 8006662:	4606      	mov	r6, r0
 8006664:	db01      	blt.n	800666a <_malloc_r+0x1a>
 8006666:	42a9      	cmp	r1, r5
 8006668:	d903      	bls.n	8006672 <_malloc_r+0x22>
 800666a:	230c      	movs	r3, #12
 800666c:	6033      	str	r3, [r6, #0]
 800666e:	2000      	movs	r0, #0
 8006670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006672:	f000 ffaf 	bl	80075d4 <__malloc_lock>
 8006676:	4921      	ldr	r1, [pc, #132]	; (80066fc <_malloc_r+0xac>)
 8006678:	680a      	ldr	r2, [r1, #0]
 800667a:	4614      	mov	r4, r2
 800667c:	b99c      	cbnz	r4, 80066a6 <_malloc_r+0x56>
 800667e:	4f20      	ldr	r7, [pc, #128]	; (8006700 <_malloc_r+0xb0>)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	b923      	cbnz	r3, 800668e <_malloc_r+0x3e>
 8006684:	4621      	mov	r1, r4
 8006686:	4630      	mov	r0, r6
 8006688:	f000 fc86 	bl	8006f98 <_sbrk_r>
 800668c:	6038      	str	r0, [r7, #0]
 800668e:	4629      	mov	r1, r5
 8006690:	4630      	mov	r0, r6
 8006692:	f000 fc81 	bl	8006f98 <_sbrk_r>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d123      	bne.n	80066e2 <_malloc_r+0x92>
 800669a:	230c      	movs	r3, #12
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	4630      	mov	r0, r6
 80066a0:	f000 ff9e 	bl	80075e0 <__malloc_unlock>
 80066a4:	e7e3      	b.n	800666e <_malloc_r+0x1e>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	1b5b      	subs	r3, r3, r5
 80066aa:	d417      	bmi.n	80066dc <_malloc_r+0x8c>
 80066ac:	2b0b      	cmp	r3, #11
 80066ae:	d903      	bls.n	80066b8 <_malloc_r+0x68>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	441c      	add	r4, r3
 80066b4:	6025      	str	r5, [r4, #0]
 80066b6:	e004      	b.n	80066c2 <_malloc_r+0x72>
 80066b8:	6863      	ldr	r3, [r4, #4]
 80066ba:	42a2      	cmp	r2, r4
 80066bc:	bf0c      	ite	eq
 80066be:	600b      	streq	r3, [r1, #0]
 80066c0:	6053      	strne	r3, [r2, #4]
 80066c2:	4630      	mov	r0, r6
 80066c4:	f000 ff8c 	bl	80075e0 <__malloc_unlock>
 80066c8:	f104 000b 	add.w	r0, r4, #11
 80066cc:	1d23      	adds	r3, r4, #4
 80066ce:	f020 0007 	bic.w	r0, r0, #7
 80066d2:	1ac2      	subs	r2, r0, r3
 80066d4:	d0cc      	beq.n	8006670 <_malloc_r+0x20>
 80066d6:	1a1b      	subs	r3, r3, r0
 80066d8:	50a3      	str	r3, [r4, r2]
 80066da:	e7c9      	b.n	8006670 <_malloc_r+0x20>
 80066dc:	4622      	mov	r2, r4
 80066de:	6864      	ldr	r4, [r4, #4]
 80066e0:	e7cc      	b.n	800667c <_malloc_r+0x2c>
 80066e2:	1cc4      	adds	r4, r0, #3
 80066e4:	f024 0403 	bic.w	r4, r4, #3
 80066e8:	42a0      	cmp	r0, r4
 80066ea:	d0e3      	beq.n	80066b4 <_malloc_r+0x64>
 80066ec:	1a21      	subs	r1, r4, r0
 80066ee:	4630      	mov	r0, r6
 80066f0:	f000 fc52 	bl	8006f98 <_sbrk_r>
 80066f4:	3001      	adds	r0, #1
 80066f6:	d1dd      	bne.n	80066b4 <_malloc_r+0x64>
 80066f8:	e7cf      	b.n	800669a <_malloc_r+0x4a>
 80066fa:	bf00      	nop
 80066fc:	20000090 	.word	0x20000090
 8006700:	20000094 	.word	0x20000094

08006704 <__ssputs_r>:
 8006704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006708:	688e      	ldr	r6, [r1, #8]
 800670a:	429e      	cmp	r6, r3
 800670c:	4682      	mov	sl, r0
 800670e:	460c      	mov	r4, r1
 8006710:	4690      	mov	r8, r2
 8006712:	461f      	mov	r7, r3
 8006714:	d838      	bhi.n	8006788 <__ssputs_r+0x84>
 8006716:	898a      	ldrh	r2, [r1, #12]
 8006718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800671c:	d032      	beq.n	8006784 <__ssputs_r+0x80>
 800671e:	6825      	ldr	r5, [r4, #0]
 8006720:	6909      	ldr	r1, [r1, #16]
 8006722:	eba5 0901 	sub.w	r9, r5, r1
 8006726:	6965      	ldr	r5, [r4, #20]
 8006728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800672c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006730:	3301      	adds	r3, #1
 8006732:	444b      	add	r3, r9
 8006734:	106d      	asrs	r5, r5, #1
 8006736:	429d      	cmp	r5, r3
 8006738:	bf38      	it	cc
 800673a:	461d      	movcc	r5, r3
 800673c:	0553      	lsls	r3, r2, #21
 800673e:	d531      	bpl.n	80067a4 <__ssputs_r+0xa0>
 8006740:	4629      	mov	r1, r5
 8006742:	f7ff ff85 	bl	8006650 <_malloc_r>
 8006746:	4606      	mov	r6, r0
 8006748:	b950      	cbnz	r0, 8006760 <__ssputs_r+0x5c>
 800674a:	230c      	movs	r3, #12
 800674c:	f8ca 3000 	str.w	r3, [sl]
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	f04f 30ff 	mov.w	r0, #4294967295
 800675c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006760:	6921      	ldr	r1, [r4, #16]
 8006762:	464a      	mov	r2, r9
 8006764:	f000 ff0e 	bl	8007584 <memcpy>
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800676e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	6126      	str	r6, [r4, #16]
 8006776:	6165      	str	r5, [r4, #20]
 8006778:	444e      	add	r6, r9
 800677a:	eba5 0509 	sub.w	r5, r5, r9
 800677e:	6026      	str	r6, [r4, #0]
 8006780:	60a5      	str	r5, [r4, #8]
 8006782:	463e      	mov	r6, r7
 8006784:	42be      	cmp	r6, r7
 8006786:	d900      	bls.n	800678a <__ssputs_r+0x86>
 8006788:	463e      	mov	r6, r7
 800678a:	4632      	mov	r2, r6
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	4641      	mov	r1, r8
 8006790:	f000 ff06 	bl	80075a0 <memmove>
 8006794:	68a3      	ldr	r3, [r4, #8]
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	1b9b      	subs	r3, r3, r6
 800679a:	4432      	add	r2, r6
 800679c:	60a3      	str	r3, [r4, #8]
 800679e:	6022      	str	r2, [r4, #0]
 80067a0:	2000      	movs	r0, #0
 80067a2:	e7db      	b.n	800675c <__ssputs_r+0x58>
 80067a4:	462a      	mov	r2, r5
 80067a6:	f000 ff21 	bl	80075ec <_realloc_r>
 80067aa:	4606      	mov	r6, r0
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d1e1      	bne.n	8006774 <__ssputs_r+0x70>
 80067b0:	6921      	ldr	r1, [r4, #16]
 80067b2:	4650      	mov	r0, sl
 80067b4:	f7ff fefc 	bl	80065b0 <_free_r>
 80067b8:	e7c7      	b.n	800674a <__ssputs_r+0x46>
	...

080067bc <_svfiprintf_r>:
 80067bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c0:	4698      	mov	r8, r3
 80067c2:	898b      	ldrh	r3, [r1, #12]
 80067c4:	061b      	lsls	r3, r3, #24
 80067c6:	b09d      	sub	sp, #116	; 0x74
 80067c8:	4607      	mov	r7, r0
 80067ca:	460d      	mov	r5, r1
 80067cc:	4614      	mov	r4, r2
 80067ce:	d50e      	bpl.n	80067ee <_svfiprintf_r+0x32>
 80067d0:	690b      	ldr	r3, [r1, #16]
 80067d2:	b963      	cbnz	r3, 80067ee <_svfiprintf_r+0x32>
 80067d4:	2140      	movs	r1, #64	; 0x40
 80067d6:	f7ff ff3b 	bl	8006650 <_malloc_r>
 80067da:	6028      	str	r0, [r5, #0]
 80067dc:	6128      	str	r0, [r5, #16]
 80067de:	b920      	cbnz	r0, 80067ea <_svfiprintf_r+0x2e>
 80067e0:	230c      	movs	r3, #12
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	e0d1      	b.n	800698e <_svfiprintf_r+0x1d2>
 80067ea:	2340      	movs	r3, #64	; 0x40
 80067ec:	616b      	str	r3, [r5, #20]
 80067ee:	2300      	movs	r3, #0
 80067f0:	9309      	str	r3, [sp, #36]	; 0x24
 80067f2:	2320      	movs	r3, #32
 80067f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80067fc:	2330      	movs	r3, #48	; 0x30
 80067fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069a8 <_svfiprintf_r+0x1ec>
 8006802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006806:	f04f 0901 	mov.w	r9, #1
 800680a:	4623      	mov	r3, r4
 800680c:	469a      	mov	sl, r3
 800680e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006812:	b10a      	cbz	r2, 8006818 <_svfiprintf_r+0x5c>
 8006814:	2a25      	cmp	r2, #37	; 0x25
 8006816:	d1f9      	bne.n	800680c <_svfiprintf_r+0x50>
 8006818:	ebba 0b04 	subs.w	fp, sl, r4
 800681c:	d00b      	beq.n	8006836 <_svfiprintf_r+0x7a>
 800681e:	465b      	mov	r3, fp
 8006820:	4622      	mov	r2, r4
 8006822:	4629      	mov	r1, r5
 8006824:	4638      	mov	r0, r7
 8006826:	f7ff ff6d 	bl	8006704 <__ssputs_r>
 800682a:	3001      	adds	r0, #1
 800682c:	f000 80aa 	beq.w	8006984 <_svfiprintf_r+0x1c8>
 8006830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006832:	445a      	add	r2, fp
 8006834:	9209      	str	r2, [sp, #36]	; 0x24
 8006836:	f89a 3000 	ldrb.w	r3, [sl]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80a2 	beq.w	8006984 <_svfiprintf_r+0x1c8>
 8006840:	2300      	movs	r3, #0
 8006842:	f04f 32ff 	mov.w	r2, #4294967295
 8006846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800684a:	f10a 0a01 	add.w	sl, sl, #1
 800684e:	9304      	str	r3, [sp, #16]
 8006850:	9307      	str	r3, [sp, #28]
 8006852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006856:	931a      	str	r3, [sp, #104]	; 0x68
 8006858:	4654      	mov	r4, sl
 800685a:	2205      	movs	r2, #5
 800685c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006860:	4851      	ldr	r0, [pc, #324]	; (80069a8 <_svfiprintf_r+0x1ec>)
 8006862:	f7f9 fcd5 	bl	8000210 <memchr>
 8006866:	9a04      	ldr	r2, [sp, #16]
 8006868:	b9d8      	cbnz	r0, 80068a2 <_svfiprintf_r+0xe6>
 800686a:	06d0      	lsls	r0, r2, #27
 800686c:	bf44      	itt	mi
 800686e:	2320      	movmi	r3, #32
 8006870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006874:	0711      	lsls	r1, r2, #28
 8006876:	bf44      	itt	mi
 8006878:	232b      	movmi	r3, #43	; 0x2b
 800687a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800687e:	f89a 3000 	ldrb.w	r3, [sl]
 8006882:	2b2a      	cmp	r3, #42	; 0x2a
 8006884:	d015      	beq.n	80068b2 <_svfiprintf_r+0xf6>
 8006886:	9a07      	ldr	r2, [sp, #28]
 8006888:	4654      	mov	r4, sl
 800688a:	2000      	movs	r0, #0
 800688c:	f04f 0c0a 	mov.w	ip, #10
 8006890:	4621      	mov	r1, r4
 8006892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006896:	3b30      	subs	r3, #48	; 0x30
 8006898:	2b09      	cmp	r3, #9
 800689a:	d94e      	bls.n	800693a <_svfiprintf_r+0x17e>
 800689c:	b1b0      	cbz	r0, 80068cc <_svfiprintf_r+0x110>
 800689e:	9207      	str	r2, [sp, #28]
 80068a0:	e014      	b.n	80068cc <_svfiprintf_r+0x110>
 80068a2:	eba0 0308 	sub.w	r3, r0, r8
 80068a6:	fa09 f303 	lsl.w	r3, r9, r3
 80068aa:	4313      	orrs	r3, r2
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	46a2      	mov	sl, r4
 80068b0:	e7d2      	b.n	8006858 <_svfiprintf_r+0x9c>
 80068b2:	9b03      	ldr	r3, [sp, #12]
 80068b4:	1d19      	adds	r1, r3, #4
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	9103      	str	r1, [sp, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bfbb      	ittet	lt
 80068be:	425b      	neglt	r3, r3
 80068c0:	f042 0202 	orrlt.w	r2, r2, #2
 80068c4:	9307      	strge	r3, [sp, #28]
 80068c6:	9307      	strlt	r3, [sp, #28]
 80068c8:	bfb8      	it	lt
 80068ca:	9204      	strlt	r2, [sp, #16]
 80068cc:	7823      	ldrb	r3, [r4, #0]
 80068ce:	2b2e      	cmp	r3, #46	; 0x2e
 80068d0:	d10c      	bne.n	80068ec <_svfiprintf_r+0x130>
 80068d2:	7863      	ldrb	r3, [r4, #1]
 80068d4:	2b2a      	cmp	r3, #42	; 0x2a
 80068d6:	d135      	bne.n	8006944 <_svfiprintf_r+0x188>
 80068d8:	9b03      	ldr	r3, [sp, #12]
 80068da:	1d1a      	adds	r2, r3, #4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	9203      	str	r2, [sp, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	bfb8      	it	lt
 80068e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80068e8:	3402      	adds	r4, #2
 80068ea:	9305      	str	r3, [sp, #20]
 80068ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069b8 <_svfiprintf_r+0x1fc>
 80068f0:	7821      	ldrb	r1, [r4, #0]
 80068f2:	2203      	movs	r2, #3
 80068f4:	4650      	mov	r0, sl
 80068f6:	f7f9 fc8b 	bl	8000210 <memchr>
 80068fa:	b140      	cbz	r0, 800690e <_svfiprintf_r+0x152>
 80068fc:	2340      	movs	r3, #64	; 0x40
 80068fe:	eba0 000a 	sub.w	r0, r0, sl
 8006902:	fa03 f000 	lsl.w	r0, r3, r0
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	4303      	orrs	r3, r0
 800690a:	3401      	adds	r4, #1
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006912:	4826      	ldr	r0, [pc, #152]	; (80069ac <_svfiprintf_r+0x1f0>)
 8006914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006918:	2206      	movs	r2, #6
 800691a:	f7f9 fc79 	bl	8000210 <memchr>
 800691e:	2800      	cmp	r0, #0
 8006920:	d038      	beq.n	8006994 <_svfiprintf_r+0x1d8>
 8006922:	4b23      	ldr	r3, [pc, #140]	; (80069b0 <_svfiprintf_r+0x1f4>)
 8006924:	bb1b      	cbnz	r3, 800696e <_svfiprintf_r+0x1b2>
 8006926:	9b03      	ldr	r3, [sp, #12]
 8006928:	3307      	adds	r3, #7
 800692a:	f023 0307 	bic.w	r3, r3, #7
 800692e:	3308      	adds	r3, #8
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006934:	4433      	add	r3, r6
 8006936:	9309      	str	r3, [sp, #36]	; 0x24
 8006938:	e767      	b.n	800680a <_svfiprintf_r+0x4e>
 800693a:	fb0c 3202 	mla	r2, ip, r2, r3
 800693e:	460c      	mov	r4, r1
 8006940:	2001      	movs	r0, #1
 8006942:	e7a5      	b.n	8006890 <_svfiprintf_r+0xd4>
 8006944:	2300      	movs	r3, #0
 8006946:	3401      	adds	r4, #1
 8006948:	9305      	str	r3, [sp, #20]
 800694a:	4619      	mov	r1, r3
 800694c:	f04f 0c0a 	mov.w	ip, #10
 8006950:	4620      	mov	r0, r4
 8006952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006956:	3a30      	subs	r2, #48	; 0x30
 8006958:	2a09      	cmp	r2, #9
 800695a:	d903      	bls.n	8006964 <_svfiprintf_r+0x1a8>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0c5      	beq.n	80068ec <_svfiprintf_r+0x130>
 8006960:	9105      	str	r1, [sp, #20]
 8006962:	e7c3      	b.n	80068ec <_svfiprintf_r+0x130>
 8006964:	fb0c 2101 	mla	r1, ip, r1, r2
 8006968:	4604      	mov	r4, r0
 800696a:	2301      	movs	r3, #1
 800696c:	e7f0      	b.n	8006950 <_svfiprintf_r+0x194>
 800696e:	ab03      	add	r3, sp, #12
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	462a      	mov	r2, r5
 8006974:	4b0f      	ldr	r3, [pc, #60]	; (80069b4 <_svfiprintf_r+0x1f8>)
 8006976:	a904      	add	r1, sp, #16
 8006978:	4638      	mov	r0, r7
 800697a:	f3af 8000 	nop.w
 800697e:	1c42      	adds	r2, r0, #1
 8006980:	4606      	mov	r6, r0
 8006982:	d1d6      	bne.n	8006932 <_svfiprintf_r+0x176>
 8006984:	89ab      	ldrh	r3, [r5, #12]
 8006986:	065b      	lsls	r3, r3, #25
 8006988:	f53f af2c 	bmi.w	80067e4 <_svfiprintf_r+0x28>
 800698c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800698e:	b01d      	add	sp, #116	; 0x74
 8006990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006994:	ab03      	add	r3, sp, #12
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	462a      	mov	r2, r5
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <_svfiprintf_r+0x1f8>)
 800699c:	a904      	add	r1, sp, #16
 800699e:	4638      	mov	r0, r7
 80069a0:	f000 f9d4 	bl	8006d4c <_printf_i>
 80069a4:	e7eb      	b.n	800697e <_svfiprintf_r+0x1c2>
 80069a6:	bf00      	nop
 80069a8:	08007dcc 	.word	0x08007dcc
 80069ac:	08007dd6 	.word	0x08007dd6
 80069b0:	00000000 	.word	0x00000000
 80069b4:	08006705 	.word	0x08006705
 80069b8:	08007dd2 	.word	0x08007dd2

080069bc <__sfputc_r>:
 80069bc:	6893      	ldr	r3, [r2, #8]
 80069be:	3b01      	subs	r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	b410      	push	{r4}
 80069c4:	6093      	str	r3, [r2, #8]
 80069c6:	da08      	bge.n	80069da <__sfputc_r+0x1e>
 80069c8:	6994      	ldr	r4, [r2, #24]
 80069ca:	42a3      	cmp	r3, r4
 80069cc:	db01      	blt.n	80069d2 <__sfputc_r+0x16>
 80069ce:	290a      	cmp	r1, #10
 80069d0:	d103      	bne.n	80069da <__sfputc_r+0x1e>
 80069d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069d6:	f000 baef 	b.w	8006fb8 <__swbuf_r>
 80069da:	6813      	ldr	r3, [r2, #0]
 80069dc:	1c58      	adds	r0, r3, #1
 80069de:	6010      	str	r0, [r2, #0]
 80069e0:	7019      	strb	r1, [r3, #0]
 80069e2:	4608      	mov	r0, r1
 80069e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <__sfputs_r>:
 80069ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ec:	4606      	mov	r6, r0
 80069ee:	460f      	mov	r7, r1
 80069f0:	4614      	mov	r4, r2
 80069f2:	18d5      	adds	r5, r2, r3
 80069f4:	42ac      	cmp	r4, r5
 80069f6:	d101      	bne.n	80069fc <__sfputs_r+0x12>
 80069f8:	2000      	movs	r0, #0
 80069fa:	e007      	b.n	8006a0c <__sfputs_r+0x22>
 80069fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a00:	463a      	mov	r2, r7
 8006a02:	4630      	mov	r0, r6
 8006a04:	f7ff ffda 	bl	80069bc <__sfputc_r>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d1f3      	bne.n	80069f4 <__sfputs_r+0xa>
 8006a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a10 <_vfiprintf_r>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	460d      	mov	r5, r1
 8006a16:	b09d      	sub	sp, #116	; 0x74
 8006a18:	4614      	mov	r4, r2
 8006a1a:	4698      	mov	r8, r3
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	b118      	cbz	r0, 8006a28 <_vfiprintf_r+0x18>
 8006a20:	6983      	ldr	r3, [r0, #24]
 8006a22:	b90b      	cbnz	r3, 8006a28 <_vfiprintf_r+0x18>
 8006a24:	f000 fcaa 	bl	800737c <__sinit>
 8006a28:	4b89      	ldr	r3, [pc, #548]	; (8006c50 <_vfiprintf_r+0x240>)
 8006a2a:	429d      	cmp	r5, r3
 8006a2c:	d11b      	bne.n	8006a66 <_vfiprintf_r+0x56>
 8006a2e:	6875      	ldr	r5, [r6, #4]
 8006a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a32:	07d9      	lsls	r1, r3, #31
 8006a34:	d405      	bmi.n	8006a42 <_vfiprintf_r+0x32>
 8006a36:	89ab      	ldrh	r3, [r5, #12]
 8006a38:	059a      	lsls	r2, r3, #22
 8006a3a:	d402      	bmi.n	8006a42 <_vfiprintf_r+0x32>
 8006a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a3e:	f000 fd3b 	bl	80074b8 <__retarget_lock_acquire_recursive>
 8006a42:	89ab      	ldrh	r3, [r5, #12]
 8006a44:	071b      	lsls	r3, r3, #28
 8006a46:	d501      	bpl.n	8006a4c <_vfiprintf_r+0x3c>
 8006a48:	692b      	ldr	r3, [r5, #16]
 8006a4a:	b9eb      	cbnz	r3, 8006a88 <_vfiprintf_r+0x78>
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f000 fb04 	bl	800705c <__swsetup_r>
 8006a54:	b1c0      	cbz	r0, 8006a88 <_vfiprintf_r+0x78>
 8006a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a58:	07dc      	lsls	r4, r3, #31
 8006a5a:	d50e      	bpl.n	8006a7a <_vfiprintf_r+0x6a>
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	b01d      	add	sp, #116	; 0x74
 8006a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a66:	4b7b      	ldr	r3, [pc, #492]	; (8006c54 <_vfiprintf_r+0x244>)
 8006a68:	429d      	cmp	r5, r3
 8006a6a:	d101      	bne.n	8006a70 <_vfiprintf_r+0x60>
 8006a6c:	68b5      	ldr	r5, [r6, #8]
 8006a6e:	e7df      	b.n	8006a30 <_vfiprintf_r+0x20>
 8006a70:	4b79      	ldr	r3, [pc, #484]	; (8006c58 <_vfiprintf_r+0x248>)
 8006a72:	429d      	cmp	r5, r3
 8006a74:	bf08      	it	eq
 8006a76:	68f5      	ldreq	r5, [r6, #12]
 8006a78:	e7da      	b.n	8006a30 <_vfiprintf_r+0x20>
 8006a7a:	89ab      	ldrh	r3, [r5, #12]
 8006a7c:	0598      	lsls	r0, r3, #22
 8006a7e:	d4ed      	bmi.n	8006a5c <_vfiprintf_r+0x4c>
 8006a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a82:	f000 fd1a 	bl	80074ba <__retarget_lock_release_recursive>
 8006a86:	e7e9      	b.n	8006a5c <_vfiprintf_r+0x4c>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a96:	2330      	movs	r3, #48	; 0x30
 8006a98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c5c <_vfiprintf_r+0x24c>
 8006a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aa0:	f04f 0901 	mov.w	r9, #1
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	469a      	mov	sl, r3
 8006aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aac:	b10a      	cbz	r2, 8006ab2 <_vfiprintf_r+0xa2>
 8006aae:	2a25      	cmp	r2, #37	; 0x25
 8006ab0:	d1f9      	bne.n	8006aa6 <_vfiprintf_r+0x96>
 8006ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ab6:	d00b      	beq.n	8006ad0 <_vfiprintf_r+0xc0>
 8006ab8:	465b      	mov	r3, fp
 8006aba:	4622      	mov	r2, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff ff93 	bl	80069ea <__sfputs_r>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f000 80aa 	beq.w	8006c1e <_vfiprintf_r+0x20e>
 8006aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006acc:	445a      	add	r2, fp
 8006ace:	9209      	str	r2, [sp, #36]	; 0x24
 8006ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80a2 	beq.w	8006c1e <_vfiprintf_r+0x20e>
 8006ada:	2300      	movs	r3, #0
 8006adc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ae4:	f10a 0a01 	add.w	sl, sl, #1
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	9307      	str	r3, [sp, #28]
 8006aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006af0:	931a      	str	r3, [sp, #104]	; 0x68
 8006af2:	4654      	mov	r4, sl
 8006af4:	2205      	movs	r2, #5
 8006af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006afa:	4858      	ldr	r0, [pc, #352]	; (8006c5c <_vfiprintf_r+0x24c>)
 8006afc:	f7f9 fb88 	bl	8000210 <memchr>
 8006b00:	9a04      	ldr	r2, [sp, #16]
 8006b02:	b9d8      	cbnz	r0, 8006b3c <_vfiprintf_r+0x12c>
 8006b04:	06d1      	lsls	r1, r2, #27
 8006b06:	bf44      	itt	mi
 8006b08:	2320      	movmi	r3, #32
 8006b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b0e:	0713      	lsls	r3, r2, #28
 8006b10:	bf44      	itt	mi
 8006b12:	232b      	movmi	r3, #43	; 0x2b
 8006b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b18:	f89a 3000 	ldrb.w	r3, [sl]
 8006b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b1e:	d015      	beq.n	8006b4c <_vfiprintf_r+0x13c>
 8006b20:	9a07      	ldr	r2, [sp, #28]
 8006b22:	4654      	mov	r4, sl
 8006b24:	2000      	movs	r0, #0
 8006b26:	f04f 0c0a 	mov.w	ip, #10
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b30:	3b30      	subs	r3, #48	; 0x30
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d94e      	bls.n	8006bd4 <_vfiprintf_r+0x1c4>
 8006b36:	b1b0      	cbz	r0, 8006b66 <_vfiprintf_r+0x156>
 8006b38:	9207      	str	r2, [sp, #28]
 8006b3a:	e014      	b.n	8006b66 <_vfiprintf_r+0x156>
 8006b3c:	eba0 0308 	sub.w	r3, r0, r8
 8006b40:	fa09 f303 	lsl.w	r3, r9, r3
 8006b44:	4313      	orrs	r3, r2
 8006b46:	9304      	str	r3, [sp, #16]
 8006b48:	46a2      	mov	sl, r4
 8006b4a:	e7d2      	b.n	8006af2 <_vfiprintf_r+0xe2>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	1d19      	adds	r1, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	9103      	str	r1, [sp, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bfbb      	ittet	lt
 8006b58:	425b      	neglt	r3, r3
 8006b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b5e:	9307      	strge	r3, [sp, #28]
 8006b60:	9307      	strlt	r3, [sp, #28]
 8006b62:	bfb8      	it	lt
 8006b64:	9204      	strlt	r2, [sp, #16]
 8006b66:	7823      	ldrb	r3, [r4, #0]
 8006b68:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6a:	d10c      	bne.n	8006b86 <_vfiprintf_r+0x176>
 8006b6c:	7863      	ldrb	r3, [r4, #1]
 8006b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b70:	d135      	bne.n	8006bde <_vfiprintf_r+0x1ce>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	1d1a      	adds	r2, r3, #4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	9203      	str	r2, [sp, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bfb8      	it	lt
 8006b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b82:	3402      	adds	r4, #2
 8006b84:	9305      	str	r3, [sp, #20]
 8006b86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c6c <_vfiprintf_r+0x25c>
 8006b8a:	7821      	ldrb	r1, [r4, #0]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	4650      	mov	r0, sl
 8006b90:	f7f9 fb3e 	bl	8000210 <memchr>
 8006b94:	b140      	cbz	r0, 8006ba8 <_vfiprintf_r+0x198>
 8006b96:	2340      	movs	r3, #64	; 0x40
 8006b98:	eba0 000a 	sub.w	r0, r0, sl
 8006b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8006ba0:	9b04      	ldr	r3, [sp, #16]
 8006ba2:	4303      	orrs	r3, r0
 8006ba4:	3401      	adds	r4, #1
 8006ba6:	9304      	str	r3, [sp, #16]
 8006ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bac:	482c      	ldr	r0, [pc, #176]	; (8006c60 <_vfiprintf_r+0x250>)
 8006bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bb2:	2206      	movs	r2, #6
 8006bb4:	f7f9 fb2c 	bl	8000210 <memchr>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d03f      	beq.n	8006c3c <_vfiprintf_r+0x22c>
 8006bbc:	4b29      	ldr	r3, [pc, #164]	; (8006c64 <_vfiprintf_r+0x254>)
 8006bbe:	bb1b      	cbnz	r3, 8006c08 <_vfiprintf_r+0x1f8>
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	3307      	adds	r3, #7
 8006bc4:	f023 0307 	bic.w	r3, r3, #7
 8006bc8:	3308      	adds	r3, #8
 8006bca:	9303      	str	r3, [sp, #12]
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	443b      	add	r3, r7
 8006bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd2:	e767      	b.n	8006aa4 <_vfiprintf_r+0x94>
 8006bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bd8:	460c      	mov	r4, r1
 8006bda:	2001      	movs	r0, #1
 8006bdc:	e7a5      	b.n	8006b2a <_vfiprintf_r+0x11a>
 8006bde:	2300      	movs	r3, #0
 8006be0:	3401      	adds	r4, #1
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	4619      	mov	r1, r3
 8006be6:	f04f 0c0a 	mov.w	ip, #10
 8006bea:	4620      	mov	r0, r4
 8006bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bf0:	3a30      	subs	r2, #48	; 0x30
 8006bf2:	2a09      	cmp	r2, #9
 8006bf4:	d903      	bls.n	8006bfe <_vfiprintf_r+0x1ee>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0c5      	beq.n	8006b86 <_vfiprintf_r+0x176>
 8006bfa:	9105      	str	r1, [sp, #20]
 8006bfc:	e7c3      	b.n	8006b86 <_vfiprintf_r+0x176>
 8006bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c02:	4604      	mov	r4, r0
 8006c04:	2301      	movs	r3, #1
 8006c06:	e7f0      	b.n	8006bea <_vfiprintf_r+0x1da>
 8006c08:	ab03      	add	r3, sp, #12
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	462a      	mov	r2, r5
 8006c0e:	4b16      	ldr	r3, [pc, #88]	; (8006c68 <_vfiprintf_r+0x258>)
 8006c10:	a904      	add	r1, sp, #16
 8006c12:	4630      	mov	r0, r6
 8006c14:	f3af 8000 	nop.w
 8006c18:	4607      	mov	r7, r0
 8006c1a:	1c78      	adds	r0, r7, #1
 8006c1c:	d1d6      	bne.n	8006bcc <_vfiprintf_r+0x1bc>
 8006c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c20:	07d9      	lsls	r1, r3, #31
 8006c22:	d405      	bmi.n	8006c30 <_vfiprintf_r+0x220>
 8006c24:	89ab      	ldrh	r3, [r5, #12]
 8006c26:	059a      	lsls	r2, r3, #22
 8006c28:	d402      	bmi.n	8006c30 <_vfiprintf_r+0x220>
 8006c2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c2c:	f000 fc45 	bl	80074ba <__retarget_lock_release_recursive>
 8006c30:	89ab      	ldrh	r3, [r5, #12]
 8006c32:	065b      	lsls	r3, r3, #25
 8006c34:	f53f af12 	bmi.w	8006a5c <_vfiprintf_r+0x4c>
 8006c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c3a:	e711      	b.n	8006a60 <_vfiprintf_r+0x50>
 8006c3c:	ab03      	add	r3, sp, #12
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	462a      	mov	r2, r5
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <_vfiprintf_r+0x258>)
 8006c44:	a904      	add	r1, sp, #16
 8006c46:	4630      	mov	r0, r6
 8006c48:	f000 f880 	bl	8006d4c <_printf_i>
 8006c4c:	e7e4      	b.n	8006c18 <_vfiprintf_r+0x208>
 8006c4e:	bf00      	nop
 8006c50:	08007e20 	.word	0x08007e20
 8006c54:	08007e40 	.word	0x08007e40
 8006c58:	08007e00 	.word	0x08007e00
 8006c5c:	08007dcc 	.word	0x08007dcc
 8006c60:	08007dd6 	.word	0x08007dd6
 8006c64:	00000000 	.word	0x00000000
 8006c68:	080069eb 	.word	0x080069eb
 8006c6c:	08007dd2 	.word	0x08007dd2

08006c70 <_printf_common>:
 8006c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	4616      	mov	r6, r2
 8006c76:	4699      	mov	r9, r3
 8006c78:	688a      	ldr	r2, [r1, #8]
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c80:	4293      	cmp	r3, r2
 8006c82:	bfb8      	it	lt
 8006c84:	4613      	movlt	r3, r2
 8006c86:	6033      	str	r3, [r6, #0]
 8006c88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	b10a      	cbz	r2, 8006c96 <_printf_common+0x26>
 8006c92:	3301      	adds	r3, #1
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	0699      	lsls	r1, r3, #26
 8006c9a:	bf42      	ittt	mi
 8006c9c:	6833      	ldrmi	r3, [r6, #0]
 8006c9e:	3302      	addmi	r3, #2
 8006ca0:	6033      	strmi	r3, [r6, #0]
 8006ca2:	6825      	ldr	r5, [r4, #0]
 8006ca4:	f015 0506 	ands.w	r5, r5, #6
 8006ca8:	d106      	bne.n	8006cb8 <_printf_common+0x48>
 8006caa:	f104 0a19 	add.w	sl, r4, #25
 8006cae:	68e3      	ldr	r3, [r4, #12]
 8006cb0:	6832      	ldr	r2, [r6, #0]
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	42ab      	cmp	r3, r5
 8006cb6:	dc26      	bgt.n	8006d06 <_printf_common+0x96>
 8006cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cbc:	1e13      	subs	r3, r2, #0
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	bf18      	it	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	0692      	lsls	r2, r2, #26
 8006cc6:	d42b      	bmi.n	8006d20 <_printf_common+0xb0>
 8006cc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ccc:	4649      	mov	r1, r9
 8006cce:	4638      	mov	r0, r7
 8006cd0:	47c0      	blx	r8
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d01e      	beq.n	8006d14 <_printf_common+0xa4>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	68e5      	ldr	r5, [r4, #12]
 8006cda:	6832      	ldr	r2, [r6, #0]
 8006cdc:	f003 0306 	and.w	r3, r3, #6
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	bf08      	it	eq
 8006ce4:	1aad      	subeq	r5, r5, r2
 8006ce6:	68a3      	ldr	r3, [r4, #8]
 8006ce8:	6922      	ldr	r2, [r4, #16]
 8006cea:	bf0c      	ite	eq
 8006cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cf0:	2500      	movne	r5, #0
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	bfc4      	itt	gt
 8006cf6:	1a9b      	subgt	r3, r3, r2
 8006cf8:	18ed      	addgt	r5, r5, r3
 8006cfa:	2600      	movs	r6, #0
 8006cfc:	341a      	adds	r4, #26
 8006cfe:	42b5      	cmp	r5, r6
 8006d00:	d11a      	bne.n	8006d38 <_printf_common+0xc8>
 8006d02:	2000      	movs	r0, #0
 8006d04:	e008      	b.n	8006d18 <_printf_common+0xa8>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4652      	mov	r2, sl
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	47c0      	blx	r8
 8006d10:	3001      	adds	r0, #1
 8006d12:	d103      	bne.n	8006d1c <_printf_common+0xac>
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295
 8006d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1c:	3501      	adds	r5, #1
 8006d1e:	e7c6      	b.n	8006cae <_printf_common+0x3e>
 8006d20:	18e1      	adds	r1, r4, r3
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	2030      	movs	r0, #48	; 0x30
 8006d26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d2a:	4422      	add	r2, r4
 8006d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d34:	3302      	adds	r3, #2
 8006d36:	e7c7      	b.n	8006cc8 <_printf_common+0x58>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	4638      	mov	r0, r7
 8006d40:	47c0      	blx	r8
 8006d42:	3001      	adds	r0, #1
 8006d44:	d0e6      	beq.n	8006d14 <_printf_common+0xa4>
 8006d46:	3601      	adds	r6, #1
 8006d48:	e7d9      	b.n	8006cfe <_printf_common+0x8e>
	...

08006d4c <_printf_i>:
 8006d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d50:	460c      	mov	r4, r1
 8006d52:	4691      	mov	r9, r2
 8006d54:	7e27      	ldrb	r7, [r4, #24]
 8006d56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d58:	2f78      	cmp	r7, #120	; 0x78
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	469a      	mov	sl, r3
 8006d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d62:	d807      	bhi.n	8006d74 <_printf_i+0x28>
 8006d64:	2f62      	cmp	r7, #98	; 0x62
 8006d66:	d80a      	bhi.n	8006d7e <_printf_i+0x32>
 8006d68:	2f00      	cmp	r7, #0
 8006d6a:	f000 80d8 	beq.w	8006f1e <_printf_i+0x1d2>
 8006d6e:	2f58      	cmp	r7, #88	; 0x58
 8006d70:	f000 80a3 	beq.w	8006eba <_printf_i+0x16e>
 8006d74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d7c:	e03a      	b.n	8006df4 <_printf_i+0xa8>
 8006d7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d82:	2b15      	cmp	r3, #21
 8006d84:	d8f6      	bhi.n	8006d74 <_printf_i+0x28>
 8006d86:	a001      	add	r0, pc, #4	; (adr r0, 8006d8c <_printf_i+0x40>)
 8006d88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d8c:	08006de5 	.word	0x08006de5
 8006d90:	08006df9 	.word	0x08006df9
 8006d94:	08006d75 	.word	0x08006d75
 8006d98:	08006d75 	.word	0x08006d75
 8006d9c:	08006d75 	.word	0x08006d75
 8006da0:	08006d75 	.word	0x08006d75
 8006da4:	08006df9 	.word	0x08006df9
 8006da8:	08006d75 	.word	0x08006d75
 8006dac:	08006d75 	.word	0x08006d75
 8006db0:	08006d75 	.word	0x08006d75
 8006db4:	08006d75 	.word	0x08006d75
 8006db8:	08006f05 	.word	0x08006f05
 8006dbc:	08006e29 	.word	0x08006e29
 8006dc0:	08006ee7 	.word	0x08006ee7
 8006dc4:	08006d75 	.word	0x08006d75
 8006dc8:	08006d75 	.word	0x08006d75
 8006dcc:	08006f27 	.word	0x08006f27
 8006dd0:	08006d75 	.word	0x08006d75
 8006dd4:	08006e29 	.word	0x08006e29
 8006dd8:	08006d75 	.word	0x08006d75
 8006ddc:	08006d75 	.word	0x08006d75
 8006de0:	08006eef 	.word	0x08006eef
 8006de4:	680b      	ldr	r3, [r1, #0]
 8006de6:	1d1a      	adds	r2, r3, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	600a      	str	r2, [r1, #0]
 8006dec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0a3      	b.n	8006f40 <_printf_i+0x1f4>
 8006df8:	6825      	ldr	r5, [r4, #0]
 8006dfa:	6808      	ldr	r0, [r1, #0]
 8006dfc:	062e      	lsls	r6, r5, #24
 8006dfe:	f100 0304 	add.w	r3, r0, #4
 8006e02:	d50a      	bpl.n	8006e1a <_printf_i+0xce>
 8006e04:	6805      	ldr	r5, [r0, #0]
 8006e06:	600b      	str	r3, [r1, #0]
 8006e08:	2d00      	cmp	r5, #0
 8006e0a:	da03      	bge.n	8006e14 <_printf_i+0xc8>
 8006e0c:	232d      	movs	r3, #45	; 0x2d
 8006e0e:	426d      	negs	r5, r5
 8006e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e14:	485e      	ldr	r0, [pc, #376]	; (8006f90 <_printf_i+0x244>)
 8006e16:	230a      	movs	r3, #10
 8006e18:	e019      	b.n	8006e4e <_printf_i+0x102>
 8006e1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e1e:	6805      	ldr	r5, [r0, #0]
 8006e20:	600b      	str	r3, [r1, #0]
 8006e22:	bf18      	it	ne
 8006e24:	b22d      	sxthne	r5, r5
 8006e26:	e7ef      	b.n	8006e08 <_printf_i+0xbc>
 8006e28:	680b      	ldr	r3, [r1, #0]
 8006e2a:	6825      	ldr	r5, [r4, #0]
 8006e2c:	1d18      	adds	r0, r3, #4
 8006e2e:	6008      	str	r0, [r1, #0]
 8006e30:	0628      	lsls	r0, r5, #24
 8006e32:	d501      	bpl.n	8006e38 <_printf_i+0xec>
 8006e34:	681d      	ldr	r5, [r3, #0]
 8006e36:	e002      	b.n	8006e3e <_printf_i+0xf2>
 8006e38:	0669      	lsls	r1, r5, #25
 8006e3a:	d5fb      	bpl.n	8006e34 <_printf_i+0xe8>
 8006e3c:	881d      	ldrh	r5, [r3, #0]
 8006e3e:	4854      	ldr	r0, [pc, #336]	; (8006f90 <_printf_i+0x244>)
 8006e40:	2f6f      	cmp	r7, #111	; 0x6f
 8006e42:	bf0c      	ite	eq
 8006e44:	2308      	moveq	r3, #8
 8006e46:	230a      	movne	r3, #10
 8006e48:	2100      	movs	r1, #0
 8006e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e4e:	6866      	ldr	r6, [r4, #4]
 8006e50:	60a6      	str	r6, [r4, #8]
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	bfa2      	ittt	ge
 8006e56:	6821      	ldrge	r1, [r4, #0]
 8006e58:	f021 0104 	bicge.w	r1, r1, #4
 8006e5c:	6021      	strge	r1, [r4, #0]
 8006e5e:	b90d      	cbnz	r5, 8006e64 <_printf_i+0x118>
 8006e60:	2e00      	cmp	r6, #0
 8006e62:	d04d      	beq.n	8006f00 <_printf_i+0x1b4>
 8006e64:	4616      	mov	r6, r2
 8006e66:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e6a:	fb03 5711 	mls	r7, r3, r1, r5
 8006e6e:	5dc7      	ldrb	r7, [r0, r7]
 8006e70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e74:	462f      	mov	r7, r5
 8006e76:	42bb      	cmp	r3, r7
 8006e78:	460d      	mov	r5, r1
 8006e7a:	d9f4      	bls.n	8006e66 <_printf_i+0x11a>
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d10b      	bne.n	8006e98 <_printf_i+0x14c>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	07df      	lsls	r7, r3, #31
 8006e84:	d508      	bpl.n	8006e98 <_printf_i+0x14c>
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	6861      	ldr	r1, [r4, #4]
 8006e8a:	4299      	cmp	r1, r3
 8006e8c:	bfde      	ittt	le
 8006e8e:	2330      	movle	r3, #48	; 0x30
 8006e90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e98:	1b92      	subs	r2, r2, r6
 8006e9a:	6122      	str	r2, [r4, #16]
 8006e9c:	f8cd a000 	str.w	sl, [sp]
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	aa03      	add	r2, sp, #12
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	f7ff fee2 	bl	8006c70 <_printf_common>
 8006eac:	3001      	adds	r0, #1
 8006eae:	d14c      	bne.n	8006f4a <_printf_i+0x1fe>
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb4:	b004      	add	sp, #16
 8006eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eba:	4835      	ldr	r0, [pc, #212]	; (8006f90 <_printf_i+0x244>)
 8006ebc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	680e      	ldr	r6, [r1, #0]
 8006ec4:	061f      	lsls	r7, r3, #24
 8006ec6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006eca:	600e      	str	r6, [r1, #0]
 8006ecc:	d514      	bpl.n	8006ef8 <_printf_i+0x1ac>
 8006ece:	07d9      	lsls	r1, r3, #31
 8006ed0:	bf44      	itt	mi
 8006ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ed6:	6023      	strmi	r3, [r4, #0]
 8006ed8:	b91d      	cbnz	r5, 8006ee2 <_printf_i+0x196>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	f023 0320 	bic.w	r3, r3, #32
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	e7b0      	b.n	8006e48 <_printf_i+0xfc>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	f043 0320 	orr.w	r3, r3, #32
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	2378      	movs	r3, #120	; 0x78
 8006ef0:	4828      	ldr	r0, [pc, #160]	; (8006f94 <_printf_i+0x248>)
 8006ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ef6:	e7e3      	b.n	8006ec0 <_printf_i+0x174>
 8006ef8:	065e      	lsls	r6, r3, #25
 8006efa:	bf48      	it	mi
 8006efc:	b2ad      	uxthmi	r5, r5
 8006efe:	e7e6      	b.n	8006ece <_printf_i+0x182>
 8006f00:	4616      	mov	r6, r2
 8006f02:	e7bb      	b.n	8006e7c <_printf_i+0x130>
 8006f04:	680b      	ldr	r3, [r1, #0]
 8006f06:	6826      	ldr	r6, [r4, #0]
 8006f08:	6960      	ldr	r0, [r4, #20]
 8006f0a:	1d1d      	adds	r5, r3, #4
 8006f0c:	600d      	str	r5, [r1, #0]
 8006f0e:	0635      	lsls	r5, r6, #24
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	d501      	bpl.n	8006f18 <_printf_i+0x1cc>
 8006f14:	6018      	str	r0, [r3, #0]
 8006f16:	e002      	b.n	8006f1e <_printf_i+0x1d2>
 8006f18:	0671      	lsls	r1, r6, #25
 8006f1a:	d5fb      	bpl.n	8006f14 <_printf_i+0x1c8>
 8006f1c:	8018      	strh	r0, [r3, #0]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6123      	str	r3, [r4, #16]
 8006f22:	4616      	mov	r6, r2
 8006f24:	e7ba      	b.n	8006e9c <_printf_i+0x150>
 8006f26:	680b      	ldr	r3, [r1, #0]
 8006f28:	1d1a      	adds	r2, r3, #4
 8006f2a:	600a      	str	r2, [r1, #0]
 8006f2c:	681e      	ldr	r6, [r3, #0]
 8006f2e:	6862      	ldr	r2, [r4, #4]
 8006f30:	2100      	movs	r1, #0
 8006f32:	4630      	mov	r0, r6
 8006f34:	f7f9 f96c 	bl	8000210 <memchr>
 8006f38:	b108      	cbz	r0, 8006f3e <_printf_i+0x1f2>
 8006f3a:	1b80      	subs	r0, r0, r6
 8006f3c:	6060      	str	r0, [r4, #4]
 8006f3e:	6863      	ldr	r3, [r4, #4]
 8006f40:	6123      	str	r3, [r4, #16]
 8006f42:	2300      	movs	r3, #0
 8006f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f48:	e7a8      	b.n	8006e9c <_printf_i+0x150>
 8006f4a:	6923      	ldr	r3, [r4, #16]
 8006f4c:	4632      	mov	r2, r6
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4640      	mov	r0, r8
 8006f52:	47d0      	blx	sl
 8006f54:	3001      	adds	r0, #1
 8006f56:	d0ab      	beq.n	8006eb0 <_printf_i+0x164>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	079b      	lsls	r3, r3, #30
 8006f5c:	d413      	bmi.n	8006f86 <_printf_i+0x23a>
 8006f5e:	68e0      	ldr	r0, [r4, #12]
 8006f60:	9b03      	ldr	r3, [sp, #12]
 8006f62:	4298      	cmp	r0, r3
 8006f64:	bfb8      	it	lt
 8006f66:	4618      	movlt	r0, r3
 8006f68:	e7a4      	b.n	8006eb4 <_printf_i+0x168>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	4649      	mov	r1, r9
 8006f70:	4640      	mov	r0, r8
 8006f72:	47d0      	blx	sl
 8006f74:	3001      	adds	r0, #1
 8006f76:	d09b      	beq.n	8006eb0 <_printf_i+0x164>
 8006f78:	3501      	adds	r5, #1
 8006f7a:	68e3      	ldr	r3, [r4, #12]
 8006f7c:	9903      	ldr	r1, [sp, #12]
 8006f7e:	1a5b      	subs	r3, r3, r1
 8006f80:	42ab      	cmp	r3, r5
 8006f82:	dcf2      	bgt.n	8006f6a <_printf_i+0x21e>
 8006f84:	e7eb      	b.n	8006f5e <_printf_i+0x212>
 8006f86:	2500      	movs	r5, #0
 8006f88:	f104 0619 	add.w	r6, r4, #25
 8006f8c:	e7f5      	b.n	8006f7a <_printf_i+0x22e>
 8006f8e:	bf00      	nop
 8006f90:	08007ddd 	.word	0x08007ddd
 8006f94:	08007dee 	.word	0x08007dee

08006f98 <_sbrk_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d06      	ldr	r5, [pc, #24]	; (8006fb4 <_sbrk_r+0x1c>)
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	f7fa ff9a 	bl	8001edc <_sbrk>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_sbrk_r+0x1a>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_sbrk_r+0x1a>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	20000318 	.word	0x20000318

08006fb8 <__swbuf_r>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	460e      	mov	r6, r1
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	b118      	cbz	r0, 8006fca <__swbuf_r+0x12>
 8006fc2:	6983      	ldr	r3, [r0, #24]
 8006fc4:	b90b      	cbnz	r3, 8006fca <__swbuf_r+0x12>
 8006fc6:	f000 f9d9 	bl	800737c <__sinit>
 8006fca:	4b21      	ldr	r3, [pc, #132]	; (8007050 <__swbuf_r+0x98>)
 8006fcc:	429c      	cmp	r4, r3
 8006fce:	d12b      	bne.n	8007028 <__swbuf_r+0x70>
 8006fd0:	686c      	ldr	r4, [r5, #4]
 8006fd2:	69a3      	ldr	r3, [r4, #24]
 8006fd4:	60a3      	str	r3, [r4, #8]
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	071a      	lsls	r2, r3, #28
 8006fda:	d52f      	bpl.n	800703c <__swbuf_r+0x84>
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	b36b      	cbz	r3, 800703c <__swbuf_r+0x84>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	1ac0      	subs	r0, r0, r3
 8006fe6:	6963      	ldr	r3, [r4, #20]
 8006fe8:	b2f6      	uxtb	r6, r6
 8006fea:	4283      	cmp	r3, r0
 8006fec:	4637      	mov	r7, r6
 8006fee:	dc04      	bgt.n	8006ffa <__swbuf_r+0x42>
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f000 f92e 	bl	8007254 <_fflush_r>
 8006ff8:	bb30      	cbnz	r0, 8007048 <__swbuf_r+0x90>
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	60a3      	str	r3, [r4, #8]
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	6022      	str	r2, [r4, #0]
 8007006:	701e      	strb	r6, [r3, #0]
 8007008:	6963      	ldr	r3, [r4, #20]
 800700a:	3001      	adds	r0, #1
 800700c:	4283      	cmp	r3, r0
 800700e:	d004      	beq.n	800701a <__swbuf_r+0x62>
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	07db      	lsls	r3, r3, #31
 8007014:	d506      	bpl.n	8007024 <__swbuf_r+0x6c>
 8007016:	2e0a      	cmp	r6, #10
 8007018:	d104      	bne.n	8007024 <__swbuf_r+0x6c>
 800701a:	4621      	mov	r1, r4
 800701c:	4628      	mov	r0, r5
 800701e:	f000 f919 	bl	8007254 <_fflush_r>
 8007022:	b988      	cbnz	r0, 8007048 <__swbuf_r+0x90>
 8007024:	4638      	mov	r0, r7
 8007026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007028:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <__swbuf_r+0x9c>)
 800702a:	429c      	cmp	r4, r3
 800702c:	d101      	bne.n	8007032 <__swbuf_r+0x7a>
 800702e:	68ac      	ldr	r4, [r5, #8]
 8007030:	e7cf      	b.n	8006fd2 <__swbuf_r+0x1a>
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <__swbuf_r+0xa0>)
 8007034:	429c      	cmp	r4, r3
 8007036:	bf08      	it	eq
 8007038:	68ec      	ldreq	r4, [r5, #12]
 800703a:	e7ca      	b.n	8006fd2 <__swbuf_r+0x1a>
 800703c:	4621      	mov	r1, r4
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f80c 	bl	800705c <__swsetup_r>
 8007044:	2800      	cmp	r0, #0
 8007046:	d0cb      	beq.n	8006fe0 <__swbuf_r+0x28>
 8007048:	f04f 37ff 	mov.w	r7, #4294967295
 800704c:	e7ea      	b.n	8007024 <__swbuf_r+0x6c>
 800704e:	bf00      	nop
 8007050:	08007e20 	.word	0x08007e20
 8007054:	08007e40 	.word	0x08007e40
 8007058:	08007e00 	.word	0x08007e00

0800705c <__swsetup_r>:
 800705c:	4b32      	ldr	r3, [pc, #200]	; (8007128 <__swsetup_r+0xcc>)
 800705e:	b570      	push	{r4, r5, r6, lr}
 8007060:	681d      	ldr	r5, [r3, #0]
 8007062:	4606      	mov	r6, r0
 8007064:	460c      	mov	r4, r1
 8007066:	b125      	cbz	r5, 8007072 <__swsetup_r+0x16>
 8007068:	69ab      	ldr	r3, [r5, #24]
 800706a:	b913      	cbnz	r3, 8007072 <__swsetup_r+0x16>
 800706c:	4628      	mov	r0, r5
 800706e:	f000 f985 	bl	800737c <__sinit>
 8007072:	4b2e      	ldr	r3, [pc, #184]	; (800712c <__swsetup_r+0xd0>)
 8007074:	429c      	cmp	r4, r3
 8007076:	d10f      	bne.n	8007098 <__swsetup_r+0x3c>
 8007078:	686c      	ldr	r4, [r5, #4]
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007080:	0719      	lsls	r1, r3, #28
 8007082:	d42c      	bmi.n	80070de <__swsetup_r+0x82>
 8007084:	06dd      	lsls	r5, r3, #27
 8007086:	d411      	bmi.n	80070ac <__swsetup_r+0x50>
 8007088:	2309      	movs	r3, #9
 800708a:	6033      	str	r3, [r6, #0]
 800708c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	f04f 30ff 	mov.w	r0, #4294967295
 8007096:	e03e      	b.n	8007116 <__swsetup_r+0xba>
 8007098:	4b25      	ldr	r3, [pc, #148]	; (8007130 <__swsetup_r+0xd4>)
 800709a:	429c      	cmp	r4, r3
 800709c:	d101      	bne.n	80070a2 <__swsetup_r+0x46>
 800709e:	68ac      	ldr	r4, [r5, #8]
 80070a0:	e7eb      	b.n	800707a <__swsetup_r+0x1e>
 80070a2:	4b24      	ldr	r3, [pc, #144]	; (8007134 <__swsetup_r+0xd8>)
 80070a4:	429c      	cmp	r4, r3
 80070a6:	bf08      	it	eq
 80070a8:	68ec      	ldreq	r4, [r5, #12]
 80070aa:	e7e6      	b.n	800707a <__swsetup_r+0x1e>
 80070ac:	0758      	lsls	r0, r3, #29
 80070ae:	d512      	bpl.n	80070d6 <__swsetup_r+0x7a>
 80070b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070b2:	b141      	cbz	r1, 80070c6 <__swsetup_r+0x6a>
 80070b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070b8:	4299      	cmp	r1, r3
 80070ba:	d002      	beq.n	80070c2 <__swsetup_r+0x66>
 80070bc:	4630      	mov	r0, r6
 80070be:	f7ff fa77 	bl	80065b0 <_free_r>
 80070c2:	2300      	movs	r3, #0
 80070c4:	6363      	str	r3, [r4, #52]	; 0x34
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	2300      	movs	r3, #0
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	f043 0308 	orr.w	r3, r3, #8
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	b94b      	cbnz	r3, 80070f6 <__swsetup_r+0x9a>
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ec:	d003      	beq.n	80070f6 <__swsetup_r+0x9a>
 80070ee:	4621      	mov	r1, r4
 80070f0:	4630      	mov	r0, r6
 80070f2:	f000 fa07 	bl	8007504 <__smakebuf_r>
 80070f6:	89a0      	ldrh	r0, [r4, #12]
 80070f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070fc:	f010 0301 	ands.w	r3, r0, #1
 8007100:	d00a      	beq.n	8007118 <__swsetup_r+0xbc>
 8007102:	2300      	movs	r3, #0
 8007104:	60a3      	str	r3, [r4, #8]
 8007106:	6963      	ldr	r3, [r4, #20]
 8007108:	425b      	negs	r3, r3
 800710a:	61a3      	str	r3, [r4, #24]
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	b943      	cbnz	r3, 8007122 <__swsetup_r+0xc6>
 8007110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007114:	d1ba      	bne.n	800708c <__swsetup_r+0x30>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	0781      	lsls	r1, r0, #30
 800711a:	bf58      	it	pl
 800711c:	6963      	ldrpl	r3, [r4, #20]
 800711e:	60a3      	str	r3, [r4, #8]
 8007120:	e7f4      	b.n	800710c <__swsetup_r+0xb0>
 8007122:	2000      	movs	r0, #0
 8007124:	e7f7      	b.n	8007116 <__swsetup_r+0xba>
 8007126:	bf00      	nop
 8007128:	2000000c 	.word	0x2000000c
 800712c:	08007e20 	.word	0x08007e20
 8007130:	08007e40 	.word	0x08007e40
 8007134:	08007e00 	.word	0x08007e00

08007138 <abort>:
 8007138:	b508      	push	{r3, lr}
 800713a:	2006      	movs	r0, #6
 800713c:	f000 faa4 	bl	8007688 <raise>
 8007140:	2001      	movs	r0, #1
 8007142:	f7fa fe53 	bl	8001dec <_exit>
	...

08007148 <__sflush_r>:
 8007148:	898a      	ldrh	r2, [r1, #12]
 800714a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714e:	4605      	mov	r5, r0
 8007150:	0710      	lsls	r0, r2, #28
 8007152:	460c      	mov	r4, r1
 8007154:	d458      	bmi.n	8007208 <__sflush_r+0xc0>
 8007156:	684b      	ldr	r3, [r1, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc05      	bgt.n	8007168 <__sflush_r+0x20>
 800715c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	dc02      	bgt.n	8007168 <__sflush_r+0x20>
 8007162:	2000      	movs	r0, #0
 8007164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800716a:	2e00      	cmp	r6, #0
 800716c:	d0f9      	beq.n	8007162 <__sflush_r+0x1a>
 800716e:	2300      	movs	r3, #0
 8007170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007174:	682f      	ldr	r7, [r5, #0]
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	d032      	beq.n	80071e0 <__sflush_r+0x98>
 800717a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	075a      	lsls	r2, r3, #29
 8007180:	d505      	bpl.n	800718e <__sflush_r+0x46>
 8007182:	6863      	ldr	r3, [r4, #4]
 8007184:	1ac0      	subs	r0, r0, r3
 8007186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007188:	b10b      	cbz	r3, 800718e <__sflush_r+0x46>
 800718a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800718c:	1ac0      	subs	r0, r0, r3
 800718e:	2300      	movs	r3, #0
 8007190:	4602      	mov	r2, r0
 8007192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007194:	6a21      	ldr	r1, [r4, #32]
 8007196:	4628      	mov	r0, r5
 8007198:	47b0      	blx	r6
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	d106      	bne.n	80071ae <__sflush_r+0x66>
 80071a0:	6829      	ldr	r1, [r5, #0]
 80071a2:	291d      	cmp	r1, #29
 80071a4:	d82c      	bhi.n	8007200 <__sflush_r+0xb8>
 80071a6:	4a2a      	ldr	r2, [pc, #168]	; (8007250 <__sflush_r+0x108>)
 80071a8:	40ca      	lsrs	r2, r1
 80071aa:	07d6      	lsls	r6, r2, #31
 80071ac:	d528      	bpl.n	8007200 <__sflush_r+0xb8>
 80071ae:	2200      	movs	r2, #0
 80071b0:	6062      	str	r2, [r4, #4]
 80071b2:	04d9      	lsls	r1, r3, #19
 80071b4:	6922      	ldr	r2, [r4, #16]
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	d504      	bpl.n	80071c4 <__sflush_r+0x7c>
 80071ba:	1c42      	adds	r2, r0, #1
 80071bc:	d101      	bne.n	80071c2 <__sflush_r+0x7a>
 80071be:	682b      	ldr	r3, [r5, #0]
 80071c0:	b903      	cbnz	r3, 80071c4 <__sflush_r+0x7c>
 80071c2:	6560      	str	r0, [r4, #84]	; 0x54
 80071c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071c6:	602f      	str	r7, [r5, #0]
 80071c8:	2900      	cmp	r1, #0
 80071ca:	d0ca      	beq.n	8007162 <__sflush_r+0x1a>
 80071cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071d0:	4299      	cmp	r1, r3
 80071d2:	d002      	beq.n	80071da <__sflush_r+0x92>
 80071d4:	4628      	mov	r0, r5
 80071d6:	f7ff f9eb 	bl	80065b0 <_free_r>
 80071da:	2000      	movs	r0, #0
 80071dc:	6360      	str	r0, [r4, #52]	; 0x34
 80071de:	e7c1      	b.n	8007164 <__sflush_r+0x1c>
 80071e0:	6a21      	ldr	r1, [r4, #32]
 80071e2:	2301      	movs	r3, #1
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b0      	blx	r6
 80071e8:	1c41      	adds	r1, r0, #1
 80071ea:	d1c7      	bne.n	800717c <__sflush_r+0x34>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0c4      	beq.n	800717c <__sflush_r+0x34>
 80071f2:	2b1d      	cmp	r3, #29
 80071f4:	d001      	beq.n	80071fa <__sflush_r+0xb2>
 80071f6:	2b16      	cmp	r3, #22
 80071f8:	d101      	bne.n	80071fe <__sflush_r+0xb6>
 80071fa:	602f      	str	r7, [r5, #0]
 80071fc:	e7b1      	b.n	8007162 <__sflush_r+0x1a>
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	e7ad      	b.n	8007164 <__sflush_r+0x1c>
 8007208:	690f      	ldr	r7, [r1, #16]
 800720a:	2f00      	cmp	r7, #0
 800720c:	d0a9      	beq.n	8007162 <__sflush_r+0x1a>
 800720e:	0793      	lsls	r3, r2, #30
 8007210:	680e      	ldr	r6, [r1, #0]
 8007212:	bf08      	it	eq
 8007214:	694b      	ldreq	r3, [r1, #20]
 8007216:	600f      	str	r7, [r1, #0]
 8007218:	bf18      	it	ne
 800721a:	2300      	movne	r3, #0
 800721c:	eba6 0807 	sub.w	r8, r6, r7
 8007220:	608b      	str	r3, [r1, #8]
 8007222:	f1b8 0f00 	cmp.w	r8, #0
 8007226:	dd9c      	ble.n	8007162 <__sflush_r+0x1a>
 8007228:	6a21      	ldr	r1, [r4, #32]
 800722a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800722c:	4643      	mov	r3, r8
 800722e:	463a      	mov	r2, r7
 8007230:	4628      	mov	r0, r5
 8007232:	47b0      	blx	r6
 8007234:	2800      	cmp	r0, #0
 8007236:	dc06      	bgt.n	8007246 <__sflush_r+0xfe>
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	e78e      	b.n	8007164 <__sflush_r+0x1c>
 8007246:	4407      	add	r7, r0
 8007248:	eba8 0800 	sub.w	r8, r8, r0
 800724c:	e7e9      	b.n	8007222 <__sflush_r+0xda>
 800724e:	bf00      	nop
 8007250:	20400001 	.word	0x20400001

08007254 <_fflush_r>:
 8007254:	b538      	push	{r3, r4, r5, lr}
 8007256:	690b      	ldr	r3, [r1, #16]
 8007258:	4605      	mov	r5, r0
 800725a:	460c      	mov	r4, r1
 800725c:	b913      	cbnz	r3, 8007264 <_fflush_r+0x10>
 800725e:	2500      	movs	r5, #0
 8007260:	4628      	mov	r0, r5
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	b118      	cbz	r0, 800726e <_fflush_r+0x1a>
 8007266:	6983      	ldr	r3, [r0, #24]
 8007268:	b90b      	cbnz	r3, 800726e <_fflush_r+0x1a>
 800726a:	f000 f887 	bl	800737c <__sinit>
 800726e:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <_fflush_r+0x6c>)
 8007270:	429c      	cmp	r4, r3
 8007272:	d11b      	bne.n	80072ac <_fflush_r+0x58>
 8007274:	686c      	ldr	r4, [r5, #4]
 8007276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0ef      	beq.n	800725e <_fflush_r+0xa>
 800727e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007280:	07d0      	lsls	r0, r2, #31
 8007282:	d404      	bmi.n	800728e <_fflush_r+0x3a>
 8007284:	0599      	lsls	r1, r3, #22
 8007286:	d402      	bmi.n	800728e <_fflush_r+0x3a>
 8007288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800728a:	f000 f915 	bl	80074b8 <__retarget_lock_acquire_recursive>
 800728e:	4628      	mov	r0, r5
 8007290:	4621      	mov	r1, r4
 8007292:	f7ff ff59 	bl	8007148 <__sflush_r>
 8007296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007298:	07da      	lsls	r2, r3, #31
 800729a:	4605      	mov	r5, r0
 800729c:	d4e0      	bmi.n	8007260 <_fflush_r+0xc>
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	059b      	lsls	r3, r3, #22
 80072a2:	d4dd      	bmi.n	8007260 <_fflush_r+0xc>
 80072a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072a6:	f000 f908 	bl	80074ba <__retarget_lock_release_recursive>
 80072aa:	e7d9      	b.n	8007260 <_fflush_r+0xc>
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <_fflush_r+0x70>)
 80072ae:	429c      	cmp	r4, r3
 80072b0:	d101      	bne.n	80072b6 <_fflush_r+0x62>
 80072b2:	68ac      	ldr	r4, [r5, #8]
 80072b4:	e7df      	b.n	8007276 <_fflush_r+0x22>
 80072b6:	4b04      	ldr	r3, [pc, #16]	; (80072c8 <_fflush_r+0x74>)
 80072b8:	429c      	cmp	r4, r3
 80072ba:	bf08      	it	eq
 80072bc:	68ec      	ldreq	r4, [r5, #12]
 80072be:	e7da      	b.n	8007276 <_fflush_r+0x22>
 80072c0:	08007e20 	.word	0x08007e20
 80072c4:	08007e40 	.word	0x08007e40
 80072c8:	08007e00 	.word	0x08007e00

080072cc <std>:
 80072cc:	2300      	movs	r3, #0
 80072ce:	b510      	push	{r4, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	e9c0 3300 	strd	r3, r3, [r0]
 80072d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072da:	6083      	str	r3, [r0, #8]
 80072dc:	8181      	strh	r1, [r0, #12]
 80072de:	6643      	str	r3, [r0, #100]	; 0x64
 80072e0:	81c2      	strh	r2, [r0, #14]
 80072e2:	6183      	str	r3, [r0, #24]
 80072e4:	4619      	mov	r1, r3
 80072e6:	2208      	movs	r2, #8
 80072e8:	305c      	adds	r0, #92	; 0x5c
 80072ea:	f7ff f89d 	bl	8006428 <memset>
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <std+0x38>)
 80072f0:	6263      	str	r3, [r4, #36]	; 0x24
 80072f2:	4b05      	ldr	r3, [pc, #20]	; (8007308 <std+0x3c>)
 80072f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <std+0x40>)
 80072f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <std+0x44>)
 80072fc:	6224      	str	r4, [r4, #32]
 80072fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007300:	bd10      	pop	{r4, pc}
 8007302:	bf00      	nop
 8007304:	080076c1 	.word	0x080076c1
 8007308:	080076e3 	.word	0x080076e3
 800730c:	0800771b 	.word	0x0800771b
 8007310:	0800773f 	.word	0x0800773f

08007314 <_cleanup_r>:
 8007314:	4901      	ldr	r1, [pc, #4]	; (800731c <_cleanup_r+0x8>)
 8007316:	f000 b8af 	b.w	8007478 <_fwalk_reent>
 800731a:	bf00      	nop
 800731c:	08007255 	.word	0x08007255

08007320 <__sfmoreglue>:
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	1e4a      	subs	r2, r1, #1
 8007324:	2568      	movs	r5, #104	; 0x68
 8007326:	4355      	muls	r5, r2
 8007328:	460e      	mov	r6, r1
 800732a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800732e:	f7ff f98f 	bl	8006650 <_malloc_r>
 8007332:	4604      	mov	r4, r0
 8007334:	b140      	cbz	r0, 8007348 <__sfmoreglue+0x28>
 8007336:	2100      	movs	r1, #0
 8007338:	e9c0 1600 	strd	r1, r6, [r0]
 800733c:	300c      	adds	r0, #12
 800733e:	60a0      	str	r0, [r4, #8]
 8007340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007344:	f7ff f870 	bl	8006428 <memset>
 8007348:	4620      	mov	r0, r4
 800734a:	bd70      	pop	{r4, r5, r6, pc}

0800734c <__sfp_lock_acquire>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__sfp_lock_acquire+0x8>)
 800734e:	f000 b8b3 	b.w	80074b8 <__retarget_lock_acquire_recursive>
 8007352:	bf00      	nop
 8007354:	20000314 	.word	0x20000314

08007358 <__sfp_lock_release>:
 8007358:	4801      	ldr	r0, [pc, #4]	; (8007360 <__sfp_lock_release+0x8>)
 800735a:	f000 b8ae 	b.w	80074ba <__retarget_lock_release_recursive>
 800735e:	bf00      	nop
 8007360:	20000314 	.word	0x20000314

08007364 <__sinit_lock_acquire>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__sinit_lock_acquire+0x8>)
 8007366:	f000 b8a7 	b.w	80074b8 <__retarget_lock_acquire_recursive>
 800736a:	bf00      	nop
 800736c:	2000030f 	.word	0x2000030f

08007370 <__sinit_lock_release>:
 8007370:	4801      	ldr	r0, [pc, #4]	; (8007378 <__sinit_lock_release+0x8>)
 8007372:	f000 b8a2 	b.w	80074ba <__retarget_lock_release_recursive>
 8007376:	bf00      	nop
 8007378:	2000030f 	.word	0x2000030f

0800737c <__sinit>:
 800737c:	b510      	push	{r4, lr}
 800737e:	4604      	mov	r4, r0
 8007380:	f7ff fff0 	bl	8007364 <__sinit_lock_acquire>
 8007384:	69a3      	ldr	r3, [r4, #24]
 8007386:	b11b      	cbz	r3, 8007390 <__sinit+0x14>
 8007388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738c:	f7ff bff0 	b.w	8007370 <__sinit_lock_release>
 8007390:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007394:	6523      	str	r3, [r4, #80]	; 0x50
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <__sinit+0x68>)
 8007398:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <__sinit+0x6c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	62a2      	str	r2, [r4, #40]	; 0x28
 800739e:	42a3      	cmp	r3, r4
 80073a0:	bf04      	itt	eq
 80073a2:	2301      	moveq	r3, #1
 80073a4:	61a3      	streq	r3, [r4, #24]
 80073a6:	4620      	mov	r0, r4
 80073a8:	f000 f820 	bl	80073ec <__sfp>
 80073ac:	6060      	str	r0, [r4, #4]
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f81c 	bl	80073ec <__sfp>
 80073b4:	60a0      	str	r0, [r4, #8]
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 f818 	bl	80073ec <__sfp>
 80073bc:	2200      	movs	r2, #0
 80073be:	60e0      	str	r0, [r4, #12]
 80073c0:	2104      	movs	r1, #4
 80073c2:	6860      	ldr	r0, [r4, #4]
 80073c4:	f7ff ff82 	bl	80072cc <std>
 80073c8:	68a0      	ldr	r0, [r4, #8]
 80073ca:	2201      	movs	r2, #1
 80073cc:	2109      	movs	r1, #9
 80073ce:	f7ff ff7d 	bl	80072cc <std>
 80073d2:	68e0      	ldr	r0, [r4, #12]
 80073d4:	2202      	movs	r2, #2
 80073d6:	2112      	movs	r1, #18
 80073d8:	f7ff ff78 	bl	80072cc <std>
 80073dc:	2301      	movs	r3, #1
 80073de:	61a3      	str	r3, [r4, #24]
 80073e0:	e7d2      	b.n	8007388 <__sinit+0xc>
 80073e2:	bf00      	nop
 80073e4:	08007d14 	.word	0x08007d14
 80073e8:	08007315 	.word	0x08007315

080073ec <__sfp>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	4607      	mov	r7, r0
 80073f0:	f7ff ffac 	bl	800734c <__sfp_lock_acquire>
 80073f4:	4b1e      	ldr	r3, [pc, #120]	; (8007470 <__sfp+0x84>)
 80073f6:	681e      	ldr	r6, [r3, #0]
 80073f8:	69b3      	ldr	r3, [r6, #24]
 80073fa:	b913      	cbnz	r3, 8007402 <__sfp+0x16>
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7ff ffbd 	bl	800737c <__sinit>
 8007402:	3648      	adds	r6, #72	; 0x48
 8007404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007408:	3b01      	subs	r3, #1
 800740a:	d503      	bpl.n	8007414 <__sfp+0x28>
 800740c:	6833      	ldr	r3, [r6, #0]
 800740e:	b30b      	cbz	r3, 8007454 <__sfp+0x68>
 8007410:	6836      	ldr	r6, [r6, #0]
 8007412:	e7f7      	b.n	8007404 <__sfp+0x18>
 8007414:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007418:	b9d5      	cbnz	r5, 8007450 <__sfp+0x64>
 800741a:	4b16      	ldr	r3, [pc, #88]	; (8007474 <__sfp+0x88>)
 800741c:	60e3      	str	r3, [r4, #12]
 800741e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007422:	6665      	str	r5, [r4, #100]	; 0x64
 8007424:	f000 f847 	bl	80074b6 <__retarget_lock_init_recursive>
 8007428:	f7ff ff96 	bl	8007358 <__sfp_lock_release>
 800742c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007434:	6025      	str	r5, [r4, #0]
 8007436:	61a5      	str	r5, [r4, #24]
 8007438:	2208      	movs	r2, #8
 800743a:	4629      	mov	r1, r5
 800743c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007440:	f7fe fff2 	bl	8006428 <memset>
 8007444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800744c:	4620      	mov	r0, r4
 800744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007450:	3468      	adds	r4, #104	; 0x68
 8007452:	e7d9      	b.n	8007408 <__sfp+0x1c>
 8007454:	2104      	movs	r1, #4
 8007456:	4638      	mov	r0, r7
 8007458:	f7ff ff62 	bl	8007320 <__sfmoreglue>
 800745c:	4604      	mov	r4, r0
 800745e:	6030      	str	r0, [r6, #0]
 8007460:	2800      	cmp	r0, #0
 8007462:	d1d5      	bne.n	8007410 <__sfp+0x24>
 8007464:	f7ff ff78 	bl	8007358 <__sfp_lock_release>
 8007468:	230c      	movs	r3, #12
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	e7ee      	b.n	800744c <__sfp+0x60>
 800746e:	bf00      	nop
 8007470:	08007d14 	.word	0x08007d14
 8007474:	ffff0001 	.word	0xffff0001

08007478 <_fwalk_reent>:
 8007478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800747c:	4606      	mov	r6, r0
 800747e:	4688      	mov	r8, r1
 8007480:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007484:	2700      	movs	r7, #0
 8007486:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800748a:	f1b9 0901 	subs.w	r9, r9, #1
 800748e:	d505      	bpl.n	800749c <_fwalk_reent+0x24>
 8007490:	6824      	ldr	r4, [r4, #0]
 8007492:	2c00      	cmp	r4, #0
 8007494:	d1f7      	bne.n	8007486 <_fwalk_reent+0xe>
 8007496:	4638      	mov	r0, r7
 8007498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749c:	89ab      	ldrh	r3, [r5, #12]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d907      	bls.n	80074b2 <_fwalk_reent+0x3a>
 80074a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074a6:	3301      	adds	r3, #1
 80074a8:	d003      	beq.n	80074b2 <_fwalk_reent+0x3a>
 80074aa:	4629      	mov	r1, r5
 80074ac:	4630      	mov	r0, r6
 80074ae:	47c0      	blx	r8
 80074b0:	4307      	orrs	r7, r0
 80074b2:	3568      	adds	r5, #104	; 0x68
 80074b4:	e7e9      	b.n	800748a <_fwalk_reent+0x12>

080074b6 <__retarget_lock_init_recursive>:
 80074b6:	4770      	bx	lr

080074b8 <__retarget_lock_acquire_recursive>:
 80074b8:	4770      	bx	lr

080074ba <__retarget_lock_release_recursive>:
 80074ba:	4770      	bx	lr

080074bc <__swhatbuf_r>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	460e      	mov	r6, r1
 80074c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c4:	2900      	cmp	r1, #0
 80074c6:	b096      	sub	sp, #88	; 0x58
 80074c8:	4614      	mov	r4, r2
 80074ca:	461d      	mov	r5, r3
 80074cc:	da07      	bge.n	80074de <__swhatbuf_r+0x22>
 80074ce:	2300      	movs	r3, #0
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	89b3      	ldrh	r3, [r6, #12]
 80074d4:	061a      	lsls	r2, r3, #24
 80074d6:	d410      	bmi.n	80074fa <__swhatbuf_r+0x3e>
 80074d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074dc:	e00e      	b.n	80074fc <__swhatbuf_r+0x40>
 80074de:	466a      	mov	r2, sp
 80074e0:	f000 f954 	bl	800778c <_fstat_r>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	dbf2      	blt.n	80074ce <__swhatbuf_r+0x12>
 80074e8:	9a01      	ldr	r2, [sp, #4]
 80074ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074f2:	425a      	negs	r2, r3
 80074f4:	415a      	adcs	r2, r3
 80074f6:	602a      	str	r2, [r5, #0]
 80074f8:	e7ee      	b.n	80074d8 <__swhatbuf_r+0x1c>
 80074fa:	2340      	movs	r3, #64	; 0x40
 80074fc:	2000      	movs	r0, #0
 80074fe:	6023      	str	r3, [r4, #0]
 8007500:	b016      	add	sp, #88	; 0x58
 8007502:	bd70      	pop	{r4, r5, r6, pc}

08007504 <__smakebuf_r>:
 8007504:	898b      	ldrh	r3, [r1, #12]
 8007506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007508:	079d      	lsls	r5, r3, #30
 800750a:	4606      	mov	r6, r0
 800750c:	460c      	mov	r4, r1
 800750e:	d507      	bpl.n	8007520 <__smakebuf_r+0x1c>
 8007510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	6123      	str	r3, [r4, #16]
 8007518:	2301      	movs	r3, #1
 800751a:	6163      	str	r3, [r4, #20]
 800751c:	b002      	add	sp, #8
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	ab01      	add	r3, sp, #4
 8007522:	466a      	mov	r2, sp
 8007524:	f7ff ffca 	bl	80074bc <__swhatbuf_r>
 8007528:	9900      	ldr	r1, [sp, #0]
 800752a:	4605      	mov	r5, r0
 800752c:	4630      	mov	r0, r6
 800752e:	f7ff f88f 	bl	8006650 <_malloc_r>
 8007532:	b948      	cbnz	r0, 8007548 <__smakebuf_r+0x44>
 8007534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007538:	059a      	lsls	r2, r3, #22
 800753a:	d4ef      	bmi.n	800751c <__smakebuf_r+0x18>
 800753c:	f023 0303 	bic.w	r3, r3, #3
 8007540:	f043 0302 	orr.w	r3, r3, #2
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	e7e3      	b.n	8007510 <__smakebuf_r+0xc>
 8007548:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <__smakebuf_r+0x7c>)
 800754a:	62b3      	str	r3, [r6, #40]	; 0x28
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	6020      	str	r0, [r4, #0]
 8007550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	9b00      	ldr	r3, [sp, #0]
 8007558:	6163      	str	r3, [r4, #20]
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	6120      	str	r0, [r4, #16]
 800755e:	b15b      	cbz	r3, 8007578 <__smakebuf_r+0x74>
 8007560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007564:	4630      	mov	r0, r6
 8007566:	f000 f923 	bl	80077b0 <_isatty_r>
 800756a:	b128      	cbz	r0, 8007578 <__smakebuf_r+0x74>
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	81a3      	strh	r3, [r4, #12]
 8007578:	89a0      	ldrh	r0, [r4, #12]
 800757a:	4305      	orrs	r5, r0
 800757c:	81a5      	strh	r5, [r4, #12]
 800757e:	e7cd      	b.n	800751c <__smakebuf_r+0x18>
 8007580:	08007315 	.word	0x08007315

08007584 <memcpy>:
 8007584:	440a      	add	r2, r1
 8007586:	4291      	cmp	r1, r2
 8007588:	f100 33ff 	add.w	r3, r0, #4294967295
 800758c:	d100      	bne.n	8007590 <memcpy+0xc>
 800758e:	4770      	bx	lr
 8007590:	b510      	push	{r4, lr}
 8007592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759a:	4291      	cmp	r1, r2
 800759c:	d1f9      	bne.n	8007592 <memcpy+0xe>
 800759e:	bd10      	pop	{r4, pc}

080075a0 <memmove>:
 80075a0:	4288      	cmp	r0, r1
 80075a2:	b510      	push	{r4, lr}
 80075a4:	eb01 0402 	add.w	r4, r1, r2
 80075a8:	d902      	bls.n	80075b0 <memmove+0x10>
 80075aa:	4284      	cmp	r4, r0
 80075ac:	4623      	mov	r3, r4
 80075ae:	d807      	bhi.n	80075c0 <memmove+0x20>
 80075b0:	1e43      	subs	r3, r0, #1
 80075b2:	42a1      	cmp	r1, r4
 80075b4:	d008      	beq.n	80075c8 <memmove+0x28>
 80075b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075be:	e7f8      	b.n	80075b2 <memmove+0x12>
 80075c0:	4402      	add	r2, r0
 80075c2:	4601      	mov	r1, r0
 80075c4:	428a      	cmp	r2, r1
 80075c6:	d100      	bne.n	80075ca <memmove+0x2a>
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075d2:	e7f7      	b.n	80075c4 <memmove+0x24>

080075d4 <__malloc_lock>:
 80075d4:	4801      	ldr	r0, [pc, #4]	; (80075dc <__malloc_lock+0x8>)
 80075d6:	f7ff bf6f 	b.w	80074b8 <__retarget_lock_acquire_recursive>
 80075da:	bf00      	nop
 80075dc:	20000310 	.word	0x20000310

080075e0 <__malloc_unlock>:
 80075e0:	4801      	ldr	r0, [pc, #4]	; (80075e8 <__malloc_unlock+0x8>)
 80075e2:	f7ff bf6a 	b.w	80074ba <__retarget_lock_release_recursive>
 80075e6:	bf00      	nop
 80075e8:	20000310 	.word	0x20000310

080075ec <_realloc_r>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	4607      	mov	r7, r0
 80075f0:	4614      	mov	r4, r2
 80075f2:	460e      	mov	r6, r1
 80075f4:	b921      	cbnz	r1, 8007600 <_realloc_r+0x14>
 80075f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075fa:	4611      	mov	r1, r2
 80075fc:	f7ff b828 	b.w	8006650 <_malloc_r>
 8007600:	b922      	cbnz	r2, 800760c <_realloc_r+0x20>
 8007602:	f7fe ffd5 	bl	80065b0 <_free_r>
 8007606:	4625      	mov	r5, r4
 8007608:	4628      	mov	r0, r5
 800760a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800760c:	f000 f8f2 	bl	80077f4 <_malloc_usable_size_r>
 8007610:	42a0      	cmp	r0, r4
 8007612:	d20f      	bcs.n	8007634 <_realloc_r+0x48>
 8007614:	4621      	mov	r1, r4
 8007616:	4638      	mov	r0, r7
 8007618:	f7ff f81a 	bl	8006650 <_malloc_r>
 800761c:	4605      	mov	r5, r0
 800761e:	2800      	cmp	r0, #0
 8007620:	d0f2      	beq.n	8007608 <_realloc_r+0x1c>
 8007622:	4631      	mov	r1, r6
 8007624:	4622      	mov	r2, r4
 8007626:	f7ff ffad 	bl	8007584 <memcpy>
 800762a:	4631      	mov	r1, r6
 800762c:	4638      	mov	r0, r7
 800762e:	f7fe ffbf 	bl	80065b0 <_free_r>
 8007632:	e7e9      	b.n	8007608 <_realloc_r+0x1c>
 8007634:	4635      	mov	r5, r6
 8007636:	e7e7      	b.n	8007608 <_realloc_r+0x1c>

08007638 <_raise_r>:
 8007638:	291f      	cmp	r1, #31
 800763a:	b538      	push	{r3, r4, r5, lr}
 800763c:	4604      	mov	r4, r0
 800763e:	460d      	mov	r5, r1
 8007640:	d904      	bls.n	800764c <_raise_r+0x14>
 8007642:	2316      	movs	r3, #22
 8007644:	6003      	str	r3, [r0, #0]
 8007646:	f04f 30ff 	mov.w	r0, #4294967295
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800764e:	b112      	cbz	r2, 8007656 <_raise_r+0x1e>
 8007650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007654:	b94b      	cbnz	r3, 800766a <_raise_r+0x32>
 8007656:	4620      	mov	r0, r4
 8007658:	f000 f830 	bl	80076bc <_getpid_r>
 800765c:	462a      	mov	r2, r5
 800765e:	4601      	mov	r1, r0
 8007660:	4620      	mov	r0, r4
 8007662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007666:	f000 b817 	b.w	8007698 <_kill_r>
 800766a:	2b01      	cmp	r3, #1
 800766c:	d00a      	beq.n	8007684 <_raise_r+0x4c>
 800766e:	1c59      	adds	r1, r3, #1
 8007670:	d103      	bne.n	800767a <_raise_r+0x42>
 8007672:	2316      	movs	r3, #22
 8007674:	6003      	str	r3, [r0, #0]
 8007676:	2001      	movs	r0, #1
 8007678:	e7e7      	b.n	800764a <_raise_r+0x12>
 800767a:	2400      	movs	r4, #0
 800767c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007680:	4628      	mov	r0, r5
 8007682:	4798      	blx	r3
 8007684:	2000      	movs	r0, #0
 8007686:	e7e0      	b.n	800764a <_raise_r+0x12>

08007688 <raise>:
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <raise+0xc>)
 800768a:	4601      	mov	r1, r0
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	f7ff bfd3 	b.w	8007638 <_raise_r>
 8007692:	bf00      	nop
 8007694:	2000000c 	.word	0x2000000c

08007698 <_kill_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d07      	ldr	r5, [pc, #28]	; (80076b8 <_kill_r+0x20>)
 800769c:	2300      	movs	r3, #0
 800769e:	4604      	mov	r4, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	4611      	mov	r1, r2
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	f7fa fb91 	bl	8001dcc <_kill>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	d102      	bne.n	80076b4 <_kill_r+0x1c>
 80076ae:	682b      	ldr	r3, [r5, #0]
 80076b0:	b103      	cbz	r3, 80076b4 <_kill_r+0x1c>
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	bd38      	pop	{r3, r4, r5, pc}
 80076b6:	bf00      	nop
 80076b8:	20000318 	.word	0x20000318

080076bc <_getpid_r>:
 80076bc:	f7fa bb7e 	b.w	8001dbc <_getpid>

080076c0 <__sread>:
 80076c0:	b510      	push	{r4, lr}
 80076c2:	460c      	mov	r4, r1
 80076c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c8:	f000 f89c 	bl	8007804 <_read_r>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	bfab      	itete	ge
 80076d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076d2:	89a3      	ldrhlt	r3, [r4, #12]
 80076d4:	181b      	addge	r3, r3, r0
 80076d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076da:	bfac      	ite	ge
 80076dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80076de:	81a3      	strhlt	r3, [r4, #12]
 80076e0:	bd10      	pop	{r4, pc}

080076e2 <__swrite>:
 80076e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e6:	461f      	mov	r7, r3
 80076e8:	898b      	ldrh	r3, [r1, #12]
 80076ea:	05db      	lsls	r3, r3, #23
 80076ec:	4605      	mov	r5, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	4616      	mov	r6, r2
 80076f2:	d505      	bpl.n	8007700 <__swrite+0x1e>
 80076f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f8:	2302      	movs	r3, #2
 80076fa:	2200      	movs	r2, #0
 80076fc:	f000 f868 	bl	80077d0 <_lseek_r>
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	4632      	mov	r2, r6
 800770e:	463b      	mov	r3, r7
 8007710:	4628      	mov	r0, r5
 8007712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007716:	f000 b817 	b.w	8007748 <_write_r>

0800771a <__sseek>:
 800771a:	b510      	push	{r4, lr}
 800771c:	460c      	mov	r4, r1
 800771e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007722:	f000 f855 	bl	80077d0 <_lseek_r>
 8007726:	1c43      	adds	r3, r0, #1
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	bf15      	itete	ne
 800772c:	6560      	strne	r0, [r4, #84]	; 0x54
 800772e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007736:	81a3      	strheq	r3, [r4, #12]
 8007738:	bf18      	it	ne
 800773a:	81a3      	strhne	r3, [r4, #12]
 800773c:	bd10      	pop	{r4, pc}

0800773e <__sclose>:
 800773e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007742:	f000 b813 	b.w	800776c <_close_r>
	...

08007748 <_write_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d07      	ldr	r5, [pc, #28]	; (8007768 <_write_r+0x20>)
 800774c:	4604      	mov	r4, r0
 800774e:	4608      	mov	r0, r1
 8007750:	4611      	mov	r1, r2
 8007752:	2200      	movs	r2, #0
 8007754:	602a      	str	r2, [r5, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	f7fa fb6f 	bl	8001e3a <_write>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_write_r+0x1e>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_write_r+0x1e>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	20000318 	.word	0x20000318

0800776c <_close_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4d06      	ldr	r5, [pc, #24]	; (8007788 <_close_r+0x1c>)
 8007770:	2300      	movs	r3, #0
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	f7fa fb7b 	bl	8001e72 <_close>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_close_r+0x1a>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_close_r+0x1a>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	20000318 	.word	0x20000318

0800778c <_fstat_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d07      	ldr	r5, [pc, #28]	; (80077ac <_fstat_r+0x20>)
 8007790:	2300      	movs	r3, #0
 8007792:	4604      	mov	r4, r0
 8007794:	4608      	mov	r0, r1
 8007796:	4611      	mov	r1, r2
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	f7fa fb76 	bl	8001e8a <_fstat>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	d102      	bne.n	80077a8 <_fstat_r+0x1c>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	b103      	cbz	r3, 80077a8 <_fstat_r+0x1c>
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	bd38      	pop	{r3, r4, r5, pc}
 80077aa:	bf00      	nop
 80077ac:	20000318 	.word	0x20000318

080077b0 <_isatty_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d06      	ldr	r5, [pc, #24]	; (80077cc <_isatty_r+0x1c>)
 80077b4:	2300      	movs	r3, #0
 80077b6:	4604      	mov	r4, r0
 80077b8:	4608      	mov	r0, r1
 80077ba:	602b      	str	r3, [r5, #0]
 80077bc:	f7fa fb75 	bl	8001eaa <_isatty>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_isatty_r+0x1a>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_isatty_r+0x1a>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	20000318 	.word	0x20000318

080077d0 <_lseek_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4d07      	ldr	r5, [pc, #28]	; (80077f0 <_lseek_r+0x20>)
 80077d4:	4604      	mov	r4, r0
 80077d6:	4608      	mov	r0, r1
 80077d8:	4611      	mov	r1, r2
 80077da:	2200      	movs	r2, #0
 80077dc:	602a      	str	r2, [r5, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	f7fa fb6e 	bl	8001ec0 <_lseek>
 80077e4:	1c43      	adds	r3, r0, #1
 80077e6:	d102      	bne.n	80077ee <_lseek_r+0x1e>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	b103      	cbz	r3, 80077ee <_lseek_r+0x1e>
 80077ec:	6023      	str	r3, [r4, #0]
 80077ee:	bd38      	pop	{r3, r4, r5, pc}
 80077f0:	20000318 	.word	0x20000318

080077f4 <_malloc_usable_size_r>:
 80077f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f8:	1f18      	subs	r0, r3, #4
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfbc      	itt	lt
 80077fe:	580b      	ldrlt	r3, [r1, r0]
 8007800:	18c0      	addlt	r0, r0, r3
 8007802:	4770      	bx	lr

08007804 <_read_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4d07      	ldr	r5, [pc, #28]	; (8007824 <_read_r+0x20>)
 8007808:	4604      	mov	r4, r0
 800780a:	4608      	mov	r0, r1
 800780c:	4611      	mov	r1, r2
 800780e:	2200      	movs	r2, #0
 8007810:	602a      	str	r2, [r5, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	f7fa faf4 	bl	8001e00 <_read>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_read_r+0x1e>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_read_r+0x1e>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20000318 	.word	0x20000318

08007828 <_init>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr

08007834 <_fini>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	bf00      	nop
 8007838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783a:	bc08      	pop	{r3}
 800783c:	469e      	mov	lr, r3
 800783e:	4770      	bx	lr
