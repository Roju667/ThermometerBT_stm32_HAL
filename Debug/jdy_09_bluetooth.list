
jdy_09_bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08004ee4  08004ee4  00014ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005304  08005304  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800530c  0800530c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000070  08005384  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08005384  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e421  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002457  00000000  00000000  0002e4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  00031200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017368  00000000  00000000  000319f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c256  00000000  00000000  00048d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e6e  00000000  00000000  00054fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbe1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b74  00000000  00000000  000dbe70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ecc 	.word	0x08004ecc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004ecc 	.word	0x08004ecc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <JDY09_DisplayTerminal>:
 * @param[Command] - predefined command to send
 * @return - void
 */

void JDY09_DisplayTerminal(char *Msg)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint8_t Lenght = strlen(Msg);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff fe1f 	bl	80001f4 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Lenght, JDY09_UART_TIMEOUET);
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	b29a      	uxth	r2, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <JDY09_DisplayTerminal+0x2c>)
 80005c6:	f002 faf2 	bl	8002bae <HAL_UART_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000254 	.word	0x20000254

080005d8 <JDY09_SendAndDisplayCmd>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[Command] - predefined command to send
 * @return - void
 */
static void JDY09_SendAndDisplayCmd(JDY09_t *jdy09, uint8_t *Command)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b093      	sub	sp, #76	; 0x4c
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	uint8_t MsgRecieved[64];

	//display send info on user display terminal
	JDY09_DisplayTerminal("Sending: ");
 80005e2:	4817      	ldr	r0, [pc, #92]	; (8000640 <JDY09_SendAndDisplayCmd+0x68>)
 80005e4:	f7ff ffe0 	bl	80005a8 <JDY09_DisplayTerminal>
	JDY09_DisplayTerminal((char*) Command);
 80005e8:	6838      	ldr	r0, [r7, #0]
 80005ea:	f7ff ffdd 	bl	80005a8 <JDY09_DisplayTerminal>

	//send data to JDY-09
	HAL_UART_Transmit(jdy09->huart, Command, strlen((char*) Command), JDY09_UART_TIMEOUET);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681c      	ldr	r4, [r3, #0]
 80005f2:	6838      	ldr	r0, [r7, #0]
 80005f4:	f7ff fdfe 	bl	80001f4 <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	6839      	ldr	r1, [r7, #0]
 8000602:	4620      	mov	r0, r4
 8000604:	f002 fad3 	bl	8002bae <HAL_UART_Transmit>

	//wait for response line
	while (jdy09->LinesRecieved == 0)
 8000608:	bf00      	nop
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <JDY09_SendAndDisplayCmd+0x32>
	{
	}

	//get message out of ring buffer
	JDY09_CheckPendingMessages(jdy09, MsgRecieved);
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4619      	mov	r1, r3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f8e1 	bl	80007e4 <JDY09_CheckPendingMessages>

	//display response
	JDY09_DisplayTerminal("Response: ");
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <JDY09_SendAndDisplayCmd+0x6c>)
 8000624:	f7ff ffc0 	bl	80005a8 <JDY09_DisplayTerminal>
	JDY09_DisplayTerminal((char*) MsgRecieved);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffbb 	bl	80005a8 <JDY09_DisplayTerminal>

	//clear message pending flag
	JDY09_ClearMsgPendingFlag(jdy09);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f8c8 	bl	80007c8 <JDY09_ClearMsgPendingFlag>
}
 8000638:	bf00      	nop
 800063a:	374c      	adds	r7, #76	; 0x4c
 800063c:	46bd      	mov	sp, r7
 800063e:	bd90      	pop	{r4, r7, pc}
 8000640:	08004ee4 	.word	0x08004ee4
 8000644:	08004ef0 	.word	0x08004ef0

08000648 <JDY09_Init>:
 * @param[StateGPIOPin] - pin number of STATE pin
 *
 * @return - void
 */
void JDY09_Init(JDY09_t *jdy09, UART_HandleTypeDef *huart, GPIO_TypeDef *StateGPIOPort, uint16_t StateGPIOPin)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	807b      	strh	r3, [r7, #2]

	// init msg
	JDY09_DisplayTerminal("JDY-09 Initializing... \n\r");
 8000656:	4819      	ldr	r0, [pc, #100]	; (80006bc <JDY09_Init+0x74>)
 8000658:	f7ff ffa6 	bl	80005a8 <JDY09_DisplayTerminal>

	// reset the ring buffer
	RB_Flush(&(jdy09->RingBuffer));
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3346      	adds	r3, #70	; 0x46
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fc0a 	bl	8000e7a <RB_Flush>

	// Assign uart
	jdy09->huart = huart;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	601a      	str	r2, [r3, #0]

	// Assign GPIO for State pin
	jdy09->StateGPIOPort = StateGPIOPort;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	jdy09->StatePinNumber = StateGPIOPin;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	887a      	ldrh	r2, [r7, #2]
 8000678:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
#if (JDY09_UART_RX_IT == 1)
	HAL_UART_Receive_IT(jdy09->huart, &(jdy09->RecieveBufferIT), 1);
#endif

#if (JDY09_UART_RX_DMA == 1)
	HAL_UARTEx_ReceiveToIdle_DMA(jdy09->huart,jdy09->RecieveBufferDMA,JDY09_RECIEVEBUFFERSIZE);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3304      	adds	r3, #4
 8000684:	2240      	movs	r2, #64	; 0x40
 8000686:	4619      	mov	r1, r3
 8000688:	f002 fb23 	bl	8002cd2 <HAL_UARTEx_ReceiveToIdle_DMA>
#endif

	//during init - disconnect and display basic information
	JDY09_Disconnect(jdy09);
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f000 f87b 	bl	8000788 <JDY09_Disconnect>

	//JDY09_SendCommand(jdy09, JDY09_CMD_GETVERSION);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETADRESS);
 8000692:	2102      	movs	r1, #2
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f000 f813 	bl	80006c0 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETBAUDRATE);
 800069a:	2103      	movs	r1, #3
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f000 f80f 	bl	80006c0 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETNAME);
 80006a2:	2105      	movs	r1, #5
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f000 f80b 	bl	80006c0 <JDY09_SendCommand>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETPASSWORD);
 80006aa:	2104      	movs	r1, #4
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f807 	bl	80006c0 <JDY09_SendCommand>
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	08004efc 	.word	0x08004efc

080006c0 <JDY09_SendCommand>:
 * @param[Command] - predefined commands that are in .h file
 *
 * @return - void
 */
void JDY09_SendCommand(JDY09_t *jdy09, JDY09_CMD Command)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
	// check if there is no connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber) == GPIO_PIN_RESET)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80006d8:	4619      	mov	r1, r3
 80006da:	4610      	mov	r0, r2
 80006dc:	f001 fd5c 	bl	8002198 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d138      	bne.n	8000758 <JDY09_SendCommand+0x98>
	{
		switch (Command)
 80006e6:	78fb      	ldrb	r3, [r7, #3]
 80006e8:	2b06      	cmp	r3, #6
 80006ea:	d839      	bhi.n	8000760 <JDY09_SendCommand+0xa0>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <JDY09_SendCommand+0x34>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	08000711 	.word	0x08000711
 80006f8:	0800071b 	.word	0x0800071b
 80006fc:	08000725 	.word	0x08000725
 8000700:	0800072f 	.word	0x0800072f
 8000704:	08000739 	.word	0x08000739
 8000708:	08000743 	.word	0x08000743
 800070c:	0800074d 	.word	0x0800074d
		{
		case JDY09_CMD_GETVERSION:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+VERSION\r\n");
 8000710:	4915      	ldr	r1, [pc, #84]	; (8000768 <JDY09_SendCommand+0xa8>)
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff60 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 8000718:	e01d      	b.n	8000756 <JDY09_SendCommand+0x96>

		case JDY09_CMD_RESET:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+RESET\r\n");
 800071a:	4914      	ldr	r1, [pc, #80]	; (800076c <JDY09_SendCommand+0xac>)
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ff5b 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 8000722:	e018      	b.n	8000756 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETADRESS:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+LADDR\r\n");
 8000724:	4912      	ldr	r1, [pc, #72]	; (8000770 <JDY09_SendCommand+0xb0>)
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff56 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 800072c:	e013      	b.n	8000756 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETBAUDRATE:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+BAUD\r\n");
 800072e:	4911      	ldr	r1, [pc, #68]	; (8000774 <JDY09_SendCommand+0xb4>)
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff51 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 8000736:	e00e      	b.n	8000756 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETPASSWORD:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+PIN\r\n");
 8000738:	490f      	ldr	r1, [pc, #60]	; (8000778 <JDY09_SendCommand+0xb8>)
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ff4c 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 8000740:	e009      	b.n	8000756 <JDY09_SendCommand+0x96>

		case JDY09_CMD_GETNAME:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+NAME\r\n");
 8000742:	490e      	ldr	r1, [pc, #56]	; (800077c <JDY09_SendCommand+0xbc>)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff47 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 800074a:	e004      	b.n	8000756 <JDY09_SendCommand+0x96>

		case JDY09_CMD_SETDEFAULTSETTINGS:
			JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+DEFAULT\r\n");
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <JDY09_SendCommand+0xc0>)
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff42 	bl	80005d8 <JDY09_SendAndDisplayCmd>
			break;
 8000754:	bf00      	nop
		}
		return;
 8000756:	e003      	b.n	8000760 <JDY09_SendCommand+0xa0>
	}

	// AT cmd error
	JDY09_DisplayTerminal("AT commands possible only in offline mode \n\r");
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <JDY09_SendCommand+0xc4>)
 800075a:	f7ff ff25 	bl	80005a8 <JDY09_DisplayTerminal>
 800075e:	e000      	b.n	8000762 <JDY09_SendCommand+0xa2>
		return;
 8000760:	bf00      	nop

}
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08004f18 	.word	0x08004f18
 800076c:	08004f28 	.word	0x08004f28
 8000770:	08004f34 	.word	0x08004f34
 8000774:	08004f40 	.word	0x08004f40
 8000778:	08004f4c 	.word	0x08004f4c
 800077c:	08004f58 	.word	0x08004f58
 8000780:	08004f64 	.word	0x08004f64
 8000784:	08004f74 	.word	0x08004f74

08000788 <JDY09_Disconnect>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_Disconnect(JDY09_t *jdy09)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	//check connection
	if (HAL_GPIO_ReadPin(jdy09->StateGPIOPort, jdy09->StatePinNumber) == GPIO_PIN_SET)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f001 fcfa 	bl	8002198 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d104      	bne.n	80007b4 <JDY09_Disconnect+0x2c>
	{
		// disconnect
		JDY09_SendAndDisplayCmd(jdy09, (uint8_t*) "AT+DISC\r\n");
 80007aa:	4905      	ldr	r1, [pc, #20]	; (80007c0 <JDY09_Disconnect+0x38>)
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff13 	bl	80005d8 <JDY09_SendAndDisplayCmd>
		return;
 80007b2:	e002      	b.n	80007ba <JDY09_Disconnect+0x32>
	}

	// AT cmd error
	JDY09_DisplayTerminal("Module already disconnected \n\r");
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <JDY09_Disconnect+0x3c>)
 80007b6:	f7ff fef7 	bl	80005a8 <JDY09_DisplayTerminal>
}
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	08004fa4 	.word	0x08004fa4
 80007c4:	08004fb0 	.word	0x08004fb0

080007c8 <JDY09_ClearMsgPendingFlag>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_ClearMsgPendingFlag(JDY09_t *jdy09)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	jdy09->MessagePending = JDY09_NOMESSAGE;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <JDY09_CheckPendingMessages>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[*MsgBuffer] - pointer to buffer where message has to be written
 * @return - status : massage pending 1/0
 */
uint8_t JDY09_CheckPendingMessages(JDY09_t *jdy09, uint8_t *MsgBuffer)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]

	// Check if there is message finished
	if (jdy09->LinesRecieved > 0)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d032      	beq.n	8000860 <JDY09_CheckPendingMessages+0x7c>
	{

		uint8_t i = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]
		uint8_t temp = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	73bb      	strb	r3, [r7, #14]
		do
		{
			// Move a sign to ring buffer
			RB_Read(&(jdy09->RingBuffer), &temp);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3346      	adds	r3, #70	; 0x46
 8000806:	f107 020e 	add.w	r2, r7, #14
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fadb 	bl	8000dc8 <RB_Read>
			if (temp == JDY09_LASTCHARACTER)
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b0a      	cmp	r3, #10
 8000816:	d10b      	bne.n	8000830 <JDY09_CheckPendingMessages+0x4c>
			{
				MsgBuffer[i] = JDY09_LASTCHARACTER;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	4413      	add	r3, r2
 800081e:	220a      	movs	r2, #10
 8000820:	701a      	strb	r2, [r3, #0]
				MsgBuffer[i + 1] = 0;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	3301      	adds	r3, #1
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	4413      	add	r3, r2
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e004      	b.n	800083a <JDY09_CheckPendingMessages+0x56>
			}
			else
			{
				MsgBuffer[i] = temp;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	7bba      	ldrb	r2, [r7, #14]
 8000838:	701a      	strb	r2, [r3, #0]
			}
			i++;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	3301      	adds	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
			//rewrite signs until last character defined by user
		} while (temp != JDY09_LASTCHARACTER);
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	2b0a      	cmp	r3, #10
 8000844:	d1dd      	bne.n	8000802 <JDY09_CheckPendingMessages+0x1e>
		//decrement LinesRecieved
		jdy09->LinesRecieved--;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800084c:	b2db      	uxtb	r3, r3
 800084e:	3b01      	subs	r3, #1
 8000850:	b2da      	uxtb	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		//set up flag that message is ready to parse
		jdy09->MessagePending = JDY09_MESSAGEPENDING;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2201      	movs	r2, #1
 800085c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	}

	// return if flag status
	return jdy09->MessagePending;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <JDY09_RxCpltCallbackDMA>:
 * @param[size] - size of the recieved message
 * @return - void
 */
#if (JDY09_UART_RX_DMA == 1)
void JDY09_RxCpltCallbackDMA(JDY09_t *jdy09, UART_HandleTypeDef *huart,uint16_t size)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	4613      	mov	r3, r2
 800087a:	80fb      	strh	r3, [r7, #6]


	//check if IRQ is coming from correct uart
	if (jdy09->huart->Instance == huart->Instance)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d125      	bne.n	80008d6 <JDY09_RxCpltCallbackDMA+0x68>
	{

		uint8_t i;
		//write message to ring buffer
		for (i = 0; i < size; i++)
 800088a:	2300      	movs	r3, #0
 800088c:	75fb      	strb	r3, [r7, #23]
 800088e:	e00c      	b.n	80008aa <JDY09_RxCpltCallbackDMA+0x3c>
		{
			RB_Write((&(jdy09->RingBuffer)), jdy09->RecieveBufferDMA[i]);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8000896:	7dfb      	ldrb	r3, [r7, #23]
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	4619      	mov	r1, r3
 80008a0:	f000 fabf 	bl	8000e22 <RB_Write>
		for (i = 0; i < size; i++)
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	3301      	adds	r3, #1
 80008a8:	75fb      	strb	r3, [r7, #23]
 80008aa:	7dfb      	ldrb	r3, [r7, #23]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	88fa      	ldrh	r2, [r7, #6]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8ed      	bhi.n	8000890 <JDY09_RxCpltCallbackDMA+0x22>
		}

		// when line is complete -> add 1 to received lines
		jdy09->LinesRecieved++;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	3301      	adds	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca


		// start another IRQ for single sign
		HAL_UARTEx_ReceiveToIdle_DMA(jdy09->huart, jdy09->RecieveBufferDMA,
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6818      	ldr	r0, [r3, #0]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	3304      	adds	r3, #4
 80008ce:	2240      	movs	r2, #64	; 0x40
 80008d0:	4619      	mov	r1, r3
 80008d2:	f002 f9fe 	bl	8002cd2 <HAL_UARTEx_ReceiveToIdle_DMA>
				JDY09_RECIEVEBUFFERSIZE);
	}
}
 80008d6:	bf00      	nop
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <JDY09_EXTICallback>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[GPIO_Pin] - pin number from EXTI
 * @return - void
 */
void JDY09_EXTICallback(JDY09_t *jdy09, uint16_t GPIO_Pin)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	807b      	strh	r3, [r7, #2]

	//check if IRQ is coming from STATE pin
	if (jdy09->StatePinNumber == GPIO_Pin)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80008f2:	887a      	ldrh	r2, [r7, #2]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d10d      	bne.n	8000914 <JDY09_EXTICallback+0x34>
	{
		// if trigger is caused by rising edge then new connection is made
		if (HAL_GPIO_ReadPin(BT_STATE_GPIO_Port, BT_STATE_Pin) == GPIO_PIN_SET)
 80008f8:	2108      	movs	r1, #8
 80008fa:	4808      	ldr	r0, [pc, #32]	; (800091c <JDY09_EXTICallback+0x3c>)
 80008fc:	f001 fc4c 	bl	8002198 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d103      	bne.n	800090e <JDY09_EXTICallback+0x2e>
		{
			JDY09_DisplayTerminal("Device connected \n\r");
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <JDY09_EXTICallback+0x40>)
 8000908:	f7ff fe4e 	bl	80005a8 <JDY09_DisplayTerminal>
		// if trigger is from falling edge then msg disconnect
		{
			JDY09_DisplayTerminal("Device disconnected \n\r");
		}
	}
}
 800090c:	e002      	b.n	8000914 <JDY09_EXTICallback+0x34>
			JDY09_DisplayTerminal("Device disconnected \n\r");
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <JDY09_EXTICallback+0x44>)
 8000910:	f7ff fe4a 	bl	80005a8 <JDY09_DisplayTerminal>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020800 	.word	0x40020800
 8000920:	080050a4 	.word	0x080050a4
 8000924:	080050b8 	.word	0x080050b8

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_DMA_Init+0x30>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <MX_DMA_Init+0x30>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_DMA_Init+0x30>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <MX_GPIO_Init+0xec>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a33      	ldr	r2, [pc, #204]	; (8000a48 <MX_GPIO_Init+0xec>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <MX_GPIO_Init+0xec>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_GPIO_Init+0xec>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a2c      	ldr	r2, [pc, #176]	; (8000a48 <MX_GPIO_Init+0xec>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_GPIO_Init+0xec>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_GPIO_Init+0xec>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <MX_GPIO_Init+0xec>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_GPIO_Init+0xec>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_GPIO_Init+0xec>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <MX_GPIO_Init+0xec>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_GPIO_Init+0xec>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	4819      	ldr	r0, [pc, #100]	; (8000a4c <MX_GPIO_Init+0xf0>)
 80009e8:	f001 fbee 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4813      	ldr	r0, [pc, #76]	; (8000a50 <MX_GPIO_Init+0xf4>)
 8000a04:	f001 fa44 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_STATE_Pin;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a0c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_STATE_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_GPIO_Init+0xf4>)
 8000a1e:	f001 fa37 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a22:	2320      	movs	r3, #32
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0xf0>)
 8000a3a:	f001 fa29 	bl	8001e90 <HAL_GPIO_Init>

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020800 	.word	0x40020800

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f000 fc94 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 f82c 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a60:	f7ff ff7c 	bl	800095c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a64:	f000 fb8c 	bl	8001180 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000a68:	f7ff ff5e 	bl	8000928 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a6c:	f000 fb5e 	bl	800112c <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000a70:	f000 f88e 	bl	8000b90 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  JDY09_Init(&JDY09_1, &huart1,BT_STATE_GPIO_Port,BT_STATE_Pin);
 8000a74:	2308      	movs	r3, #8
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <main+0x50>)
 8000a78:	490b      	ldr	r1, [pc, #44]	; (8000aa8 <main+0x54>)
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <main+0x58>)
 8000a7c:	f7ff fde4 	bl	8000648 <JDY09_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(JDY09_CheckPendingMessages(&JDY09_1, TransferBuffer) == JDY09_MESSAGEPENDING)
 8000a80:	490b      	ldr	r1, [pc, #44]	; (8000ab0 <main+0x5c>)
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <main+0x58>)
 8000a84:	f7ff feae 	bl	80007e4 <JDY09_CheckPendingMessages>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d1f8      	bne.n	8000a80 <main+0x2c>
	  {
		  JDY09_ClearMsgPendingFlag(&JDY09_1);
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <main+0x58>)
 8000a90:	f7ff fe9a 	bl	80007c8 <JDY09_ClearMsgPendingFlag>
		  ParseStatus = Parser_Parse(TransferBuffer);
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <main+0x5c>)
 8000a96:	f000 f8ff 	bl	8000c98 <Parser_Parse>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <main+0x60>)
 8000aa0:	701a      	strb	r2, [r3, #0]
	  if(JDY09_CheckPendingMessages(&JDY09_1, TransferBuffer) == JDY09_MESSAGEPENDING)
 8000aa2:	e7ed      	b.n	8000a80 <main+0x2c>
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	20000210 	.word	0x20000210
 8000aac:	2000009c 	.word	0x2000009c
 8000ab0:	20000170 	.word	0x20000170
 8000ab4:	20000098 	.word	0x20000098

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	; 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2230      	movs	r2, #48	; 0x30
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 f9d2 	bl	8003e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <SystemClock_Config+0xd0>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a28      	ldr	r2, [pc, #160]	; (8000b88 <SystemClock_Config+0xd0>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <SystemClock_Config+0xd0>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <SystemClock_Config+0xd4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <SystemClock_Config+0xd4>)
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <SystemClock_Config+0xd4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b20:	2310      	movs	r3, #16
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b30:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b36:	2304      	movs	r3, #4
 8000b38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3e:	f107 0320 	add.w	r3, r7, #32
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fb72 	bl	800222c <HAL_RCC_OscConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b4e:	f000 f85d 	bl	8000c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b52:	230f      	movs	r3, #15
 8000b54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	2302      	movs	r3, #2
 8000b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 fdd4 	bl	800271c <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b7a:	f000 f847 	bl	8000c0c <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3750      	adds	r7, #80	; 0x50
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	2009      	movs	r0, #9
 8000b9a:	f000 fd40 	bl	800161e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b9e:	2009      	movs	r0, #9
 8000ba0:	f000 fd59 	bl	8001656 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2025      	movs	r0, #37	; 0x25
 8000baa:	f000 fd38 	bl	800161e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bae:	2025      	movs	r0, #37	; 0x25
 8000bb0:	f000 fd51 	bl	8001656 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	203a      	movs	r0, #58	; 0x3a
 8000bba:	f000 fd30 	bl	800161e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bbe:	203a      	movs	r0, #58	; 0x3a
 8000bc0:	f000 fd49 	bl	8001656 <HAL_NVIC_EnableIRQ>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_UARTEx_RxEventCallback>:
}
#endif

#if (JDY09_UART_RX_DMA == 1)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]
	// Callback from BT module
	JDY09_RxCpltCallbackDMA(&JDY09_1, huart, Size);
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	4803      	ldr	r0, [pc, #12]	; (8000be8 <HAL_UARTEx_RxEventCallback+0x20>)
 8000bdc:	f7ff fe47 	bl	800086e <JDY09_RxCpltCallbackDMA>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000009c 	.word	0x2000009c

08000bec <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	// Callback from EXTI
	JDY09_EXTICallback(&JDY09_1,GPIO_Pin);
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000bfc:	f7ff fe70 	bl	80008e0 <JDY09_EXTICallback>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000009c 	.word	0x2000009c

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <Parser_DisplayTerminal>:
#include "ringbuffer.h"
#include "parse.h"
#include "usart.h"

void Parser_DisplayTerminal(char *Msg)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	uint8_t Lenght = strlen(Msg);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fae7 	bl	80001f4 <strlen>
 8000c26:	4603      	mov	r3, r0
 8000c28:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) Msg, Lenght, 1000);
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <Parser_DisplayTerminal+0x2c>)
 8000c36:	f001 ffba 	bl	8002bae <HAL_UART_Transmit>
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000254 	.word	0x20000254

08000c48 <Parser_WAKE_UP>:

/*
 * @ WAKE UP procedure
 */
static void Parser_WAKE_UP(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	//wake up for 5 mins
	Parser_DisplayTerminal("System wake up\n\r");
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <Parser_WAKE_UP+0x10>)
 8000c4e:	f7ff ffe3 	bl	8000c18 <Parser_DisplayTerminal>

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	080050d0 	.word	0x080050d0

08000c5c <Parser_MEASURE>:

/*
 * @ MEASURE procedure
 */
static void Parser_MEASURE(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	// send log to uart
	Parser_DisplayTerminal("Calculating HUGE data\n\r");
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <Parser_MEASURE+0x10>)
 8000c62:	f7ff ffd9 	bl	8000c18 <Parser_DisplayTerminal>

	//bmp280 measure

	//bluetooth send to master
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	080050e4 	.word	0x080050e4

08000c70 <Parser_DISPLAY>:

/*
 * @ DISPLAY procedure
 */
static void Parser_DISPLAY(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	// send log to uart
	Parser_DisplayTerminal("Parametres displayed \n\r");
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <Parser_DISPLAY+0x10>)
 8000c76:	f7ff ffcf 	bl	8000c18 <Parser_DisplayTerminal>

	//start timer to measure every 1 second for 1 minute
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	080050fc 	.word	0x080050fc

08000c84 <Parser_SLEEP>:

/*
 * @ SLEEP procedure
 */
static void Parser_SLEEP(uint8_t *ParseBuffer)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
//	UartLogBT("Welcome back broski\n\r");
//
//	//start count down for going back to sleep
//	HAL_TIM_Base_Start_IT(&htim1);

}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <Parser_Parse>:
/*
 * @ function parse message and start command procedures
 */

uint8_t Parser_Parse(uint8_t *ParseBuffer)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	// Count how many commands we have to parse
	uint8_t cmd_count = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	77fb      	strb	r3, [r7, #31]
	uint8_t i = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	77bb      	strb	r3, [r7, #30]
	uint8_t LastCommand[16] =  {0};
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]

	// For every semicolon count up until EOL
	do
	{
		if (ParseBuffer[i] == ';')
 8000cb8:	7fbb      	ldrb	r3, [r7, #30]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b3b      	cmp	r3, #59	; 0x3b
 8000cc2:	d102      	bne.n	8000cca <Parser_Parse+0x32>
		{
			cmd_count++;
 8000cc4:	7ffb      	ldrb	r3, [r7, #31]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	77fb      	strb	r3, [r7, #31]
		}
		i++;
 8000cca:	7fbb      	ldrb	r3, [r7, #30]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	77bb      	strb	r3, [r7, #30]
	} while (ParseBuffer[i] != '\n');
 8000cd0:	7fbb      	ldrb	r3, [r7, #30]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b0a      	cmp	r3, #10
 8000cda:	d1ed      	bne.n	8000cb8 <Parser_Parse+0x20>

	// no command was found
	if (cmd_count == 0)
 8000cdc:	7ffb      	ldrb	r3, [r7, #31]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <Parser_Parse+0x5a>
	{
		Parser_DisplayTerminal("Command unknown : \n\r");
 8000ce2:	4831      	ldr	r0, [pc, #196]	; (8000da8 <Parser_Parse+0x110>)
 8000ce4:	f7ff ff98 	bl	8000c18 <Parser_DisplayTerminal>
		Parser_DisplayTerminal("Send HELP; to get commands\n\r");
 8000ce8:	4830      	ldr	r0, [pc, #192]	; (8000dac <Parser_Parse+0x114>)
 8000cea:	f7ff ff95 	bl	8000c18 <Parser_DisplayTerminal>
		// return ERROR
		return PARSE_ERROR_NOCMD;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e056      	b.n	8000da0 <Parser_Parse+0x108>


	uint8_t *ParsePointer;

	// Execute cmd_count number of commands
	for (i = 0; i < cmd_count; i++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	77bb      	strb	r3, [r7, #30]
 8000cf6:	e04e      	b.n	8000d96 <Parser_Parse+0xfe>
	{

		// cut command from the message -> from beginning to ;
		//if first msg start from beginning
		if(i == 0)
 8000cf8:	7fbb      	ldrb	r3, [r7, #30]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d105      	bne.n	8000d0a <Parser_Parse+0x72>
		{
			ParsePointer = (uint8_t*)(strtok((char*)ParseBuffer, ";"));
 8000cfe:	492c      	ldr	r1, [pc, #176]	; (8000db0 <Parser_Parse+0x118>)
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f003 f8c5 	bl	8003e90 <strtok>
 8000d06:	61b8      	str	r0, [r7, #24]
 8000d08:	e004      	b.n	8000d14 <Parser_Parse+0x7c>

		}else
		{
			ParsePointer = (uint8_t*)(strtok(NULL, ";"));
 8000d0a:	4929      	ldr	r1, [pc, #164]	; (8000db0 <Parser_Parse+0x118>)
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f003 f8bf 	bl	8003e90 <strtok>
 8000d12:	61b8      	str	r0, [r7, #24]
		}


		// if you put two same commands in a row - error
		if(strcmp((char*)ParsePointer,(char*)LastCommand) == 0)
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4619      	mov	r1, r3
 8000d1a:	69b8      	ldr	r0, [r7, #24]
 8000d1c:	f7ff fa60 	bl	80001e0 <strcmp>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d104      	bne.n	8000d30 <Parser_Parse+0x98>
		{
			Parser_DisplayTerminal("Error, same command twice in a row!\n\r");
 8000d26:	4823      	ldr	r0, [pc, #140]	; (8000db4 <Parser_Parse+0x11c>)
 8000d28:	f7ff ff76 	bl	8000c18 <Parser_DisplayTerminal>
			return PARSE_ERROR_2CMDS;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e037      	b.n	8000da0 <Parser_Parse+0x108>
		/*
		 * EXECUTE COMMANDS
		 */

		// do WAKE_UP
		if (strcmp("WAKE_UP", (char*)ParsePointer) == 0)
 8000d30:	69b9      	ldr	r1, [r7, #24]
 8000d32:	4821      	ldr	r0, [pc, #132]	; (8000db8 <Parser_Parse+0x120>)
 8000d34:	f7ff fa54 	bl	80001e0 <strcmp>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <Parser_Parse+0xac>
		{
			Parser_WAKE_UP();
 8000d3e:	f7ff ff83 	bl	8000c48 <Parser_WAKE_UP>
 8000d42:	e01f      	b.n	8000d84 <Parser_Parse+0xec>
		}
		// do MEASURE
		else if (strcmp("MEASURE", (char*)ParsePointer) == 0)
 8000d44:	69b9      	ldr	r1, [r7, #24]
 8000d46:	481d      	ldr	r0, [pc, #116]	; (8000dbc <Parser_Parse+0x124>)
 8000d48:	f7ff fa4a 	bl	80001e0 <strcmp>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <Parser_Parse+0xc0>
		{
			Parser_MEASURE();
 8000d52:	f7ff ff83 	bl	8000c5c <Parser_MEASURE>
 8000d56:	e015      	b.n	8000d84 <Parser_Parse+0xec>
		}
		// do DISPLAY
		else if (strcmp("DISPLAY", (char*)ParsePointer) == 0)
 8000d58:	69b9      	ldr	r1, [r7, #24]
 8000d5a:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <Parser_Parse+0x128>)
 8000d5c:	f7ff fa40 	bl	80001e0 <strcmp>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <Parser_Parse+0xd4>
		{
			Parser_DISPLAY();
 8000d66:	f7ff ff83 	bl	8000c70 <Parser_DISPLAY>
 8000d6a:	e00b      	b.n	8000d84 <Parser_Parse+0xec>
		}
		// do SLEEP
		else if (strcmp("SLEEP", (char*)ParsePointer) == 0)
 8000d6c:	69b9      	ldr	r1, [r7, #24]
 8000d6e:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <Parser_Parse+0x12c>)
 8000d70:	f7ff fa36 	bl	80001e0 <strcmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d104      	bne.n	8000d84 <Parser_Parse+0xec>
		{
			Parser_SLEEP(ParsePointer);
 8000d7a:	69b8      	ldr	r0, [r7, #24]
 8000d7c:	f7ff ff82 	bl	8000c84 <Parser_SLEEP>
			return PARSE_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e00d      	b.n	8000da0 <Parser_Parse+0x108>
		}

		strcpy((char*)LastCommand,(char*)ParsePointer);
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	69b9      	ldr	r1, [r7, #24]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 f878 	bl	8003e80 <strcpy>
	for (i = 0; i < cmd_count; i++)
 8000d90:	7fbb      	ldrb	r3, [r7, #30]
 8000d92:	3301      	adds	r3, #1
 8000d94:	77bb      	strb	r3, [r7, #30]
 8000d96:	7fba      	ldrb	r2, [r7, #30]
 8000d98:	7ffb      	ldrb	r3, [r7, #31]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3ac      	bcc.n	8000cf8 <Parser_Parse+0x60>
	}

	return PARSE_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	08005114 	.word	0x08005114
 8000dac:	0800512c 	.word	0x0800512c
 8000db0:	0800514c 	.word	0x0800514c
 8000db4:	08005150 	.word	0x08005150
 8000db8:	08005178 	.word	0x08005178
 8000dbc:	08005180 	.word	0x08005180
 8000dc0:	08005188 	.word	0x08005188
 8000dc4:	08005190 	.word	0x08005190

08000dc8 <RB_Read>:
#include "main.h"
#include "ringbuffer.h"
#include "parse.h"

RB_Status RB_Read(Ringbuffer_t *buffer, uint8_t *value)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	if(buffer->Head == buffer->Tail)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d101      	bne.n	8000de6 <RB_Read+0x1e>
	{
		return RB_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e017      	b.n	8000e16 <RB_Read+0x4e>
	}

	*value = buffer->buffer[buffer->Tail];
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	5c9a      	ldrb	r2, [r3, r2]
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	701a      	strb	r2, [r3, #0]

	buffer->Tail = (buffer->Tail + 1) % RING_BUFFER_SIZE;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	425a      	negs	r2, r3
 8000e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e08:	bf58      	it	pl
 8000e0a:	4253      	negpl	r3, r2
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	return RB_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <RB_Write>:

RB_Status RB_Write(Ringbuffer_t *buffer, uint8_t value)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]

	uint16_t HeadTmp;
	HeadTmp = (buffer->Head + 1) % RING_BUFFER_SIZE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000e34:	3301      	adds	r3, #1
 8000e36:	425a      	negs	r2, r3
 8000e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e40:	bf58      	it	pl
 8000e42:	4253      	negpl	r3, r2
 8000e44:	81fb      	strh	r3, [r7, #14]

	if (HeadTmp == buffer->Tail)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000e4c:	89fa      	ldrh	r2, [r7, #14]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d101      	bne.n	8000e56 <RB_Write+0x34>
	{
		return RB_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00b      	b.n	8000e6e <RB_Write+0x4c>
	}

	buffer->buffer[buffer->Head] = value;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	78fa      	ldrb	r2, [r7, #3]
 8000e62:	545a      	strb	r2, [r3, r1]
	buffer->Head = HeadTmp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	89fa      	ldrh	r2, [r7, #14]
 8000e68:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	return RB_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <RB_Flush>:

void RB_Flush(Ringbuffer_t *buffer)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	buffer->Head = 0;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	buffer->Tail = 0;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ede:	2007      	movs	r0, #7
 8000ee0:	f000 fb92 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 fa74 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f48:	2008      	movs	r0, #8
 8000f4a:	f001 f957 	bl	80021fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <USART1_IRQHandler+0x10>)
 8000f5a:	f001 ff1f 	bl	8002d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000210 	.word	0x20000210

08000f68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <DMA2_Stream2_IRQHandler+0x10>)
 8000f6e:	f000 fd25 	bl	80019bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001b0 	.word	0x200001b0

08000f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	return 1;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_kill>:

int _kill(int pid, int sig)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f96:	f002 ff41 	bl	8003e1c <__errno>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2216      	movs	r2, #22
 8000f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_exit>:

void _exit (int status)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe7 	bl	8000f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fbe:	e7fe      	b.n	8000fbe <_exit+0x12>

08000fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00a      	b.n	8000fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fd2:	f3af 8000 	nop.w
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf0      	blt.n	8000fd2 <_read+0x12>
	}

return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e009      	b.n	8001020 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf1      	blt.n	800100c <_write+0x12>
	}
	return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_close>:

int _close(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105a:	605a      	str	r2, [r3, #4]
	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_isatty>:

int _isatty(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f002 fea6 	bl	8003e1c <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20018000 	.word	0x20018000
 80010fc:	00000400 	.word	0x00000400
 8001100:	2000008c 	.word	0x2000008c
 8001104:	200002b0 	.word	0x200002b0

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_USART1_UART_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001138:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800113c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_USART1_UART_Init+0x4c>)
 8001164:	f001 fcd6 	bl	8002b14 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800116e:	f7ff fd4d 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000210 	.word	0x20000210
 800117c:	40011000 	.word	0x40011000

08001180 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_USART2_UART_Init+0x50>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b8:	f001 fcac 	bl	8002b14 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c2:	f7ff fd23 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000254 	.word	0x20000254
 80011d0:	40004400 	.word	0x40004400

080011d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a49      	ldr	r2, [pc, #292]	; (8001318 <HAL_UART_MspInit+0x144>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d15b      	bne.n	80012ae <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	4b48      	ldr	r3, [pc, #288]	; (800131c <HAL_UART_MspInit+0x148>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a47      	ldr	r2, [pc, #284]	; (800131c <HAL_UART_MspInit+0x148>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b45      	ldr	r3, [pc, #276]	; (800131c <HAL_UART_MspInit+0x148>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <HAL_UART_MspInit+0x148>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a40      	ldr	r2, [pc, #256]	; (800131c <HAL_UART_MspInit+0x148>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b3e      	ldr	r3, [pc, #248]	; (800131c <HAL_UART_MspInit+0x148>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800122e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001240:	2307      	movs	r3, #7
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4835      	ldr	r0, [pc, #212]	; (8001320 <HAL_UART_MspInit+0x14c>)
 800124c:	f000 fe20 	bl	8001e90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001250:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_UART_MspInit+0x150>)
 8001252:	4a35      	ldr	r2, [pc, #212]	; (8001328 <HAL_UART_MspInit+0x154>)
 8001254:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_UART_MspInit+0x150>)
 8001258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125e:	4b31      	ldr	r3, [pc, #196]	; (8001324 <HAL_UART_MspInit+0x150>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001264:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <HAL_UART_MspInit+0x150>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_UART_MspInit+0x150>)
 800126c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001270:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HAL_UART_MspInit+0x150>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_UART_MspInit+0x150>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <HAL_UART_MspInit+0x150>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_UART_MspInit+0x150>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_UART_MspInit+0x150>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001290:	4824      	ldr	r0, [pc, #144]	; (8001324 <HAL_UART_MspInit+0x150>)
 8001292:	f000 f9fb 	bl	800168c <HAL_DMA_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800129c:	f7ff fcb6 	bl	8000c0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a20      	ldr	r2, [pc, #128]	; (8001324 <HAL_UART_MspInit+0x150>)
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38
 80012a6:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <HAL_UART_MspInit+0x150>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ac:	e030      	b.n	8001310 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <HAL_UART_MspInit+0x158>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d12b      	bne.n	8001310 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_UART_MspInit+0x148>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <HAL_UART_MspInit+0x148>)
 80012c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_UART_MspInit+0x148>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_UART_MspInit+0x148>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_UART_MspInit+0x148>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_UART_MspInit+0x148>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012f0:	230c      	movs	r3, #12
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001300:	2307      	movs	r3, #7
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_UART_MspInit+0x14c>)
 800130c:	f000 fdc0 	bl	8001e90 <HAL_GPIO_Init>
}
 8001310:	bf00      	nop
 8001312:	3730      	adds	r7, #48	; 0x30
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40011000 	.word	0x40011000
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000
 8001324:	200001b0 	.word	0x200001b0
 8001328:	40026440 	.word	0x40026440
 800132c:	40004400 	.word	0x40004400

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001336:	490e      	ldr	r1, [pc, #56]	; (8001370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800134c:	4c0b      	ldr	r4, [pc, #44]	; (800137c <LoopFillZerobss+0x26>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800135a:	f7ff fed5 	bl	8001108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f002 fd63 	bl	8003e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff fb77 	bl	8000a54 <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001368:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001374:	08005314 	.word	0x08005314
  ldr r2, =_sbss
 8001378:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800137c:	200002ac 	.word	0x200002ac

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f92b 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fd72 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f943 	bl	8001672 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f90b 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	20000298 	.word	0x20000298

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000298 	.word	0x20000298

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	; (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff29 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff3e 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff8e 	bl	800155c <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5d 	bl	8001508 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff31 	bl	80014cc <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffa2 	bl	80015c4 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff feda 	bl	8001450 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e099      	b.n	80017dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c8:	e00f      	b.n	80016ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ca:	f7ff fec1 	bl	8001450 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d908      	bls.n	80016ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2220      	movs	r2, #32
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e078      	b.n	80017dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e8      	bne.n	80016ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_DMA_Init+0x158>)
 8001704:	4013      	ands	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001716:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2b04      	cmp	r3, #4
 8001742:	d107      	bne.n	8001754 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4313      	orrs	r3, r2
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f023 0307 	bic.w	r3, r3, #7
 800176a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	2b04      	cmp	r3, #4
 800177c:	d117      	bne.n	80017ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00e      	beq.n	80017ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fb01 	bl	8001d98 <DMA_CheckFifoParam>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2240      	movs	r2, #64	; 0x40
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017aa:	2301      	movs	r3, #1
 80017ac:	e016      	b.n	80017dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fab8 	bl	8001d2c <DMA_CalcBaseAndBitshift>
 80017bc:	4603      	mov	r3, r0
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	223f      	movs	r2, #63	; 0x3f
 80017c6:	409a      	lsls	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	f010803f 	.word	0xf010803f

080017e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_DMA_Start_IT+0x26>
 800180a:	2302      	movs	r3, #2
 800180c:	e040      	b.n	8001890 <HAL_DMA_Start_IT+0xa8>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d12f      	bne.n	8001882 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2202      	movs	r2, #2
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fa4a 	bl	8001cd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	223f      	movs	r2, #63	; 0x3f
 8001842:	409a      	lsls	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0216 	orr.w	r2, r2, #22
 8001856:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0208 	orr.w	r2, r2, #8
 800186e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e005      	b.n	800188e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800188a:	2302      	movs	r3, #2
 800188c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800188e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018a6:	f7ff fdd3 	bl	8001450 <HAL_GetTick>
 80018aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d008      	beq.n	80018ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e052      	b.n	8001970 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0216 	bic.w	r2, r2, #22
 80018d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <HAL_DMA_Abort+0x62>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0208 	bic.w	r2, r2, #8
 8001908:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191a:	e013      	b.n	8001944 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800191c:	f7ff fd98 	bl	8001450 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b05      	cmp	r3, #5
 8001928:	d90c      	bls.n	8001944 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2220      	movs	r2, #32
 800192e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2203      	movs	r2, #3
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e015      	b.n	8001970 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1e4      	bne.n	800191c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	223f      	movs	r2, #63	; 0x3f
 8001958:	409a      	lsls	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d004      	beq.n	8001996 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00c      	b.n	80019b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2205      	movs	r2, #5
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019c8:	4b92      	ldr	r3, [pc, #584]	; (8001c14 <HAL_DMA_IRQHandler+0x258>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a92      	ldr	r2, [pc, #584]	; (8001c18 <HAL_DMA_IRQHandler+0x25c>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0a9b      	lsrs	r3, r3, #10
 80019d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	2208      	movs	r2, #8
 80019e8:	409a      	lsls	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d01a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0204 	bic.w	r2, r2, #4
 8001a0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	2208      	movs	r2, #8
 8001a16:	409a      	lsls	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d012      	beq.n	8001a5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	f043 0202 	orr.w	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a62:	2204      	movs	r2, #4
 8001a64:	409a      	lsls	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d012      	beq.n	8001a94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	2204      	movs	r2, #4
 8001a82:	409a      	lsls	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f043 0204 	orr.w	r2, r3, #4
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	2210      	movs	r2, #16
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d043      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d03c      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d018      	beq.n	8001afe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d108      	bne.n	8001aec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d024      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
 8001aea:	e01f      	b.n	8001b2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01b      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
 8001afc:	e016      	b.n	8001b2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0208 	bic.w	r2, r2, #8
 8001b1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	2220      	movs	r2, #32
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 808e 	beq.w	8001c5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8086 	beq.w	8001c5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	2220      	movs	r2, #32
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d136      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0216 	bic.w	r2, r2, #22
 8001b74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d103      	bne.n	8001b96 <HAL_DMA_IRQHandler+0x1da>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0208 	bic.w	r2, r2, #8
 8001ba4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	223f      	movs	r2, #63	; 0x3f
 8001bac:	409a      	lsls	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d07d      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	4798      	blx	r3
        }
        return;
 8001bd2:	e078      	b.n	8001cc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d01c      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d108      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d030      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
 8001c00:	e02b      	b.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d027      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
 8001c12:	e022      	b.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
 8001c14:	20000000 	.word	0x20000000
 8001c18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0210 	bic.w	r2, r2, #16
 8001c38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d032      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d022      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2205      	movs	r2, #5
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d307      	bcc.n	8001ca2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f2      	bne.n	8001c86 <HAL_DMA_IRQHandler+0x2ca>
 8001ca0:	e000      	b.n	8001ca4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ca2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
 8001cc4:	e000      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cc6:	bf00      	nop
    }
  }
}
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop

08001cd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b40      	cmp	r3, #64	; 0x40
 8001cfc:	d108      	bne.n	8001d10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d0e:	e007      	b.n	8001d20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	60da      	str	r2, [r3, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3b10      	subs	r3, #16
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <DMA_CalcBaseAndBitshift+0x64>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <DMA_CalcBaseAndBitshift+0x68>)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d909      	bls.n	8001d6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d62:	f023 0303 	bic.w	r3, r3, #3
 8001d66:	1d1a      	adds	r2, r3, #4
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d6c:	e007      	b.n	8001d7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	aaaaaaab 	.word	0xaaaaaaab
 8001d94:	080051b0 	.word	0x080051b0

08001d98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11f      	bne.n	8001df2 <DMA_CheckFifoParam+0x5a>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d856      	bhi.n	8001e66 <DMA_CheckFifoParam+0xce>
 8001db8:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <DMA_CheckFifoParam+0x28>)
 8001dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbe:	bf00      	nop
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001de3 	.word	0x08001de3
 8001dc8:	08001dd1 	.word	0x08001dd1
 8001dcc:	08001e67 	.word	0x08001e67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d046      	beq.n	8001e6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de0:	e043      	b.n	8001e6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dea:	d140      	bne.n	8001e6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df0:	e03d      	b.n	8001e6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfa:	d121      	bne.n	8001e40 <DMA_CheckFifoParam+0xa8>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d837      	bhi.n	8001e72 <DMA_CheckFifoParam+0xda>
 8001e02:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <DMA_CheckFifoParam+0x70>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e1f 	.word	0x08001e1f
 8001e10:	08001e19 	.word	0x08001e19
 8001e14:	08001e31 	.word	0x08001e31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1c:	e030      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d025      	beq.n	8001e76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e2e:	e022      	b.n	8001e76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e38:	d11f      	bne.n	8001e7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e3e:	e01c      	b.n	8001e7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d903      	bls.n	8001e4e <DMA_CheckFifoParam+0xb6>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d003      	beq.n	8001e54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e4c:	e018      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
      break;
 8001e52:	e015      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      break;
 8001e64:	e00b      	b.n	8001e7e <DMA_CheckFifoParam+0xe6>
      break;
 8001e66:	bf00      	nop
 8001e68:	e00a      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6a:	bf00      	nop
 8001e6c:	e008      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
 8001e70:	e006      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e72:	bf00      	nop
 8001e74:	e004      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e76:	bf00      	nop
 8001e78:	e002      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e7a:	bf00      	nop
 8001e7c:	e000      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e159      	b.n	8002160 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8148 	bne.w	800215a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d005      	beq.n	8001ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d130      	bne.n	8001f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 0201 	and.w	r2, r3, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d017      	beq.n	8001f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d123      	bne.n	8001fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80a2 	beq.w	800215a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b57      	ldr	r3, [pc, #348]	; (8002178 <HAL_GPIO_Init+0x2e8>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a56      	ldr	r2, [pc, #344]	; (8002178 <HAL_GPIO_Init+0x2e8>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b54      	ldr	r3, [pc, #336]	; (8002178 <HAL_GPIO_Init+0x2e8>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002032:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_GPIO_Init+0x2ec>)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a49      	ldr	r2, [pc, #292]	; (8002180 <HAL_GPIO_Init+0x2f0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x202>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a48      	ldr	r2, [pc, #288]	; (8002184 <HAL_GPIO_Init+0x2f4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x1fe>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a47      	ldr	r2, [pc, #284]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x1fa>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a46      	ldr	r2, [pc, #280]	; (800218c <HAL_GPIO_Init+0x2fc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x1f6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a45      	ldr	r2, [pc, #276]	; (8002190 <HAL_GPIO_Init+0x300>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x1f2>
 800207e:	2304      	movs	r3, #4
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x204>
 8002082:	2307      	movs	r3, #7
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x204>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x204>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x204>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x204>
 8002092:	2300      	movs	r3, #0
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a4:	4935      	ldr	r1, [pc, #212]	; (800217c <HAL_GPIO_Init+0x2ec>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b2:	4b38      	ldr	r3, [pc, #224]	; (8002194 <HAL_GPIO_Init+0x304>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d6:	4a2f      	ldr	r2, [pc, #188]	; (8002194 <HAL_GPIO_Init+0x304>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_GPIO_Init+0x304>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002100:	4a24      	ldr	r2, [pc, #144]	; (8002194 <HAL_GPIO_Init+0x304>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_GPIO_Init+0x304>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212a:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <HAL_GPIO_Init+0x304>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002130:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_GPIO_Init+0x304>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002154:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_GPIO_Init+0x304>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	f67f aea2 	bls.w	8001eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40013800 	.word	0x40013800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40013c00 	.word	0x40013c00

08002198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e001      	b.n	80021ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fce6 	bl	8000bec <HAL_GPIO_EXTI_Callback>
  }
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40013c00 	.word	0x40013c00

0800222c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e264      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d075      	beq.n	8002336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224a:	4ba3      	ldr	r3, [pc, #652]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d00c      	beq.n	8002270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4ba0      	ldr	r3, [pc, #640]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800225e:	2b08      	cmp	r3, #8
 8002260:	d112      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002262:	4b9d      	ldr	r3, [pc, #628]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226e:	d10b      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4b99      	ldr	r3, [pc, #612]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d05b      	beq.n	8002334 <HAL_RCC_OscConfig+0x108>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d157      	bne.n	8002334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e23f      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d106      	bne.n	80022a0 <HAL_RCC_OscConfig+0x74>
 8002292:	4b91      	ldr	r3, [pc, #580]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a90      	ldr	r2, [pc, #576]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e01d      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x98>
 80022aa:	4b8b      	ldr	r3, [pc, #556]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a8a      	ldr	r2, [pc, #552]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a87      	ldr	r2, [pc, #540]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0xb0>
 80022c4:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a83      	ldr	r2, [pc, #524]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff f8b4 	bl	8001450 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f8b0 	bl	8001450 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e204      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0xc0>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f8a0 	bl	8001450 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff f89c 	bl	8001450 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1f0      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	4b6c      	ldr	r3, [pc, #432]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0xe8>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d063      	beq.n	800240a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002342:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b62      	ldr	r3, [pc, #392]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002356:	2b08      	cmp	r3, #8
 8002358:	d11c      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d116      	bne.n	8002394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d001      	beq.n	800237e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e1c4      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4952      	ldr	r1, [pc, #328]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	e03a      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <HAL_RCC_OscConfig+0x2b0>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7ff f855 	bl	8001450 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023aa:	f7ff f851 	bl	8001450 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e1a5      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4940      	ldr	r1, [pc, #256]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_RCC_OscConfig+0x2b0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7ff f834 	bl	8001450 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ec:	f7ff f830 	bl	8001450 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e184      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d030      	beq.n	8002478 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_OscConfig+0x2b4>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7ff f814 	bl	8001450 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff f810 	bl	8001450 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e164      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x200>
 800244a:	e015      	b.n	8002478 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_OscConfig+0x2b4>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe fffd 	bl	8001450 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245a:	f7fe fff9 	bl	8001450 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e14d      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a0 	beq.w	80025c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_OscConfig+0x2b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d121      	bne.n	8002506 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_RCC_OscConfig+0x2b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_RCC_OscConfig+0x2b8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe ffbf 	bl	8001450 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e011      	b.n	80024fa <HAL_RCC_OscConfig+0x2ce>
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470000 	.word	0x42470000
 80024e0:	42470e80 	.word	0x42470e80
 80024e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7fe ffb2 	bl	8001450 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e106      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b85      	ldr	r3, [pc, #532]	; (8002710 <HAL_RCC_OscConfig+0x4e4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x2f0>
 800250e:	4b81      	ldr	r3, [pc, #516]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a80      	ldr	r2, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	e01c      	b.n	8002556 <HAL_RCC_OscConfig+0x32a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x312>
 8002524:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a7a      	ldr	r2, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	4b78      	ldr	r3, [pc, #480]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	4a77      	ldr	r2, [pc, #476]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	; 0x70
 800253c:	e00b      	b.n	8002556 <HAL_RCC_OscConfig+0x32a>
 800253e:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a74      	ldr	r2, [pc, #464]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6713      	str	r3, [r2, #112]	; 0x70
 800254a:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a71      	ldr	r2, [pc, #452]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d015      	beq.n	800258a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe ff77 	bl	8001450 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe ff73 	bl	8001450 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0c5      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ee      	beq.n	8002566 <HAL_RCC_OscConfig+0x33a>
 8002588:	e014      	b.n	80025b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe ff61 	bl	8001450 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe ff5d 	bl	8001450 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0af      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	4b5a      	ldr	r3, [pc, #360]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b56      	ldr	r3, [pc, #344]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a55      	ldr	r2, [pc, #340]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 809b 	beq.w	8002706 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d05c      	beq.n	8002696 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d141      	bne.n	8002668 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b4c      	ldr	r3, [pc, #304]	; (8002718 <HAL_RCC_OscConfig+0x4ec>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7fe ff31 	bl	8001450 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f2:	f7fe ff2d 	bl	8001450 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e081      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69da      	ldr	r2, [r3, #28]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	019b      	lsls	r3, r3, #6
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	085b      	lsrs	r3, r3, #1
 8002628:	3b01      	subs	r3, #1
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	4937      	ldr	r1, [pc, #220]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <HAL_RCC_OscConfig+0x4ec>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe ff06 	bl	8001450 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe ff02 	bl	8001450 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e056      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x41c>
 8002666:	e04e      	b.n	8002706 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCC_OscConfig+0x4ec>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7fe feef 	bl	8001450 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe feeb 	bl	8001450 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e03f      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x44a>
 8002694:	e037      	b.n	8002706 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e032      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <HAL_RCC_OscConfig+0x4e8>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d028      	beq.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d121      	bne.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d11a      	bne.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026d2:	4013      	ands	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026da:	4293      	cmp	r3, r2
 80026dc:	d111      	bne.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40007000 	.word	0x40007000
 8002714:	40023800 	.word	0x40023800
 8002718:	42470060 	.word	0x42470060

0800271c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0cc      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d90c      	bls.n	8002758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a58      	ldr	r2, [pc, #352]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800277a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d044      	beq.n	800283c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d119      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d003      	beq.n	80027da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e06f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e067      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4934      	ldr	r1, [pc, #208]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800280c:	f7fe fe20 	bl	8001450 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7fe fe1c 	bl	8001450 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e04f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 020c 	and.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	429a      	cmp	r2, r3
 800283a:	d1eb      	bne.n	8002814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d20c      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f821 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	490a      	ldr	r1, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fd80 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08005198 	.word	0x08005198
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	2300      	movs	r3, #0
 80028fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002900:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d00d      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x40>
 800290c:	2b08      	cmp	r3, #8
 800290e:	f200 80bd 	bhi.w	8002a8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x34>
 8002916:	2b04      	cmp	r3, #4
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x3a>
 800291a:	e0b7      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800291c:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800291e:	60bb      	str	r3, [r7, #8]
       break;
 8002920:	e0b7      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002922:	4b61      	ldr	r3, [pc, #388]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002924:	60bb      	str	r3, [r7, #8]
      break;
 8002926:	e0b4      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002928:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002930:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002932:	4b5b      	ldr	r3, [pc, #364]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d04d      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293e:	4b58      	ldr	r3, [pc, #352]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	461a      	mov	r2, r3
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	ea02 0800 	and.w	r8, r2, r0
 8002956:	ea03 0901 	and.w	r9, r3, r1
 800295a:	4640      	mov	r0, r8
 800295c:	4649      	mov	r1, r9
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	014b      	lsls	r3, r1, #5
 8002968:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800296c:	0142      	lsls	r2, r0, #5
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	ebb0 0008 	subs.w	r0, r0, r8
 8002976:	eb61 0109 	sbc.w	r1, r1, r9
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	018b      	lsls	r3, r1, #6
 8002984:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002988:	0182      	lsls	r2, r0, #6
 800298a:	1a12      	subs	r2, r2, r0
 800298c:	eb63 0301 	sbc.w	r3, r3, r1
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	00d9      	lsls	r1, r3, #3
 800299a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800299e:	00d0      	lsls	r0, r2, #3
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	eb12 0208 	adds.w	r2, r2, r8
 80029a8:	eb43 0309 	adc.w	r3, r3, r9
 80029ac:	f04f 0000 	mov.w	r0, #0
 80029b0:	f04f 0100 	mov.w	r1, #0
 80029b4:	0259      	lsls	r1, r3, #9
 80029b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029ba:	0250      	lsls	r0, r2, #9
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f7fd fc70 	bl	80002b0 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e04a      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	461a      	mov	r2, r3
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	ea02 0400 	and.w	r4, r2, r0
 80029f2:	ea03 0501 	and.w	r5, r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	014b      	lsls	r3, r1, #5
 8002a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a08:	0142      	lsls	r2, r0, #5
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	1b00      	subs	r0, r0, r4
 8002a10:	eb61 0105 	sbc.w	r1, r1, r5
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	018b      	lsls	r3, r1, #6
 8002a1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a22:	0182      	lsls	r2, r0, #6
 8002a24:	1a12      	subs	r2, r2, r0
 8002a26:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2a:	f04f 0000 	mov.w	r0, #0
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	00d9      	lsls	r1, r3, #3
 8002a34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a38:	00d0      	lsls	r0, r2, #3
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	1912      	adds	r2, r2, r4
 8002a40:	eb45 0303 	adc.w	r3, r5, r3
 8002a44:	f04f 0000 	mov.w	r0, #0
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	0299      	lsls	r1, r3, #10
 8002a4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a52:	0290      	lsls	r0, r2, #10
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	f7fd fc24 	bl	80002b0 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	60bb      	str	r3, [r7, #8]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a8e:	60bb      	str	r3, [r7, #8]
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	68bb      	ldr	r3, [r7, #8]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac8:	f7ff fff0 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0a9b      	lsrs	r3, r3, #10
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	080051a8 	.word	0x080051a8

08002aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002af0:	f7ff ffdc 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	0b5b      	lsrs	r3, r3, #13
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4903      	ldr	r1, [pc, #12]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	080051a8 	.word	0x080051a8

08002b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e03f      	b.n	8002ba6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fe fb4a 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2224      	movs	r2, #36	; 0x24
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 ff97 	bl	8003a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b08a      	sub	sp, #40	; 0x28
 8002bb2:	af02      	add	r7, sp, #8
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d17c      	bne.n	8002cc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_UART_Transmit+0x2c>
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e075      	b.n	8002cca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_UART_Transmit+0x3e>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e06e      	b.n	8002cca <HAL_UART_Transmit+0x11c>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2221      	movs	r2, #33	; 0x21
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c02:	f7fe fc25 	bl	8001450 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1c:	d108      	bne.n	8002c30 <HAL_UART_Transmit+0x82>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d104      	bne.n	8002c30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	e003      	b.n	8002c38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c40:	e02a      	b.n	8002c98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2180      	movs	r1, #128	; 0x80
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fc53 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e036      	b.n	8002cca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10b      	bne.n	8002c7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3302      	adds	r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e007      	b.n	8002c8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	3301      	adds	r3, #1
 8002c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1cf      	bne.n	8002c42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fc23 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e006      	b.n	8002cca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e000      	b.n	8002cca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cc8:	2302      	movs	r3, #2
  }
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b08c      	sub	sp, #48	; 0x30
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d152      	bne.n	8002d92 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e04b      	b.n	8002d94 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e044      	b.n	8002d94 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fc58 	bl	80035d4 <UART_Start_Receive_DMA>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d12c      	bne.n	8002d8c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d125      	bne.n	8002d86 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f043 0310 	orr.w	r3, r3, #16
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d70:	627a      	str	r2, [r7, #36]	; 0x24
 8002d72:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d74:	6a39      	ldr	r1, [r7, #32]
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	e841 2300 	strex	r3, r2, [r1]
 8002d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e5      	bne.n	8002d50 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002d84:	e002      	b.n	8002d8c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d90:	e000      	b.n	8002d94 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3730      	adds	r7, #48	; 0x30
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b0ba      	sub	sp, #232	; 0xe8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_UART_IRQHandler+0x66>
 8002dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fd8b 	bl	8003916 <UART_Receive_IT>
      return;
 8002e00:	e256      	b.n	80032b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80de 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x22c>
 8002e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80d1 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_UART_IRQHandler+0xae>
 8002e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_UART_IRQHandler+0xd2>
 8002e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_UART_IRQHandler+0xf6>
 8002e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f043 0204 	orr.w	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d011      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x126>
 8002e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0208 	orr.w	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 81ed 	beq.w	80032a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_UART_IRQHandler+0x14e>
 8002ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fd16 	bl	8003916 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <HAL_UART_IRQHandler+0x17a>
 8002f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d04f      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fc1e 	bl	8003758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b40      	cmp	r3, #64	; 0x40
 8002f28:	d141      	bne.n	8002fae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3314      	adds	r3, #20
 8002f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1d9      	bne.n	8002f2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d013      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	4a7d      	ldr	r2, [pc, #500]	; (8003178 <HAL_UART_IRQHandler+0x3dc>)
 8002f84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fcf4 	bl	8001978 <HAL_DMA_Abort_IT>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	e00e      	b.n	8002fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f9a4 	bl	80032f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fac:	e00a      	b.n	8002fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9a0 	bl	80032f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb4:	e006      	b.n	8002fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f99c 	bl	80032f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fc2:	e170      	b.n	80032a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc4:	bf00      	nop
    return;
 8002fc6:	e16e      	b.n	80032a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	f040 814a 	bne.w	8003266 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8143 	beq.w	8003266 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 813c 	beq.w	8003266 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	f040 80b4 	bne.w	800317c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003020:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8140 	beq.w	80032aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800302e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003032:	429a      	cmp	r2, r3
 8003034:	f080 8139 	bcs.w	80032aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800303e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304a:	f000 8088 	beq.w	800315e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800306c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800307a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800307e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003086:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1d9      	bne.n	800304e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3314      	adds	r3, #20
 80030a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3314      	adds	r3, #20
 80030ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e1      	bne.n	800309a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3314      	adds	r3, #20
 80030dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e3      	bne.n	80030d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800312c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312e:	f023 0310 	bic.w	r3, r3, #16
 8003132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003140:	65ba      	str	r2, [r7, #88]	; 0x58
 8003142:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800314e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e3      	bne.n	800311c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fb9d 	bl	8001898 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003166:	b29b      	uxth	r3, r3
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	b29b      	uxth	r3, r3
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fd2a 	bl	8000bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003174:	e099      	b.n	80032aa <HAL_UART_IRQHandler+0x50e>
 8003176:	bf00      	nop
 8003178:	0800381f 	.word	0x0800381f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003184:	b29b      	uxth	r3, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 808b 	beq.w	80032ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8086 	beq.w	80032ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031c6:	647a      	str	r2, [r7, #68]	; 0x44
 80031c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e3      	bne.n	80031a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3314      	adds	r3, #20
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	623b      	str	r3, [r7, #32]
   return(result);
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3314      	adds	r3, #20
 80031fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031fe:	633a      	str	r2, [r7, #48]	; 0x30
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e3      	bne.n	80031da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0310 	bic.w	r3, r3, #16
 8003236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003244:	61fa      	str	r2, [r7, #28]
 8003246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	69b9      	ldr	r1, [r7, #24]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	617b      	str	r3, [r7, #20]
   return(result);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e3      	bne.n	8003220 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd fcb2 	bl	8000bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003264:	e023      	b.n	80032ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_UART_IRQHandler+0x4ea>
 8003272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fae1 	bl	8003846 <UART_Transmit_IT>
    return;
 8003284:	e014      	b.n	80032b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00e      	beq.n	80032b0 <HAL_UART_IRQHandler+0x514>
 8003292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fb21 	bl	80038e6 <UART_EndTransmit_IT>
    return;
 80032a4:	e004      	b.n	80032b0 <HAL_UART_IRQHandler+0x514>
    return;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <HAL_UART_IRQHandler+0x514>
      return;
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <HAL_UART_IRQHandler+0x514>
      return;
 80032ae:	bf00      	nop
  }
}
 80032b0:	37e8      	adds	r7, #232	; 0xe8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop

080032b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b09c      	sub	sp, #112	; 0x70
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d172      	bne.n	800340a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003326:	2200      	movs	r2, #0
 8003328:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800332a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800333a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003340:	66bb      	str	r3, [r7, #104]	; 0x68
 8003342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800334a:	65ba      	str	r2, [r7, #88]	; 0x58
 800334c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e5      	bne.n	800332a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3314      	adds	r3, #20
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	667b      	str	r3, [r7, #100]	; 0x64
 8003376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800337e:	647a      	str	r2, [r7, #68]	; 0x44
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e5      	bne.n	800335e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	623b      	str	r3, [r7, #32]
   return(result);
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a8:	663b      	str	r3, [r7, #96]	; 0x60
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3314      	adds	r3, #20
 80033b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033b2:	633a      	str	r2, [r7, #48]	; 0x30
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e5      	bne.n	8003392 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d119      	bne.n	800340a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f023 0310 	bic.w	r3, r3, #16
 80033ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033f6:	61fa      	str	r2, [r7, #28]
 80033f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	617b      	str	r3, [r7, #20]
   return(result);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e5      	bne.n	80033d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	2b01      	cmp	r3, #1
 8003410:	d106      	bne.n	8003420 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003416:	4619      	mov	r1, r3
 8003418:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800341a:	f7fd fbd5 	bl	8000bc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800341e:	e002      	b.n	8003426 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003420:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003422:	f7ff ff53 	bl	80032cc <HAL_UART_RxCpltCallback>
}
 8003426:	bf00      	nop
 8003428:	3770      	adds	r7, #112	; 0x70
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	2b01      	cmp	r3, #1
 8003442:	d108      	bne.n	8003456 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	b29b      	uxth	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7fd fbba 	bl	8000bc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003454:	e002      	b.n	800345c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ff42 	bl	80032e0 <HAL_UART_RxHalfCpltCallback>
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b21      	cmp	r3, #33	; 0x21
 8003496:	d108      	bne.n	80034aa <UART_DMAError+0x46>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2200      	movs	r2, #0
 80034a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80034a4:	68b8      	ldr	r0, [r7, #8]
 80034a6:	f000 f92f 	bl	8003708 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b22      	cmp	r3, #34	; 0x22
 80034ca:	d108      	bne.n	80034de <UART_DMAError+0x7a>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2200      	movs	r2, #0
 80034d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80034d8:	68b8      	ldr	r0, [r7, #8]
 80034da:	f000 f93d 	bl	8003758 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f043 0210 	orr.w	r2, r3, #16
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	f7ff ff02 	bl	80032f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b090      	sub	sp, #64	; 0x40
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003508:	e050      	b.n	80035ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d04c      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x30>
 8003518:	f7fd ff9a 	bl	8001450 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003524:	429a      	cmp	r2, r3
 8003526:	d241      	bcs.n	80035ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003548:	637a      	str	r2, [r7, #52]	; 0x34
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800354e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e5      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3314      	adds	r3, #20
 8003562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	613b      	str	r3, [r7, #16]
   return(result);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3314      	adds	r3, #20
 800357a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800357c:	623a      	str	r2, [r7, #32]
 800357e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	69f9      	ldr	r1, [r7, #28]
 8003582:	6a3a      	ldr	r2, [r7, #32]
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	61bb      	str	r3, [r7, #24]
   return(result);
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e5      	bne.n	800355c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e00f      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d09f      	beq.n	800350a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3740      	adds	r7, #64	; 0x40
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b098      	sub	sp, #96	; 0x60
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	4613      	mov	r3, r2
 80035e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2222      	movs	r2, #34	; 0x22
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	4a3e      	ldr	r2, [pc, #248]	; (80036fc <UART_Start_Receive_DMA+0x128>)
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	4a3d      	ldr	r2, [pc, #244]	; (8003700 <UART_Start_Receive_DMA+0x12c>)
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	4a3c      	ldr	r2, [pc, #240]	; (8003704 <UART_Start_Receive_DMA+0x130>)
 8003612:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	2200      	movs	r2, #0
 800361a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	f7fe f8d8 	bl	80017e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	65bb      	str	r3, [r7, #88]	; 0x58
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003676:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800367c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e5      	bne.n	8003656 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3314      	adds	r3, #20
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	657b      	str	r3, [r7, #84]	; 0x54
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3314      	adds	r3, #20
 80036a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e5      	bne.n	800368a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3314      	adds	r3, #20
 80036c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	617b      	str	r3, [r7, #20]
   return(result);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d4:	653b      	str	r3, [r7, #80]	; 0x50
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3314      	adds	r3, #20
 80036dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036de:	627a      	str	r2, [r7, #36]	; 0x24
 80036e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6a39      	ldr	r1, [r7, #32]
 80036e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e5      	bne.n	80036be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3760      	adds	r7, #96	; 0x60
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	08003309 	.word	0x08003309
 8003700:	0800342f 	.word	0x0800342f
 8003704:	08003465 	.word	0x08003465

08003708 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	61ba      	str	r2, [r7, #24]
 8003732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	6979      	ldr	r1, [r7, #20]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	613b      	str	r3, [r7, #16]
   return(result);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e5      	bne.n	8003710 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800374c:	bf00      	nop
 800374e:	3724      	adds	r7, #36	; 0x24
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003758:	b480      	push	{r7}
 800375a:	b095      	sub	sp, #84	; 0x54
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	330c      	adds	r3, #12
 800377e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003780:	643a      	str	r2, [r7, #64]	; 0x40
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e5      	bne.n	8003760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3314      	adds	r3, #20
 800379a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3314      	adds	r3, #20
 80037b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e5      	bne.n	8003794 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d119      	bne.n	8003804 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	330c      	adds	r3, #12
 80037d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	60bb      	str	r3, [r7, #8]
   return(result);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f023 0310 	bic.w	r3, r3, #16
 80037e6:	647b      	str	r3, [r7, #68]	; 0x44
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037f0:	61ba      	str	r2, [r7, #24]
 80037f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6979      	ldr	r1, [r7, #20]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	613b      	str	r3, [r7, #16]
   return(result);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e5      	bne.n	80037d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003812:	bf00      	nop
 8003814:	3754      	adds	r7, #84	; 0x54
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff fd5b 	bl	80032f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b21      	cmp	r3, #33	; 0x21
 8003858:	d13e      	bne.n	80038d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	d114      	bne.n	800388e <UART_Transmit_IT+0x48>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d110      	bne.n	800388e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003880:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	1c9a      	adds	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	621a      	str	r2, [r3, #32]
 800388c:	e008      	b.n	80038a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	1c59      	adds	r1, r3, #1
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6211      	str	r1, [r2, #32]
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4619      	mov	r1, r3
 80038ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10f      	bne.n	80038d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fcd6 	bl	80032b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b08c      	sub	sp, #48	; 0x30
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b22      	cmp	r3, #34	; 0x22
 8003928:	f040 80ab 	bne.w	8003a82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003934:	d117      	bne.n	8003966 <UART_Receive_IT+0x50>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d113      	bne.n	8003966 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b29b      	uxth	r3, r3
 8003950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003954:	b29a      	uxth	r2, r3
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	1c9a      	adds	r2, r3, #2
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
 8003964:	e026      	b.n	80039b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800396c:	2300      	movs	r3, #0
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	d007      	beq.n	800398a <UART_Receive_IT+0x74>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <UART_Receive_IT+0x82>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e008      	b.n	80039aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29b      	uxth	r3, r3
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4619      	mov	r1, r3
 80039c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d15a      	bne.n	8003a7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0220 	bic.w	r2, r2, #32
 80039d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d135      	bne.n	8003a74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f023 0310 	bic.w	r3, r3, #16
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	623a      	str	r2, [r7, #32]
 8003a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	69f9      	ldr	r1, [r7, #28]
 8003a34:	6a3a      	ldr	r2, [r7, #32]
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e5      	bne.n	8003a0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d10a      	bne.n	8003a66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7fd f8ab 	bl	8000bc8 <HAL_UARTEx_RxEventCallback>
 8003a72:	e002      	b.n	8003a7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fc29 	bl	80032cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e002      	b.n	8003a84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	b09f      	sub	sp, #124	; 0x7c
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa2:	68d9      	ldr	r1, [r3, #12]
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	ea40 0301 	orr.w	r3, r0, r1
 8003aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ad0:	f021 010c 	bic.w	r1, r1, #12
 8003ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ada:	430b      	orrs	r3, r1
 8003adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aea:	6999      	ldr	r1, [r3, #24]
 8003aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	ea40 0301 	orr.w	r3, r0, r1
 8003af4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4bc5      	ldr	r3, [pc, #788]	; (8003e10 <UART_SetConfig+0x384>)
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d004      	beq.n	8003b0a <UART_SetConfig+0x7e>
 8003b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4bc3      	ldr	r3, [pc, #780]	; (8003e14 <UART_SetConfig+0x388>)
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d103      	bne.n	8003b12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b0a:	f7fe ffef 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 8003b0e:	6778      	str	r0, [r7, #116]	; 0x74
 8003b10:	e002      	b.n	8003b18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b12:	f7fe ffd7 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8003b16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b20:	f040 80b6 	bne.w	8003c90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b26:	461c      	mov	r4, r3
 8003b28:	f04f 0500 	mov.w	r5, #0
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	462b      	mov	r3, r5
 8003b30:	1891      	adds	r1, r2, r2
 8003b32:	6439      	str	r1, [r7, #64]	; 0x40
 8003b34:	415b      	adcs	r3, r3
 8003b36:	647b      	str	r3, [r7, #68]	; 0x44
 8003b38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b3c:	1912      	adds	r2, r2, r4
 8003b3e:	eb45 0303 	adc.w	r3, r5, r3
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	00d9      	lsls	r1, r3, #3
 8003b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b50:	00d0      	lsls	r0, r2, #3
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	1911      	adds	r1, r2, r4
 8003b58:	6639      	str	r1, [r7, #96]	; 0x60
 8003b5a:	416b      	adcs	r3, r5
 8003b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b78:	f7fc fb9a 	bl	80002b0 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4ba5      	ldr	r3, [pc, #660]	; (8003e18 <UART_SetConfig+0x38c>)
 8003b82:	fba3 2302 	umull	r2, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	011e      	lsls	r6, r3, #4
 8003b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8c:	461c      	mov	r4, r3
 8003b8e:	f04f 0500 	mov.w	r5, #0
 8003b92:	4622      	mov	r2, r4
 8003b94:	462b      	mov	r3, r5
 8003b96:	1891      	adds	r1, r2, r2
 8003b98:	6339      	str	r1, [r7, #48]	; 0x30
 8003b9a:	415b      	adcs	r3, r3
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ba2:	1912      	adds	r2, r2, r4
 8003ba4:	eb45 0303 	adc.w	r3, r5, r3
 8003ba8:	f04f 0000 	mov.w	r0, #0
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	00d9      	lsls	r1, r3, #3
 8003bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb6:	00d0      	lsls	r0, r2, #3
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	1911      	adds	r1, r2, r4
 8003bbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bc0:	416b      	adcs	r3, r5
 8003bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003bde:	f7fc fb67 	bl	80002b0 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4b8c      	ldr	r3, [pc, #560]	; (8003e18 <UART_SetConfig+0x38c>)
 8003be8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2164      	movs	r1, #100	; 0x64
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a87      	ldr	r2, [pc, #540]	; (8003e18 <UART_SetConfig+0x38c>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c08:	441e      	add	r6, r3
 8003c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	1894      	adds	r4, r2, r2
 8003c18:	623c      	str	r4, [r7, #32]
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c22:	1812      	adds	r2, r2, r0
 8003c24:	eb41 0303 	adc.w	r3, r1, r3
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	f04f 0500 	mov.w	r5, #0
 8003c30:	00dd      	lsls	r5, r3, #3
 8003c32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c36:	00d4      	lsls	r4, r2, #3
 8003c38:	4622      	mov	r2, r4
 8003c3a:	462b      	mov	r3, r5
 8003c3c:	1814      	adds	r4, r2, r0
 8003c3e:	653c      	str	r4, [r7, #80]	; 0x50
 8003c40:	414b      	adcs	r3, r1
 8003c42:	657b      	str	r3, [r7, #84]	; 0x54
 8003c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	61b9      	str	r1, [r7, #24]
 8003c52:	415b      	adcs	r3, r3
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c5e:	f7fc fb27 	bl	80002b0 <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <UART_SetConfig+0x38c>)
 8003c68:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	2164      	movs	r1, #100	; 0x64
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3332      	adds	r3, #50	; 0x32
 8003c7a:	4a67      	ldr	r2, [pc, #412]	; (8003e18 <UART_SetConfig+0x38c>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	f003 0207 	and.w	r2, r3, #7
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4432      	add	r2, r6
 8003c8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c8e:	e0b9      	b.n	8003e04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c92:	461c      	mov	r4, r3
 8003c94:	f04f 0500 	mov.w	r5, #0
 8003c98:	4622      	mov	r2, r4
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	6139      	str	r1, [r7, #16]
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ca8:	1912      	adds	r2, r2, r4
 8003caa:	eb45 0303 	adc.w	r3, r5, r3
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	00d9      	lsls	r1, r3, #3
 8003cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cbc:	00d0      	lsls	r0, r2, #3
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	eb12 0804 	adds.w	r8, r2, r4
 8003cc6:	eb43 0905 	adc.w	r9, r3, r5
 8003cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	008b      	lsls	r3, r1, #2
 8003cde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ce2:	0082      	lsls	r2, r0, #2
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	f7fc fae2 	bl	80002b0 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <UART_SetConfig+0x38c>)
 8003cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	011e      	lsls	r6, r3, #4
 8003cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	1894      	adds	r4, r2, r2
 8003d08:	60bc      	str	r4, [r7, #8]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d12:	1812      	adds	r2, r2, r0
 8003d14:	eb41 0303 	adc.w	r3, r1, r3
 8003d18:	f04f 0400 	mov.w	r4, #0
 8003d1c:	f04f 0500 	mov.w	r5, #0
 8003d20:	00dd      	lsls	r5, r3, #3
 8003d22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d26:	00d4      	lsls	r4, r2, #3
 8003d28:	4622      	mov	r2, r4
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	1814      	adds	r4, r2, r0
 8003d2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d30:	414b      	adcs	r3, r1
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d4c:	0082      	lsls	r2, r0, #2
 8003d4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d52:	f7fc faad 	bl	80002b0 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	; (8003e18 <UART_SetConfig+0x38c>)
 8003d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	2164      	movs	r1, #100	; 0x64
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	3332      	adds	r3, #50	; 0x32
 8003d6e:	4a2a      	ldr	r2, [pc, #168]	; (8003e18 <UART_SetConfig+0x38c>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7a:	441e      	add	r6, r3
 8003d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	1894      	adds	r4, r2, r2
 8003d8a:	603c      	str	r4, [r7, #0]
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d94:	1812      	adds	r2, r2, r0
 8003d96:	eb41 0303 	adc.w	r3, r1, r3
 8003d9a:	f04f 0400 	mov.w	r4, #0
 8003d9e:	f04f 0500 	mov.w	r5, #0
 8003da2:	00dd      	lsls	r5, r3, #3
 8003da4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003da8:	00d4      	lsls	r4, r2, #3
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	eb12 0a00 	adds.w	sl, r2, r0
 8003db2:	eb43 0b01 	adc.w	fp, r3, r1
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	008b      	lsls	r3, r1, #2
 8003dca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dce:	0082      	lsls	r2, r0, #2
 8003dd0:	4650      	mov	r0, sl
 8003dd2:	4659      	mov	r1, fp
 8003dd4:	f7fc fa6c 	bl	80002b0 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <UART_SetConfig+0x38c>)
 8003dde:	fba3 1302 	umull	r1, r3, r3, r2
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2164      	movs	r1, #100	; 0x64
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	3332      	adds	r3, #50	; 0x32
 8003df0:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <UART_SetConfig+0x38c>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4432      	add	r2, r6
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	377c      	adds	r7, #124	; 0x7c
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0e:	bf00      	nop
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40011400 	.word	0x40011400
 8003e18:	51eb851f 	.word	0x51eb851f

08003e1c <__errno>:
 8003e1c:	4b01      	ldr	r3, [pc, #4]	; (8003e24 <__errno+0x8>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	2000000c 	.word	0x2000000c

08003e28 <__libc_init_array>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	4d0d      	ldr	r5, [pc, #52]	; (8003e60 <__libc_init_array+0x38>)
 8003e2c:	4c0d      	ldr	r4, [pc, #52]	; (8003e64 <__libc_init_array+0x3c>)
 8003e2e:	1b64      	subs	r4, r4, r5
 8003e30:	10a4      	asrs	r4, r4, #2
 8003e32:	2600      	movs	r6, #0
 8003e34:	42a6      	cmp	r6, r4
 8003e36:	d109      	bne.n	8003e4c <__libc_init_array+0x24>
 8003e38:	4d0b      	ldr	r5, [pc, #44]	; (8003e68 <__libc_init_array+0x40>)
 8003e3a:	4c0c      	ldr	r4, [pc, #48]	; (8003e6c <__libc_init_array+0x44>)
 8003e3c:	f001 f846 	bl	8004ecc <_init>
 8003e40:	1b64      	subs	r4, r4, r5
 8003e42:	10a4      	asrs	r4, r4, #2
 8003e44:	2600      	movs	r6, #0
 8003e46:	42a6      	cmp	r6, r4
 8003e48:	d105      	bne.n	8003e56 <__libc_init_array+0x2e>
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e50:	4798      	blx	r3
 8003e52:	3601      	adds	r6, #1
 8003e54:	e7ee      	b.n	8003e34 <__libc_init_array+0xc>
 8003e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5a:	4798      	blx	r3
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	e7f2      	b.n	8003e46 <__libc_init_array+0x1e>
 8003e60:	0800530c 	.word	0x0800530c
 8003e64:	0800530c 	.word	0x0800530c
 8003e68:	0800530c 	.word	0x0800530c
 8003e6c:	08005310 	.word	0x08005310

08003e70 <memset>:
 8003e70:	4402      	add	r2, r0
 8003e72:	4603      	mov	r3, r0
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d100      	bne.n	8003e7a <memset+0xa>
 8003e78:	4770      	bx	lr
 8003e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7e:	e7f9      	b.n	8003e74 <memset+0x4>

08003e80 <strcpy>:
 8003e80:	4603      	mov	r3, r0
 8003e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e86:	f803 2b01 	strb.w	r2, [r3], #1
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	d1f9      	bne.n	8003e82 <strcpy+0x2>
 8003e8e:	4770      	bx	lr

08003e90 <strtok>:
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <strtok+0x5c>)
 8003e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e94:	681e      	ldr	r6, [r3, #0]
 8003e96:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003e98:	4605      	mov	r5, r0
 8003e9a:	b9fc      	cbnz	r4, 8003edc <strtok+0x4c>
 8003e9c:	2050      	movs	r0, #80	; 0x50
 8003e9e:	9101      	str	r1, [sp, #4]
 8003ea0:	f000 f882 	bl	8003fa8 <malloc>
 8003ea4:	9901      	ldr	r1, [sp, #4]
 8003ea6:	65b0      	str	r0, [r6, #88]	; 0x58
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	b920      	cbnz	r0, 8003eb6 <strtok+0x26>
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <strtok+0x60>)
 8003eae:	4811      	ldr	r0, [pc, #68]	; (8003ef4 <strtok+0x64>)
 8003eb0:	2157      	movs	r1, #87	; 0x57
 8003eb2:	f000 f849 	bl	8003f48 <__assert_func>
 8003eb6:	e9c0 4400 	strd	r4, r4, [r0]
 8003eba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003ebe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003ec2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003ec6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003eca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003ece:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003ed2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003ed6:	6184      	str	r4, [r0, #24]
 8003ed8:	7704      	strb	r4, [r0, #28]
 8003eda:	6244      	str	r4, [r0, #36]	; 0x24
 8003edc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	b002      	add	sp, #8
 8003ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ee8:	f000 b806 	b.w	8003ef8 <__strtok_r>
 8003eec:	2000000c 	.word	0x2000000c
 8003ef0:	080051bc 	.word	0x080051bc
 8003ef4:	080051d3 	.word	0x080051d3

08003ef8 <__strtok_r>:
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	b908      	cbnz	r0, 8003f00 <__strtok_r+0x8>
 8003efc:	6810      	ldr	r0, [r2, #0]
 8003efe:	b188      	cbz	r0, 8003f24 <__strtok_r+0x2c>
 8003f00:	4604      	mov	r4, r0
 8003f02:	4620      	mov	r0, r4
 8003f04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003f08:	460f      	mov	r7, r1
 8003f0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003f0e:	b91e      	cbnz	r6, 8003f18 <__strtok_r+0x20>
 8003f10:	b965      	cbnz	r5, 8003f2c <__strtok_r+0x34>
 8003f12:	6015      	str	r5, [r2, #0]
 8003f14:	4628      	mov	r0, r5
 8003f16:	e005      	b.n	8003f24 <__strtok_r+0x2c>
 8003f18:	42b5      	cmp	r5, r6
 8003f1a:	d1f6      	bne.n	8003f0a <__strtok_r+0x12>
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <__strtok_r+0xa>
 8003f20:	6014      	str	r4, [r2, #0]
 8003f22:	7003      	strb	r3, [r0, #0]
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f26:	461c      	mov	r4, r3
 8003f28:	e00c      	b.n	8003f44 <__strtok_r+0x4c>
 8003f2a:	b915      	cbnz	r5, 8003f32 <__strtok_r+0x3a>
 8003f2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f30:	460e      	mov	r6, r1
 8003f32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003f36:	42ab      	cmp	r3, r5
 8003f38:	d1f7      	bne.n	8003f2a <__strtok_r+0x32>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f3      	beq.n	8003f26 <__strtok_r+0x2e>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003f44:	6014      	str	r4, [r2, #0]
 8003f46:	e7ed      	b.n	8003f24 <__strtok_r+0x2c>

08003f48 <__assert_func>:
 8003f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f4a:	4614      	mov	r4, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <__assert_func+0x2c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4605      	mov	r5, r0
 8003f54:	68d8      	ldr	r0, [r3, #12]
 8003f56:	b14c      	cbz	r4, 8003f6c <__assert_func+0x24>
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <__assert_func+0x30>)
 8003f5a:	9100      	str	r1, [sp, #0]
 8003f5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f60:	4906      	ldr	r1, [pc, #24]	; (8003f7c <__assert_func+0x34>)
 8003f62:	462b      	mov	r3, r5
 8003f64:	f000 f80e 	bl	8003f84 <fiprintf>
 8003f68:	f000 fc8e 	bl	8004888 <abort>
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <__assert_func+0x38>)
 8003f6e:	461c      	mov	r4, r3
 8003f70:	e7f3      	b.n	8003f5a <__assert_func+0x12>
 8003f72:	bf00      	nop
 8003f74:	2000000c 	.word	0x2000000c
 8003f78:	08005234 	.word	0x08005234
 8003f7c:	08005241 	.word	0x08005241
 8003f80:	0800526f 	.word	0x0800526f

08003f84 <fiprintf>:
 8003f84:	b40e      	push	{r1, r2, r3}
 8003f86:	b503      	push	{r0, r1, lr}
 8003f88:	4601      	mov	r1, r0
 8003f8a:	ab03      	add	r3, sp, #12
 8003f8c:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <fiprintf+0x20>)
 8003f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f92:	6800      	ldr	r0, [r0, #0]
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	f000 f8e3 	bl	8004160 <_vfiprintf_r>
 8003f9a:	b002      	add	sp, #8
 8003f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa0:	b003      	add	sp, #12
 8003fa2:	4770      	bx	lr
 8003fa4:	2000000c 	.word	0x2000000c

08003fa8 <malloc>:
 8003fa8:	4b02      	ldr	r3, [pc, #8]	; (8003fb4 <malloc+0xc>)
 8003faa:	4601      	mov	r1, r0
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	f000 b853 	b.w	8004058 <_malloc_r>
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c

08003fb8 <_free_r>:
 8003fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d048      	beq.n	8004050 <_free_r+0x98>
 8003fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc2:	9001      	str	r0, [sp, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8003fca:	bfb8      	it	lt
 8003fcc:	18e4      	addlt	r4, r4, r3
 8003fce:	f000 fe81 	bl	8004cd4 <__malloc_lock>
 8003fd2:	4a20      	ldr	r2, [pc, #128]	; (8004054 <_free_r+0x9c>)
 8003fd4:	9801      	ldr	r0, [sp, #4]
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	4615      	mov	r5, r2
 8003fda:	b933      	cbnz	r3, 8003fea <_free_r+0x32>
 8003fdc:	6063      	str	r3, [r4, #4]
 8003fde:	6014      	str	r4, [r2, #0]
 8003fe0:	b003      	add	sp, #12
 8003fe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fe6:	f000 be7b 	b.w	8004ce0 <__malloc_unlock>
 8003fea:	42a3      	cmp	r3, r4
 8003fec:	d90b      	bls.n	8004006 <_free_r+0x4e>
 8003fee:	6821      	ldr	r1, [r4, #0]
 8003ff0:	1862      	adds	r2, r4, r1
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	bf04      	itt	eq
 8003ff6:	681a      	ldreq	r2, [r3, #0]
 8003ff8:	685b      	ldreq	r3, [r3, #4]
 8003ffa:	6063      	str	r3, [r4, #4]
 8003ffc:	bf04      	itt	eq
 8003ffe:	1852      	addeq	r2, r2, r1
 8004000:	6022      	streq	r2, [r4, #0]
 8004002:	602c      	str	r4, [r5, #0]
 8004004:	e7ec      	b.n	8003fe0 <_free_r+0x28>
 8004006:	461a      	mov	r2, r3
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	b10b      	cbz	r3, 8004010 <_free_r+0x58>
 800400c:	42a3      	cmp	r3, r4
 800400e:	d9fa      	bls.n	8004006 <_free_r+0x4e>
 8004010:	6811      	ldr	r1, [r2, #0]
 8004012:	1855      	adds	r5, r2, r1
 8004014:	42a5      	cmp	r5, r4
 8004016:	d10b      	bne.n	8004030 <_free_r+0x78>
 8004018:	6824      	ldr	r4, [r4, #0]
 800401a:	4421      	add	r1, r4
 800401c:	1854      	adds	r4, r2, r1
 800401e:	42a3      	cmp	r3, r4
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	d1dd      	bne.n	8003fe0 <_free_r+0x28>
 8004024:	681c      	ldr	r4, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	6053      	str	r3, [r2, #4]
 800402a:	4421      	add	r1, r4
 800402c:	6011      	str	r1, [r2, #0]
 800402e:	e7d7      	b.n	8003fe0 <_free_r+0x28>
 8004030:	d902      	bls.n	8004038 <_free_r+0x80>
 8004032:	230c      	movs	r3, #12
 8004034:	6003      	str	r3, [r0, #0]
 8004036:	e7d3      	b.n	8003fe0 <_free_r+0x28>
 8004038:	6825      	ldr	r5, [r4, #0]
 800403a:	1961      	adds	r1, r4, r5
 800403c:	428b      	cmp	r3, r1
 800403e:	bf04      	itt	eq
 8004040:	6819      	ldreq	r1, [r3, #0]
 8004042:	685b      	ldreq	r3, [r3, #4]
 8004044:	6063      	str	r3, [r4, #4]
 8004046:	bf04      	itt	eq
 8004048:	1949      	addeq	r1, r1, r5
 800404a:	6021      	streq	r1, [r4, #0]
 800404c:	6054      	str	r4, [r2, #4]
 800404e:	e7c7      	b.n	8003fe0 <_free_r+0x28>
 8004050:	b003      	add	sp, #12
 8004052:	bd30      	pop	{r4, r5, pc}
 8004054:	20000090 	.word	0x20000090

08004058 <_malloc_r>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	1ccd      	adds	r5, r1, #3
 800405c:	f025 0503 	bic.w	r5, r5, #3
 8004060:	3508      	adds	r5, #8
 8004062:	2d0c      	cmp	r5, #12
 8004064:	bf38      	it	cc
 8004066:	250c      	movcc	r5, #12
 8004068:	2d00      	cmp	r5, #0
 800406a:	4606      	mov	r6, r0
 800406c:	db01      	blt.n	8004072 <_malloc_r+0x1a>
 800406e:	42a9      	cmp	r1, r5
 8004070:	d903      	bls.n	800407a <_malloc_r+0x22>
 8004072:	230c      	movs	r3, #12
 8004074:	6033      	str	r3, [r6, #0]
 8004076:	2000      	movs	r0, #0
 8004078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800407a:	f000 fe2b 	bl	8004cd4 <__malloc_lock>
 800407e:	4921      	ldr	r1, [pc, #132]	; (8004104 <_malloc_r+0xac>)
 8004080:	680a      	ldr	r2, [r1, #0]
 8004082:	4614      	mov	r4, r2
 8004084:	b99c      	cbnz	r4, 80040ae <_malloc_r+0x56>
 8004086:	4f20      	ldr	r7, [pc, #128]	; (8004108 <_malloc_r+0xb0>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b923      	cbnz	r3, 8004096 <_malloc_r+0x3e>
 800408c:	4621      	mov	r1, r4
 800408e:	4630      	mov	r0, r6
 8004090:	f000 fb2a 	bl	80046e8 <_sbrk_r>
 8004094:	6038      	str	r0, [r7, #0]
 8004096:	4629      	mov	r1, r5
 8004098:	4630      	mov	r0, r6
 800409a:	f000 fb25 	bl	80046e8 <_sbrk_r>
 800409e:	1c43      	adds	r3, r0, #1
 80040a0:	d123      	bne.n	80040ea <_malloc_r+0x92>
 80040a2:	230c      	movs	r3, #12
 80040a4:	6033      	str	r3, [r6, #0]
 80040a6:	4630      	mov	r0, r6
 80040a8:	f000 fe1a 	bl	8004ce0 <__malloc_unlock>
 80040ac:	e7e3      	b.n	8004076 <_malloc_r+0x1e>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	1b5b      	subs	r3, r3, r5
 80040b2:	d417      	bmi.n	80040e4 <_malloc_r+0x8c>
 80040b4:	2b0b      	cmp	r3, #11
 80040b6:	d903      	bls.n	80040c0 <_malloc_r+0x68>
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	441c      	add	r4, r3
 80040bc:	6025      	str	r5, [r4, #0]
 80040be:	e004      	b.n	80040ca <_malloc_r+0x72>
 80040c0:	6863      	ldr	r3, [r4, #4]
 80040c2:	42a2      	cmp	r2, r4
 80040c4:	bf0c      	ite	eq
 80040c6:	600b      	streq	r3, [r1, #0]
 80040c8:	6053      	strne	r3, [r2, #4]
 80040ca:	4630      	mov	r0, r6
 80040cc:	f000 fe08 	bl	8004ce0 <__malloc_unlock>
 80040d0:	f104 000b 	add.w	r0, r4, #11
 80040d4:	1d23      	adds	r3, r4, #4
 80040d6:	f020 0007 	bic.w	r0, r0, #7
 80040da:	1ac2      	subs	r2, r0, r3
 80040dc:	d0cc      	beq.n	8004078 <_malloc_r+0x20>
 80040de:	1a1b      	subs	r3, r3, r0
 80040e0:	50a3      	str	r3, [r4, r2]
 80040e2:	e7c9      	b.n	8004078 <_malloc_r+0x20>
 80040e4:	4622      	mov	r2, r4
 80040e6:	6864      	ldr	r4, [r4, #4]
 80040e8:	e7cc      	b.n	8004084 <_malloc_r+0x2c>
 80040ea:	1cc4      	adds	r4, r0, #3
 80040ec:	f024 0403 	bic.w	r4, r4, #3
 80040f0:	42a0      	cmp	r0, r4
 80040f2:	d0e3      	beq.n	80040bc <_malloc_r+0x64>
 80040f4:	1a21      	subs	r1, r4, r0
 80040f6:	4630      	mov	r0, r6
 80040f8:	f000 faf6 	bl	80046e8 <_sbrk_r>
 80040fc:	3001      	adds	r0, #1
 80040fe:	d1dd      	bne.n	80040bc <_malloc_r+0x64>
 8004100:	e7cf      	b.n	80040a2 <_malloc_r+0x4a>
 8004102:	bf00      	nop
 8004104:	20000090 	.word	0x20000090
 8004108:	20000094 	.word	0x20000094

0800410c <__sfputc_r>:
 800410c:	6893      	ldr	r3, [r2, #8]
 800410e:	3b01      	subs	r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	b410      	push	{r4}
 8004114:	6093      	str	r3, [r2, #8]
 8004116:	da08      	bge.n	800412a <__sfputc_r+0x1e>
 8004118:	6994      	ldr	r4, [r2, #24]
 800411a:	42a3      	cmp	r3, r4
 800411c:	db01      	blt.n	8004122 <__sfputc_r+0x16>
 800411e:	290a      	cmp	r1, #10
 8004120:	d103      	bne.n	800412a <__sfputc_r+0x1e>
 8004122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004126:	f000 baef 	b.w	8004708 <__swbuf_r>
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	1c58      	adds	r0, r3, #1
 800412e:	6010      	str	r0, [r2, #0]
 8004130:	7019      	strb	r1, [r3, #0]
 8004132:	4608      	mov	r0, r1
 8004134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004138:	4770      	bx	lr

0800413a <__sfputs_r>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	4606      	mov	r6, r0
 800413e:	460f      	mov	r7, r1
 8004140:	4614      	mov	r4, r2
 8004142:	18d5      	adds	r5, r2, r3
 8004144:	42ac      	cmp	r4, r5
 8004146:	d101      	bne.n	800414c <__sfputs_r+0x12>
 8004148:	2000      	movs	r0, #0
 800414a:	e007      	b.n	800415c <__sfputs_r+0x22>
 800414c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004150:	463a      	mov	r2, r7
 8004152:	4630      	mov	r0, r6
 8004154:	f7ff ffda 	bl	800410c <__sfputc_r>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d1f3      	bne.n	8004144 <__sfputs_r+0xa>
 800415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004160 <_vfiprintf_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	460d      	mov	r5, r1
 8004166:	b09d      	sub	sp, #116	; 0x74
 8004168:	4614      	mov	r4, r2
 800416a:	4698      	mov	r8, r3
 800416c:	4606      	mov	r6, r0
 800416e:	b118      	cbz	r0, 8004178 <_vfiprintf_r+0x18>
 8004170:	6983      	ldr	r3, [r0, #24]
 8004172:	b90b      	cbnz	r3, 8004178 <_vfiprintf_r+0x18>
 8004174:	f000 fcaa 	bl	8004acc <__sinit>
 8004178:	4b89      	ldr	r3, [pc, #548]	; (80043a0 <_vfiprintf_r+0x240>)
 800417a:	429d      	cmp	r5, r3
 800417c:	d11b      	bne.n	80041b6 <_vfiprintf_r+0x56>
 800417e:	6875      	ldr	r5, [r6, #4]
 8004180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004182:	07d9      	lsls	r1, r3, #31
 8004184:	d405      	bmi.n	8004192 <_vfiprintf_r+0x32>
 8004186:	89ab      	ldrh	r3, [r5, #12]
 8004188:	059a      	lsls	r2, r3, #22
 800418a:	d402      	bmi.n	8004192 <_vfiprintf_r+0x32>
 800418c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800418e:	f000 fd3b 	bl	8004c08 <__retarget_lock_acquire_recursive>
 8004192:	89ab      	ldrh	r3, [r5, #12]
 8004194:	071b      	lsls	r3, r3, #28
 8004196:	d501      	bpl.n	800419c <_vfiprintf_r+0x3c>
 8004198:	692b      	ldr	r3, [r5, #16]
 800419a:	b9eb      	cbnz	r3, 80041d8 <_vfiprintf_r+0x78>
 800419c:	4629      	mov	r1, r5
 800419e:	4630      	mov	r0, r6
 80041a0:	f000 fb04 	bl	80047ac <__swsetup_r>
 80041a4:	b1c0      	cbz	r0, 80041d8 <_vfiprintf_r+0x78>
 80041a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041a8:	07dc      	lsls	r4, r3, #31
 80041aa:	d50e      	bpl.n	80041ca <_vfiprintf_r+0x6a>
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	b01d      	add	sp, #116	; 0x74
 80041b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b6:	4b7b      	ldr	r3, [pc, #492]	; (80043a4 <_vfiprintf_r+0x244>)
 80041b8:	429d      	cmp	r5, r3
 80041ba:	d101      	bne.n	80041c0 <_vfiprintf_r+0x60>
 80041bc:	68b5      	ldr	r5, [r6, #8]
 80041be:	e7df      	b.n	8004180 <_vfiprintf_r+0x20>
 80041c0:	4b79      	ldr	r3, [pc, #484]	; (80043a8 <_vfiprintf_r+0x248>)
 80041c2:	429d      	cmp	r5, r3
 80041c4:	bf08      	it	eq
 80041c6:	68f5      	ldreq	r5, [r6, #12]
 80041c8:	e7da      	b.n	8004180 <_vfiprintf_r+0x20>
 80041ca:	89ab      	ldrh	r3, [r5, #12]
 80041cc:	0598      	lsls	r0, r3, #22
 80041ce:	d4ed      	bmi.n	80041ac <_vfiprintf_r+0x4c>
 80041d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041d2:	f000 fd1a 	bl	8004c0a <__retarget_lock_release_recursive>
 80041d6:	e7e9      	b.n	80041ac <_vfiprintf_r+0x4c>
 80041d8:	2300      	movs	r3, #0
 80041da:	9309      	str	r3, [sp, #36]	; 0x24
 80041dc:	2320      	movs	r3, #32
 80041de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041e6:	2330      	movs	r3, #48	; 0x30
 80041e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043ac <_vfiprintf_r+0x24c>
 80041ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041f0:	f04f 0901 	mov.w	r9, #1
 80041f4:	4623      	mov	r3, r4
 80041f6:	469a      	mov	sl, r3
 80041f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041fc:	b10a      	cbz	r2, 8004202 <_vfiprintf_r+0xa2>
 80041fe:	2a25      	cmp	r2, #37	; 0x25
 8004200:	d1f9      	bne.n	80041f6 <_vfiprintf_r+0x96>
 8004202:	ebba 0b04 	subs.w	fp, sl, r4
 8004206:	d00b      	beq.n	8004220 <_vfiprintf_r+0xc0>
 8004208:	465b      	mov	r3, fp
 800420a:	4622      	mov	r2, r4
 800420c:	4629      	mov	r1, r5
 800420e:	4630      	mov	r0, r6
 8004210:	f7ff ff93 	bl	800413a <__sfputs_r>
 8004214:	3001      	adds	r0, #1
 8004216:	f000 80aa 	beq.w	800436e <_vfiprintf_r+0x20e>
 800421a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800421c:	445a      	add	r2, fp
 800421e:	9209      	str	r2, [sp, #36]	; 0x24
 8004220:	f89a 3000 	ldrb.w	r3, [sl]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80a2 	beq.w	800436e <_vfiprintf_r+0x20e>
 800422a:	2300      	movs	r3, #0
 800422c:	f04f 32ff 	mov.w	r2, #4294967295
 8004230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004234:	f10a 0a01 	add.w	sl, sl, #1
 8004238:	9304      	str	r3, [sp, #16]
 800423a:	9307      	str	r3, [sp, #28]
 800423c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004240:	931a      	str	r3, [sp, #104]	; 0x68
 8004242:	4654      	mov	r4, sl
 8004244:	2205      	movs	r2, #5
 8004246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800424a:	4858      	ldr	r0, [pc, #352]	; (80043ac <_vfiprintf_r+0x24c>)
 800424c:	f7fb ffe0 	bl	8000210 <memchr>
 8004250:	9a04      	ldr	r2, [sp, #16]
 8004252:	b9d8      	cbnz	r0, 800428c <_vfiprintf_r+0x12c>
 8004254:	06d1      	lsls	r1, r2, #27
 8004256:	bf44      	itt	mi
 8004258:	2320      	movmi	r3, #32
 800425a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800425e:	0713      	lsls	r3, r2, #28
 8004260:	bf44      	itt	mi
 8004262:	232b      	movmi	r3, #43	; 0x2b
 8004264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004268:	f89a 3000 	ldrb.w	r3, [sl]
 800426c:	2b2a      	cmp	r3, #42	; 0x2a
 800426e:	d015      	beq.n	800429c <_vfiprintf_r+0x13c>
 8004270:	9a07      	ldr	r2, [sp, #28]
 8004272:	4654      	mov	r4, sl
 8004274:	2000      	movs	r0, #0
 8004276:	f04f 0c0a 	mov.w	ip, #10
 800427a:	4621      	mov	r1, r4
 800427c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004280:	3b30      	subs	r3, #48	; 0x30
 8004282:	2b09      	cmp	r3, #9
 8004284:	d94e      	bls.n	8004324 <_vfiprintf_r+0x1c4>
 8004286:	b1b0      	cbz	r0, 80042b6 <_vfiprintf_r+0x156>
 8004288:	9207      	str	r2, [sp, #28]
 800428a:	e014      	b.n	80042b6 <_vfiprintf_r+0x156>
 800428c:	eba0 0308 	sub.w	r3, r0, r8
 8004290:	fa09 f303 	lsl.w	r3, r9, r3
 8004294:	4313      	orrs	r3, r2
 8004296:	9304      	str	r3, [sp, #16]
 8004298:	46a2      	mov	sl, r4
 800429a:	e7d2      	b.n	8004242 <_vfiprintf_r+0xe2>
 800429c:	9b03      	ldr	r3, [sp, #12]
 800429e:	1d19      	adds	r1, r3, #4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	9103      	str	r1, [sp, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bfbb      	ittet	lt
 80042a8:	425b      	neglt	r3, r3
 80042aa:	f042 0202 	orrlt.w	r2, r2, #2
 80042ae:	9307      	strge	r3, [sp, #28]
 80042b0:	9307      	strlt	r3, [sp, #28]
 80042b2:	bfb8      	it	lt
 80042b4:	9204      	strlt	r2, [sp, #16]
 80042b6:	7823      	ldrb	r3, [r4, #0]
 80042b8:	2b2e      	cmp	r3, #46	; 0x2e
 80042ba:	d10c      	bne.n	80042d6 <_vfiprintf_r+0x176>
 80042bc:	7863      	ldrb	r3, [r4, #1]
 80042be:	2b2a      	cmp	r3, #42	; 0x2a
 80042c0:	d135      	bne.n	800432e <_vfiprintf_r+0x1ce>
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	1d1a      	adds	r2, r3, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	9203      	str	r2, [sp, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfb8      	it	lt
 80042ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80042d2:	3402      	adds	r4, #2
 80042d4:	9305      	str	r3, [sp, #20]
 80042d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043bc <_vfiprintf_r+0x25c>
 80042da:	7821      	ldrb	r1, [r4, #0]
 80042dc:	2203      	movs	r2, #3
 80042de:	4650      	mov	r0, sl
 80042e0:	f7fb ff96 	bl	8000210 <memchr>
 80042e4:	b140      	cbz	r0, 80042f8 <_vfiprintf_r+0x198>
 80042e6:	2340      	movs	r3, #64	; 0x40
 80042e8:	eba0 000a 	sub.w	r0, r0, sl
 80042ec:	fa03 f000 	lsl.w	r0, r3, r0
 80042f0:	9b04      	ldr	r3, [sp, #16]
 80042f2:	4303      	orrs	r3, r0
 80042f4:	3401      	adds	r4, #1
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042fc:	482c      	ldr	r0, [pc, #176]	; (80043b0 <_vfiprintf_r+0x250>)
 80042fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004302:	2206      	movs	r2, #6
 8004304:	f7fb ff84 	bl	8000210 <memchr>
 8004308:	2800      	cmp	r0, #0
 800430a:	d03f      	beq.n	800438c <_vfiprintf_r+0x22c>
 800430c:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <_vfiprintf_r+0x254>)
 800430e:	bb1b      	cbnz	r3, 8004358 <_vfiprintf_r+0x1f8>
 8004310:	9b03      	ldr	r3, [sp, #12]
 8004312:	3307      	adds	r3, #7
 8004314:	f023 0307 	bic.w	r3, r3, #7
 8004318:	3308      	adds	r3, #8
 800431a:	9303      	str	r3, [sp, #12]
 800431c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800431e:	443b      	add	r3, r7
 8004320:	9309      	str	r3, [sp, #36]	; 0x24
 8004322:	e767      	b.n	80041f4 <_vfiprintf_r+0x94>
 8004324:	fb0c 3202 	mla	r2, ip, r2, r3
 8004328:	460c      	mov	r4, r1
 800432a:	2001      	movs	r0, #1
 800432c:	e7a5      	b.n	800427a <_vfiprintf_r+0x11a>
 800432e:	2300      	movs	r3, #0
 8004330:	3401      	adds	r4, #1
 8004332:	9305      	str	r3, [sp, #20]
 8004334:	4619      	mov	r1, r3
 8004336:	f04f 0c0a 	mov.w	ip, #10
 800433a:	4620      	mov	r0, r4
 800433c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004340:	3a30      	subs	r2, #48	; 0x30
 8004342:	2a09      	cmp	r2, #9
 8004344:	d903      	bls.n	800434e <_vfiprintf_r+0x1ee>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0c5      	beq.n	80042d6 <_vfiprintf_r+0x176>
 800434a:	9105      	str	r1, [sp, #20]
 800434c:	e7c3      	b.n	80042d6 <_vfiprintf_r+0x176>
 800434e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004352:	4604      	mov	r4, r0
 8004354:	2301      	movs	r3, #1
 8004356:	e7f0      	b.n	800433a <_vfiprintf_r+0x1da>
 8004358:	ab03      	add	r3, sp, #12
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	462a      	mov	r2, r5
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <_vfiprintf_r+0x258>)
 8004360:	a904      	add	r1, sp, #16
 8004362:	4630      	mov	r0, r6
 8004364:	f3af 8000 	nop.w
 8004368:	4607      	mov	r7, r0
 800436a:	1c78      	adds	r0, r7, #1
 800436c:	d1d6      	bne.n	800431c <_vfiprintf_r+0x1bc>
 800436e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004370:	07d9      	lsls	r1, r3, #31
 8004372:	d405      	bmi.n	8004380 <_vfiprintf_r+0x220>
 8004374:	89ab      	ldrh	r3, [r5, #12]
 8004376:	059a      	lsls	r2, r3, #22
 8004378:	d402      	bmi.n	8004380 <_vfiprintf_r+0x220>
 800437a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800437c:	f000 fc45 	bl	8004c0a <__retarget_lock_release_recursive>
 8004380:	89ab      	ldrh	r3, [r5, #12]
 8004382:	065b      	lsls	r3, r3, #25
 8004384:	f53f af12 	bmi.w	80041ac <_vfiprintf_r+0x4c>
 8004388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800438a:	e711      	b.n	80041b0 <_vfiprintf_r+0x50>
 800438c:	ab03      	add	r3, sp, #12
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	462a      	mov	r2, r5
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <_vfiprintf_r+0x258>)
 8004394:	a904      	add	r1, sp, #16
 8004396:	4630      	mov	r0, r6
 8004398:	f000 f880 	bl	800449c <_printf_i>
 800439c:	e7e4      	b.n	8004368 <_vfiprintf_r+0x208>
 800439e:	bf00      	nop
 80043a0:	080052c4 	.word	0x080052c4
 80043a4:	080052e4 	.word	0x080052e4
 80043a8:	080052a4 	.word	0x080052a4
 80043ac:	08005270 	.word	0x08005270
 80043b0:	0800527a 	.word	0x0800527a
 80043b4:	00000000 	.word	0x00000000
 80043b8:	0800413b 	.word	0x0800413b
 80043bc:	08005276 	.word	0x08005276

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4616      	mov	r6, r2
 80043c6:	4699      	mov	r9, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bfb8      	it	lt
 80043d4:	4613      	movlt	r3, r2
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043dc:	4607      	mov	r7, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	b10a      	cbz	r2, 80043e6 <_printf_common+0x26>
 80043e2:	3301      	adds	r3, #1
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	6833      	ldrmi	r3, [r6, #0]
 80043ee:	3302      	addmi	r3, #2
 80043f0:	6033      	strmi	r3, [r6, #0]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d106      	bne.n	8004408 <_printf_common+0x48>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	6832      	ldr	r2, [r6, #0]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dc26      	bgt.n	8004456 <_printf_common+0x96>
 8004408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800440c:	1e13      	subs	r3, r2, #0
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	bf18      	it	ne
 8004412:	2301      	movne	r3, #1
 8004414:	0692      	lsls	r2, r2, #26
 8004416:	d42b      	bmi.n	8004470 <_printf_common+0xb0>
 8004418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	47c0      	blx	r8
 8004422:	3001      	adds	r0, #1
 8004424:	d01e      	beq.n	8004464 <_printf_common+0xa4>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	68e5      	ldr	r5, [r4, #12]
 800442a:	6832      	ldr	r2, [r6, #0]
 800442c:	f003 0306 	and.w	r3, r3, #6
 8004430:	2b04      	cmp	r3, #4
 8004432:	bf08      	it	eq
 8004434:	1aad      	subeq	r5, r5, r2
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	bf0c      	ite	eq
 800443c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004440:	2500      	movne	r5, #0
 8004442:	4293      	cmp	r3, r2
 8004444:	bfc4      	itt	gt
 8004446:	1a9b      	subgt	r3, r3, r2
 8004448:	18ed      	addgt	r5, r5, r3
 800444a:	2600      	movs	r6, #0
 800444c:	341a      	adds	r4, #26
 800444e:	42b5      	cmp	r5, r6
 8004450:	d11a      	bne.n	8004488 <_printf_common+0xc8>
 8004452:	2000      	movs	r0, #0
 8004454:	e008      	b.n	8004468 <_printf_common+0xa8>
 8004456:	2301      	movs	r3, #1
 8004458:	4652      	mov	r2, sl
 800445a:	4649      	mov	r1, r9
 800445c:	4638      	mov	r0, r7
 800445e:	47c0      	blx	r8
 8004460:	3001      	adds	r0, #1
 8004462:	d103      	bne.n	800446c <_printf_common+0xac>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	3501      	adds	r5, #1
 800446e:	e7c6      	b.n	80043fe <_printf_common+0x3e>
 8004470:	18e1      	adds	r1, r4, r3
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	2030      	movs	r0, #48	; 0x30
 8004476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800447a:	4422      	add	r2, r4
 800447c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004484:	3302      	adds	r3, #2
 8004486:	e7c7      	b.n	8004418 <_printf_common+0x58>
 8004488:	2301      	movs	r3, #1
 800448a:	4622      	mov	r2, r4
 800448c:	4649      	mov	r1, r9
 800448e:	4638      	mov	r0, r7
 8004490:	47c0      	blx	r8
 8004492:	3001      	adds	r0, #1
 8004494:	d0e6      	beq.n	8004464 <_printf_common+0xa4>
 8004496:	3601      	adds	r6, #1
 8004498:	e7d9      	b.n	800444e <_printf_common+0x8e>
	...

0800449c <_printf_i>:
 800449c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	460c      	mov	r4, r1
 80044a2:	4691      	mov	r9, r2
 80044a4:	7e27      	ldrb	r7, [r4, #24]
 80044a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044a8:	2f78      	cmp	r7, #120	; 0x78
 80044aa:	4680      	mov	r8, r0
 80044ac:	469a      	mov	sl, r3
 80044ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044b2:	d807      	bhi.n	80044c4 <_printf_i+0x28>
 80044b4:	2f62      	cmp	r7, #98	; 0x62
 80044b6:	d80a      	bhi.n	80044ce <_printf_i+0x32>
 80044b8:	2f00      	cmp	r7, #0
 80044ba:	f000 80d8 	beq.w	800466e <_printf_i+0x1d2>
 80044be:	2f58      	cmp	r7, #88	; 0x58
 80044c0:	f000 80a3 	beq.w	800460a <_printf_i+0x16e>
 80044c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044cc:	e03a      	b.n	8004544 <_printf_i+0xa8>
 80044ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044d2:	2b15      	cmp	r3, #21
 80044d4:	d8f6      	bhi.n	80044c4 <_printf_i+0x28>
 80044d6:	a001      	add	r0, pc, #4	; (adr r0, 80044dc <_printf_i+0x40>)
 80044d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004549 	.word	0x08004549
 80044e4:	080044c5 	.word	0x080044c5
 80044e8:	080044c5 	.word	0x080044c5
 80044ec:	080044c5 	.word	0x080044c5
 80044f0:	080044c5 	.word	0x080044c5
 80044f4:	08004549 	.word	0x08004549
 80044f8:	080044c5 	.word	0x080044c5
 80044fc:	080044c5 	.word	0x080044c5
 8004500:	080044c5 	.word	0x080044c5
 8004504:	080044c5 	.word	0x080044c5
 8004508:	08004655 	.word	0x08004655
 800450c:	08004579 	.word	0x08004579
 8004510:	08004637 	.word	0x08004637
 8004514:	080044c5 	.word	0x080044c5
 8004518:	080044c5 	.word	0x080044c5
 800451c:	08004677 	.word	0x08004677
 8004520:	080044c5 	.word	0x080044c5
 8004524:	08004579 	.word	0x08004579
 8004528:	080044c5 	.word	0x080044c5
 800452c:	080044c5 	.word	0x080044c5
 8004530:	0800463f 	.word	0x0800463f
 8004534:	680b      	ldr	r3, [r1, #0]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	600a      	str	r2, [r1, #0]
 800453c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004544:	2301      	movs	r3, #1
 8004546:	e0a3      	b.n	8004690 <_printf_i+0x1f4>
 8004548:	6825      	ldr	r5, [r4, #0]
 800454a:	6808      	ldr	r0, [r1, #0]
 800454c:	062e      	lsls	r6, r5, #24
 800454e:	f100 0304 	add.w	r3, r0, #4
 8004552:	d50a      	bpl.n	800456a <_printf_i+0xce>
 8004554:	6805      	ldr	r5, [r0, #0]
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	2d00      	cmp	r5, #0
 800455a:	da03      	bge.n	8004564 <_printf_i+0xc8>
 800455c:	232d      	movs	r3, #45	; 0x2d
 800455e:	426d      	negs	r5, r5
 8004560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004564:	485e      	ldr	r0, [pc, #376]	; (80046e0 <_printf_i+0x244>)
 8004566:	230a      	movs	r3, #10
 8004568:	e019      	b.n	800459e <_printf_i+0x102>
 800456a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800456e:	6805      	ldr	r5, [r0, #0]
 8004570:	600b      	str	r3, [r1, #0]
 8004572:	bf18      	it	ne
 8004574:	b22d      	sxthne	r5, r5
 8004576:	e7ef      	b.n	8004558 <_printf_i+0xbc>
 8004578:	680b      	ldr	r3, [r1, #0]
 800457a:	6825      	ldr	r5, [r4, #0]
 800457c:	1d18      	adds	r0, r3, #4
 800457e:	6008      	str	r0, [r1, #0]
 8004580:	0628      	lsls	r0, r5, #24
 8004582:	d501      	bpl.n	8004588 <_printf_i+0xec>
 8004584:	681d      	ldr	r5, [r3, #0]
 8004586:	e002      	b.n	800458e <_printf_i+0xf2>
 8004588:	0669      	lsls	r1, r5, #25
 800458a:	d5fb      	bpl.n	8004584 <_printf_i+0xe8>
 800458c:	881d      	ldrh	r5, [r3, #0]
 800458e:	4854      	ldr	r0, [pc, #336]	; (80046e0 <_printf_i+0x244>)
 8004590:	2f6f      	cmp	r7, #111	; 0x6f
 8004592:	bf0c      	ite	eq
 8004594:	2308      	moveq	r3, #8
 8004596:	230a      	movne	r3, #10
 8004598:	2100      	movs	r1, #0
 800459a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800459e:	6866      	ldr	r6, [r4, #4]
 80045a0:	60a6      	str	r6, [r4, #8]
 80045a2:	2e00      	cmp	r6, #0
 80045a4:	bfa2      	ittt	ge
 80045a6:	6821      	ldrge	r1, [r4, #0]
 80045a8:	f021 0104 	bicge.w	r1, r1, #4
 80045ac:	6021      	strge	r1, [r4, #0]
 80045ae:	b90d      	cbnz	r5, 80045b4 <_printf_i+0x118>
 80045b0:	2e00      	cmp	r6, #0
 80045b2:	d04d      	beq.n	8004650 <_printf_i+0x1b4>
 80045b4:	4616      	mov	r6, r2
 80045b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80045ba:	fb03 5711 	mls	r7, r3, r1, r5
 80045be:	5dc7      	ldrb	r7, [r0, r7]
 80045c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045c4:	462f      	mov	r7, r5
 80045c6:	42bb      	cmp	r3, r7
 80045c8:	460d      	mov	r5, r1
 80045ca:	d9f4      	bls.n	80045b6 <_printf_i+0x11a>
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d10b      	bne.n	80045e8 <_printf_i+0x14c>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	07df      	lsls	r7, r3, #31
 80045d4:	d508      	bpl.n	80045e8 <_printf_i+0x14c>
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	6861      	ldr	r1, [r4, #4]
 80045da:	4299      	cmp	r1, r3
 80045dc:	bfde      	ittt	le
 80045de:	2330      	movle	r3, #48	; 0x30
 80045e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045e8:	1b92      	subs	r2, r2, r6
 80045ea:	6122      	str	r2, [r4, #16]
 80045ec:	f8cd a000 	str.w	sl, [sp]
 80045f0:	464b      	mov	r3, r9
 80045f2:	aa03      	add	r2, sp, #12
 80045f4:	4621      	mov	r1, r4
 80045f6:	4640      	mov	r0, r8
 80045f8:	f7ff fee2 	bl	80043c0 <_printf_common>
 80045fc:	3001      	adds	r0, #1
 80045fe:	d14c      	bne.n	800469a <_printf_i+0x1fe>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	b004      	add	sp, #16
 8004606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460a:	4835      	ldr	r0, [pc, #212]	; (80046e0 <_printf_i+0x244>)
 800460c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	680e      	ldr	r6, [r1, #0]
 8004614:	061f      	lsls	r7, r3, #24
 8004616:	f856 5b04 	ldr.w	r5, [r6], #4
 800461a:	600e      	str	r6, [r1, #0]
 800461c:	d514      	bpl.n	8004648 <_printf_i+0x1ac>
 800461e:	07d9      	lsls	r1, r3, #31
 8004620:	bf44      	itt	mi
 8004622:	f043 0320 	orrmi.w	r3, r3, #32
 8004626:	6023      	strmi	r3, [r4, #0]
 8004628:	b91d      	cbnz	r5, 8004632 <_printf_i+0x196>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	f023 0320 	bic.w	r3, r3, #32
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	2310      	movs	r3, #16
 8004634:	e7b0      	b.n	8004598 <_printf_i+0xfc>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	2378      	movs	r3, #120	; 0x78
 8004640:	4828      	ldr	r0, [pc, #160]	; (80046e4 <_printf_i+0x248>)
 8004642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004646:	e7e3      	b.n	8004610 <_printf_i+0x174>
 8004648:	065e      	lsls	r6, r3, #25
 800464a:	bf48      	it	mi
 800464c:	b2ad      	uxthmi	r5, r5
 800464e:	e7e6      	b.n	800461e <_printf_i+0x182>
 8004650:	4616      	mov	r6, r2
 8004652:	e7bb      	b.n	80045cc <_printf_i+0x130>
 8004654:	680b      	ldr	r3, [r1, #0]
 8004656:	6826      	ldr	r6, [r4, #0]
 8004658:	6960      	ldr	r0, [r4, #20]
 800465a:	1d1d      	adds	r5, r3, #4
 800465c:	600d      	str	r5, [r1, #0]
 800465e:	0635      	lsls	r5, r6, #24
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	d501      	bpl.n	8004668 <_printf_i+0x1cc>
 8004664:	6018      	str	r0, [r3, #0]
 8004666:	e002      	b.n	800466e <_printf_i+0x1d2>
 8004668:	0671      	lsls	r1, r6, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0x1c8>
 800466c:	8018      	strh	r0, [r3, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	4616      	mov	r6, r2
 8004674:	e7ba      	b.n	80045ec <_printf_i+0x150>
 8004676:	680b      	ldr	r3, [r1, #0]
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	600a      	str	r2, [r1, #0]
 800467c:	681e      	ldr	r6, [r3, #0]
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	2100      	movs	r1, #0
 8004682:	4630      	mov	r0, r6
 8004684:	f7fb fdc4 	bl	8000210 <memchr>
 8004688:	b108      	cbz	r0, 800468e <_printf_i+0x1f2>
 800468a:	1b80      	subs	r0, r0, r6
 800468c:	6060      	str	r0, [r4, #4]
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	2300      	movs	r3, #0
 8004694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004698:	e7a8      	b.n	80045ec <_printf_i+0x150>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	4632      	mov	r2, r6
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	47d0      	blx	sl
 80046a4:	3001      	adds	r0, #1
 80046a6:	d0ab      	beq.n	8004600 <_printf_i+0x164>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	079b      	lsls	r3, r3, #30
 80046ac:	d413      	bmi.n	80046d6 <_printf_i+0x23a>
 80046ae:	68e0      	ldr	r0, [r4, #12]
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	4298      	cmp	r0, r3
 80046b4:	bfb8      	it	lt
 80046b6:	4618      	movlt	r0, r3
 80046b8:	e7a4      	b.n	8004604 <_printf_i+0x168>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4632      	mov	r2, r6
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	47d0      	blx	sl
 80046c4:	3001      	adds	r0, #1
 80046c6:	d09b      	beq.n	8004600 <_printf_i+0x164>
 80046c8:	3501      	adds	r5, #1
 80046ca:	68e3      	ldr	r3, [r4, #12]
 80046cc:	9903      	ldr	r1, [sp, #12]
 80046ce:	1a5b      	subs	r3, r3, r1
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	dcf2      	bgt.n	80046ba <_printf_i+0x21e>
 80046d4:	e7eb      	b.n	80046ae <_printf_i+0x212>
 80046d6:	2500      	movs	r5, #0
 80046d8:	f104 0619 	add.w	r6, r4, #25
 80046dc:	e7f5      	b.n	80046ca <_printf_i+0x22e>
 80046de:	bf00      	nop
 80046e0:	08005281 	.word	0x08005281
 80046e4:	08005292 	.word	0x08005292

080046e8 <_sbrk_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	4d06      	ldr	r5, [pc, #24]	; (8004704 <_sbrk_r+0x1c>)
 80046ec:	2300      	movs	r3, #0
 80046ee:	4604      	mov	r4, r0
 80046f0:	4608      	mov	r0, r1
 80046f2:	602b      	str	r3, [r5, #0]
 80046f4:	f7fc fcd2 	bl	800109c <_sbrk>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_sbrk_r+0x1a>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_sbrk_r+0x1a>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	200002a8 	.word	0x200002a8

08004708 <__swbuf_r>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	460e      	mov	r6, r1
 800470c:	4614      	mov	r4, r2
 800470e:	4605      	mov	r5, r0
 8004710:	b118      	cbz	r0, 800471a <__swbuf_r+0x12>
 8004712:	6983      	ldr	r3, [r0, #24]
 8004714:	b90b      	cbnz	r3, 800471a <__swbuf_r+0x12>
 8004716:	f000 f9d9 	bl	8004acc <__sinit>
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <__swbuf_r+0x98>)
 800471c:	429c      	cmp	r4, r3
 800471e:	d12b      	bne.n	8004778 <__swbuf_r+0x70>
 8004720:	686c      	ldr	r4, [r5, #4]
 8004722:	69a3      	ldr	r3, [r4, #24]
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	071a      	lsls	r2, r3, #28
 800472a:	d52f      	bpl.n	800478c <__swbuf_r+0x84>
 800472c:	6923      	ldr	r3, [r4, #16]
 800472e:	b36b      	cbz	r3, 800478c <__swbuf_r+0x84>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	1ac0      	subs	r0, r0, r3
 8004736:	6963      	ldr	r3, [r4, #20]
 8004738:	b2f6      	uxtb	r6, r6
 800473a:	4283      	cmp	r3, r0
 800473c:	4637      	mov	r7, r6
 800473e:	dc04      	bgt.n	800474a <__swbuf_r+0x42>
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f92e 	bl	80049a4 <_fflush_r>
 8004748:	bb30      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 800474a:	68a3      	ldr	r3, [r4, #8]
 800474c:	3b01      	subs	r3, #1
 800474e:	60a3      	str	r3, [r4, #8]
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	6022      	str	r2, [r4, #0]
 8004756:	701e      	strb	r6, [r3, #0]
 8004758:	6963      	ldr	r3, [r4, #20]
 800475a:	3001      	adds	r0, #1
 800475c:	4283      	cmp	r3, r0
 800475e:	d004      	beq.n	800476a <__swbuf_r+0x62>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	07db      	lsls	r3, r3, #31
 8004764:	d506      	bpl.n	8004774 <__swbuf_r+0x6c>
 8004766:	2e0a      	cmp	r6, #10
 8004768:	d104      	bne.n	8004774 <__swbuf_r+0x6c>
 800476a:	4621      	mov	r1, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f000 f919 	bl	80049a4 <_fflush_r>
 8004772:	b988      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 8004774:	4638      	mov	r0, r7
 8004776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <__swbuf_r+0x9c>)
 800477a:	429c      	cmp	r4, r3
 800477c:	d101      	bne.n	8004782 <__swbuf_r+0x7a>
 800477e:	68ac      	ldr	r4, [r5, #8]
 8004780:	e7cf      	b.n	8004722 <__swbuf_r+0x1a>
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <__swbuf_r+0xa0>)
 8004784:	429c      	cmp	r4, r3
 8004786:	bf08      	it	eq
 8004788:	68ec      	ldreq	r4, [r5, #12]
 800478a:	e7ca      	b.n	8004722 <__swbuf_r+0x1a>
 800478c:	4621      	mov	r1, r4
 800478e:	4628      	mov	r0, r5
 8004790:	f000 f80c 	bl	80047ac <__swsetup_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	d0cb      	beq.n	8004730 <__swbuf_r+0x28>
 8004798:	f04f 37ff 	mov.w	r7, #4294967295
 800479c:	e7ea      	b.n	8004774 <__swbuf_r+0x6c>
 800479e:	bf00      	nop
 80047a0:	080052c4 	.word	0x080052c4
 80047a4:	080052e4 	.word	0x080052e4
 80047a8:	080052a4 	.word	0x080052a4

080047ac <__swsetup_r>:
 80047ac:	4b32      	ldr	r3, [pc, #200]	; (8004878 <__swsetup_r+0xcc>)
 80047ae:	b570      	push	{r4, r5, r6, lr}
 80047b0:	681d      	ldr	r5, [r3, #0]
 80047b2:	4606      	mov	r6, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	b125      	cbz	r5, 80047c2 <__swsetup_r+0x16>
 80047b8:	69ab      	ldr	r3, [r5, #24]
 80047ba:	b913      	cbnz	r3, 80047c2 <__swsetup_r+0x16>
 80047bc:	4628      	mov	r0, r5
 80047be:	f000 f985 	bl	8004acc <__sinit>
 80047c2:	4b2e      	ldr	r3, [pc, #184]	; (800487c <__swsetup_r+0xd0>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	d10f      	bne.n	80047e8 <__swsetup_r+0x3c>
 80047c8:	686c      	ldr	r4, [r5, #4]
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047d0:	0719      	lsls	r1, r3, #28
 80047d2:	d42c      	bmi.n	800482e <__swsetup_r+0x82>
 80047d4:	06dd      	lsls	r5, r3, #27
 80047d6:	d411      	bmi.n	80047fc <__swsetup_r+0x50>
 80047d8:	2309      	movs	r3, #9
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	f04f 30ff 	mov.w	r0, #4294967295
 80047e6:	e03e      	b.n	8004866 <__swsetup_r+0xba>
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <__swsetup_r+0xd4>)
 80047ea:	429c      	cmp	r4, r3
 80047ec:	d101      	bne.n	80047f2 <__swsetup_r+0x46>
 80047ee:	68ac      	ldr	r4, [r5, #8]
 80047f0:	e7eb      	b.n	80047ca <__swsetup_r+0x1e>
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <__swsetup_r+0xd8>)
 80047f4:	429c      	cmp	r4, r3
 80047f6:	bf08      	it	eq
 80047f8:	68ec      	ldreq	r4, [r5, #12]
 80047fa:	e7e6      	b.n	80047ca <__swsetup_r+0x1e>
 80047fc:	0758      	lsls	r0, r3, #29
 80047fe:	d512      	bpl.n	8004826 <__swsetup_r+0x7a>
 8004800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004802:	b141      	cbz	r1, 8004816 <__swsetup_r+0x6a>
 8004804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004808:	4299      	cmp	r1, r3
 800480a:	d002      	beq.n	8004812 <__swsetup_r+0x66>
 800480c:	4630      	mov	r0, r6
 800480e:	f7ff fbd3 	bl	8003fb8 <_free_r>
 8004812:	2300      	movs	r3, #0
 8004814:	6363      	str	r3, [r4, #52]	; 0x34
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	2300      	movs	r3, #0
 8004820:	6063      	str	r3, [r4, #4]
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f043 0308 	orr.w	r3, r3, #8
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	b94b      	cbnz	r3, 8004846 <__swsetup_r+0x9a>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483c:	d003      	beq.n	8004846 <__swsetup_r+0x9a>
 800483e:	4621      	mov	r1, r4
 8004840:	4630      	mov	r0, r6
 8004842:	f000 fa07 	bl	8004c54 <__smakebuf_r>
 8004846:	89a0      	ldrh	r0, [r4, #12]
 8004848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800484c:	f010 0301 	ands.w	r3, r0, #1
 8004850:	d00a      	beq.n	8004868 <__swsetup_r+0xbc>
 8004852:	2300      	movs	r3, #0
 8004854:	60a3      	str	r3, [r4, #8]
 8004856:	6963      	ldr	r3, [r4, #20]
 8004858:	425b      	negs	r3, r3
 800485a:	61a3      	str	r3, [r4, #24]
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	b943      	cbnz	r3, 8004872 <__swsetup_r+0xc6>
 8004860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004864:	d1ba      	bne.n	80047dc <__swsetup_r+0x30>
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	0781      	lsls	r1, r0, #30
 800486a:	bf58      	it	pl
 800486c:	6963      	ldrpl	r3, [r4, #20]
 800486e:	60a3      	str	r3, [r4, #8]
 8004870:	e7f4      	b.n	800485c <__swsetup_r+0xb0>
 8004872:	2000      	movs	r0, #0
 8004874:	e7f7      	b.n	8004866 <__swsetup_r+0xba>
 8004876:	bf00      	nop
 8004878:	2000000c 	.word	0x2000000c
 800487c:	080052c4 	.word	0x080052c4
 8004880:	080052e4 	.word	0x080052e4
 8004884:	080052a4 	.word	0x080052a4

08004888 <abort>:
 8004888:	b508      	push	{r3, lr}
 800488a:	2006      	movs	r0, #6
 800488c:	f000 fa56 	bl	8004d3c <raise>
 8004890:	2001      	movs	r0, #1
 8004892:	f7fc fb8b 	bl	8000fac <_exit>
	...

08004898 <__sflush_r>:
 8004898:	898a      	ldrh	r2, [r1, #12]
 800489a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800489e:	4605      	mov	r5, r0
 80048a0:	0710      	lsls	r0, r2, #28
 80048a2:	460c      	mov	r4, r1
 80048a4:	d458      	bmi.n	8004958 <__sflush_r+0xc0>
 80048a6:	684b      	ldr	r3, [r1, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc05      	bgt.n	80048b8 <__sflush_r+0x20>
 80048ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dc02      	bgt.n	80048b8 <__sflush_r+0x20>
 80048b2:	2000      	movs	r0, #0
 80048b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ba:	2e00      	cmp	r6, #0
 80048bc:	d0f9      	beq.n	80048b2 <__sflush_r+0x1a>
 80048be:	2300      	movs	r3, #0
 80048c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048c4:	682f      	ldr	r7, [r5, #0]
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	d032      	beq.n	8004930 <__sflush_r+0x98>
 80048ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	075a      	lsls	r2, r3, #29
 80048d0:	d505      	bpl.n	80048de <__sflush_r+0x46>
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d8:	b10b      	cbz	r3, 80048de <__sflush_r+0x46>
 80048da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048dc:	1ac0      	subs	r0, r0, r3
 80048de:	2300      	movs	r3, #0
 80048e0:	4602      	mov	r2, r0
 80048e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048e4:	6a21      	ldr	r1, [r4, #32]
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b0      	blx	r6
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	d106      	bne.n	80048fe <__sflush_r+0x66>
 80048f0:	6829      	ldr	r1, [r5, #0]
 80048f2:	291d      	cmp	r1, #29
 80048f4:	d82c      	bhi.n	8004950 <__sflush_r+0xb8>
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <__sflush_r+0x108>)
 80048f8:	40ca      	lsrs	r2, r1
 80048fa:	07d6      	lsls	r6, r2, #31
 80048fc:	d528      	bpl.n	8004950 <__sflush_r+0xb8>
 80048fe:	2200      	movs	r2, #0
 8004900:	6062      	str	r2, [r4, #4]
 8004902:	04d9      	lsls	r1, r3, #19
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	d504      	bpl.n	8004914 <__sflush_r+0x7c>
 800490a:	1c42      	adds	r2, r0, #1
 800490c:	d101      	bne.n	8004912 <__sflush_r+0x7a>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	b903      	cbnz	r3, 8004914 <__sflush_r+0x7c>
 8004912:	6560      	str	r0, [r4, #84]	; 0x54
 8004914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004916:	602f      	str	r7, [r5, #0]
 8004918:	2900      	cmp	r1, #0
 800491a:	d0ca      	beq.n	80048b2 <__sflush_r+0x1a>
 800491c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004920:	4299      	cmp	r1, r3
 8004922:	d002      	beq.n	800492a <__sflush_r+0x92>
 8004924:	4628      	mov	r0, r5
 8004926:	f7ff fb47 	bl	8003fb8 <_free_r>
 800492a:	2000      	movs	r0, #0
 800492c:	6360      	str	r0, [r4, #52]	; 0x34
 800492e:	e7c1      	b.n	80048b4 <__sflush_r+0x1c>
 8004930:	6a21      	ldr	r1, [r4, #32]
 8004932:	2301      	movs	r3, #1
 8004934:	4628      	mov	r0, r5
 8004936:	47b0      	blx	r6
 8004938:	1c41      	adds	r1, r0, #1
 800493a:	d1c7      	bne.n	80048cc <__sflush_r+0x34>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0c4      	beq.n	80048cc <__sflush_r+0x34>
 8004942:	2b1d      	cmp	r3, #29
 8004944:	d001      	beq.n	800494a <__sflush_r+0xb2>
 8004946:	2b16      	cmp	r3, #22
 8004948:	d101      	bne.n	800494e <__sflush_r+0xb6>
 800494a:	602f      	str	r7, [r5, #0]
 800494c:	e7b1      	b.n	80048b2 <__sflush_r+0x1a>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	e7ad      	b.n	80048b4 <__sflush_r+0x1c>
 8004958:	690f      	ldr	r7, [r1, #16]
 800495a:	2f00      	cmp	r7, #0
 800495c:	d0a9      	beq.n	80048b2 <__sflush_r+0x1a>
 800495e:	0793      	lsls	r3, r2, #30
 8004960:	680e      	ldr	r6, [r1, #0]
 8004962:	bf08      	it	eq
 8004964:	694b      	ldreq	r3, [r1, #20]
 8004966:	600f      	str	r7, [r1, #0]
 8004968:	bf18      	it	ne
 800496a:	2300      	movne	r3, #0
 800496c:	eba6 0807 	sub.w	r8, r6, r7
 8004970:	608b      	str	r3, [r1, #8]
 8004972:	f1b8 0f00 	cmp.w	r8, #0
 8004976:	dd9c      	ble.n	80048b2 <__sflush_r+0x1a>
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800497c:	4643      	mov	r3, r8
 800497e:	463a      	mov	r2, r7
 8004980:	4628      	mov	r0, r5
 8004982:	47b0      	blx	r6
 8004984:	2800      	cmp	r0, #0
 8004986:	dc06      	bgt.n	8004996 <__sflush_r+0xfe>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e78e      	b.n	80048b4 <__sflush_r+0x1c>
 8004996:	4407      	add	r7, r0
 8004998:	eba8 0800 	sub.w	r8, r8, r0
 800499c:	e7e9      	b.n	8004972 <__sflush_r+0xda>
 800499e:	bf00      	nop
 80049a0:	20400001 	.word	0x20400001

080049a4 <_fflush_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	b913      	cbnz	r3, 80049b4 <_fflush_r+0x10>
 80049ae:	2500      	movs	r5, #0
 80049b0:	4628      	mov	r0, r5
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	b118      	cbz	r0, 80049be <_fflush_r+0x1a>
 80049b6:	6983      	ldr	r3, [r0, #24]
 80049b8:	b90b      	cbnz	r3, 80049be <_fflush_r+0x1a>
 80049ba:	f000 f887 	bl	8004acc <__sinit>
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <_fflush_r+0x6c>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	d11b      	bne.n	80049fc <_fflush_r+0x58>
 80049c4:	686c      	ldr	r4, [r5, #4]
 80049c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ef      	beq.n	80049ae <_fflush_r+0xa>
 80049ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d0:	07d0      	lsls	r0, r2, #31
 80049d2:	d404      	bmi.n	80049de <_fflush_r+0x3a>
 80049d4:	0599      	lsls	r1, r3, #22
 80049d6:	d402      	bmi.n	80049de <_fflush_r+0x3a>
 80049d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049da:	f000 f915 	bl	8004c08 <__retarget_lock_acquire_recursive>
 80049de:	4628      	mov	r0, r5
 80049e0:	4621      	mov	r1, r4
 80049e2:	f7ff ff59 	bl	8004898 <__sflush_r>
 80049e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e8:	07da      	lsls	r2, r3, #31
 80049ea:	4605      	mov	r5, r0
 80049ec:	d4e0      	bmi.n	80049b0 <_fflush_r+0xc>
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	059b      	lsls	r3, r3, #22
 80049f2:	d4dd      	bmi.n	80049b0 <_fflush_r+0xc>
 80049f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f6:	f000 f908 	bl	8004c0a <__retarget_lock_release_recursive>
 80049fa:	e7d9      	b.n	80049b0 <_fflush_r+0xc>
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <_fflush_r+0x70>)
 80049fe:	429c      	cmp	r4, r3
 8004a00:	d101      	bne.n	8004a06 <_fflush_r+0x62>
 8004a02:	68ac      	ldr	r4, [r5, #8]
 8004a04:	e7df      	b.n	80049c6 <_fflush_r+0x22>
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <_fflush_r+0x74>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	bf08      	it	eq
 8004a0c:	68ec      	ldreq	r4, [r5, #12]
 8004a0e:	e7da      	b.n	80049c6 <_fflush_r+0x22>
 8004a10:	080052c4 	.word	0x080052c4
 8004a14:	080052e4 	.word	0x080052e4
 8004a18:	080052a4 	.word	0x080052a4

08004a1c <std>:
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	4604      	mov	r4, r0
 8004a22:	e9c0 3300 	strd	r3, r3, [r0]
 8004a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a2a:	6083      	str	r3, [r0, #8]
 8004a2c:	8181      	strh	r1, [r0, #12]
 8004a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a30:	81c2      	strh	r2, [r0, #14]
 8004a32:	6183      	str	r3, [r0, #24]
 8004a34:	4619      	mov	r1, r3
 8004a36:	2208      	movs	r2, #8
 8004a38:	305c      	adds	r0, #92	; 0x5c
 8004a3a:	f7ff fa19 	bl	8003e70 <memset>
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <std+0x38>)
 8004a40:	6263      	str	r3, [r4, #36]	; 0x24
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <std+0x3c>)
 8004a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <std+0x40>)
 8004a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <std+0x44>)
 8004a4c:	6224      	str	r4, [r4, #32]
 8004a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	bf00      	nop
 8004a54:	08004d75 	.word	0x08004d75
 8004a58:	08004d97 	.word	0x08004d97
 8004a5c:	08004dcf 	.word	0x08004dcf
 8004a60:	08004df3 	.word	0x08004df3

08004a64 <_cleanup_r>:
 8004a64:	4901      	ldr	r1, [pc, #4]	; (8004a6c <_cleanup_r+0x8>)
 8004a66:	f000 b8af 	b.w	8004bc8 <_fwalk_reent>
 8004a6a:	bf00      	nop
 8004a6c:	080049a5 	.word	0x080049a5

08004a70 <__sfmoreglue>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	1e4a      	subs	r2, r1, #1
 8004a74:	2568      	movs	r5, #104	; 0x68
 8004a76:	4355      	muls	r5, r2
 8004a78:	460e      	mov	r6, r1
 8004a7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a7e:	f7ff faeb 	bl	8004058 <_malloc_r>
 8004a82:	4604      	mov	r4, r0
 8004a84:	b140      	cbz	r0, 8004a98 <__sfmoreglue+0x28>
 8004a86:	2100      	movs	r1, #0
 8004a88:	e9c0 1600 	strd	r1, r6, [r0]
 8004a8c:	300c      	adds	r0, #12
 8004a8e:	60a0      	str	r0, [r4, #8]
 8004a90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a94:	f7ff f9ec 	bl	8003e70 <memset>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}

08004a9c <__sfp_lock_acquire>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__sfp_lock_acquire+0x8>)
 8004a9e:	f000 b8b3 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	200002a4 	.word	0x200002a4

08004aa8 <__sfp_lock_release>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <__sfp_lock_release+0x8>)
 8004aaa:	f000 b8ae 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004aae:	bf00      	nop
 8004ab0:	200002a4 	.word	0x200002a4

08004ab4 <__sinit_lock_acquire>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__sinit_lock_acquire+0x8>)
 8004ab6:	f000 b8a7 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	2000029f 	.word	0x2000029f

08004ac0 <__sinit_lock_release>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__sinit_lock_release+0x8>)
 8004ac2:	f000 b8a2 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	2000029f 	.word	0x2000029f

08004acc <__sinit>:
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4604      	mov	r4, r0
 8004ad0:	f7ff fff0 	bl	8004ab4 <__sinit_lock_acquire>
 8004ad4:	69a3      	ldr	r3, [r4, #24]
 8004ad6:	b11b      	cbz	r3, 8004ae0 <__sinit+0x14>
 8004ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004adc:	f7ff bff0 	b.w	8004ac0 <__sinit_lock_release>
 8004ae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ae4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <__sinit+0x68>)
 8004ae8:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <__sinit+0x6c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	62a2      	str	r2, [r4, #40]	; 0x28
 8004aee:	42a3      	cmp	r3, r4
 8004af0:	bf04      	itt	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	61a3      	streq	r3, [r4, #24]
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f820 	bl	8004b3c <__sfp>
 8004afc:	6060      	str	r0, [r4, #4]
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 f81c 	bl	8004b3c <__sfp>
 8004b04:	60a0      	str	r0, [r4, #8]
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 f818 	bl	8004b3c <__sfp>
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60e0      	str	r0, [r4, #12]
 8004b10:	2104      	movs	r1, #4
 8004b12:	6860      	ldr	r0, [r4, #4]
 8004b14:	f7ff ff82 	bl	8004a1c <std>
 8004b18:	68a0      	ldr	r0, [r4, #8]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	2109      	movs	r1, #9
 8004b1e:	f7ff ff7d 	bl	8004a1c <std>
 8004b22:	68e0      	ldr	r0, [r4, #12]
 8004b24:	2202      	movs	r2, #2
 8004b26:	2112      	movs	r1, #18
 8004b28:	f7ff ff78 	bl	8004a1c <std>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	61a3      	str	r3, [r4, #24]
 8004b30:	e7d2      	b.n	8004ad8 <__sinit+0xc>
 8004b32:	bf00      	nop
 8004b34:	080051b8 	.word	0x080051b8
 8004b38:	08004a65 	.word	0x08004a65

08004b3c <__sfp>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	4607      	mov	r7, r0
 8004b40:	f7ff ffac 	bl	8004a9c <__sfp_lock_acquire>
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <__sfp+0x84>)
 8004b46:	681e      	ldr	r6, [r3, #0]
 8004b48:	69b3      	ldr	r3, [r6, #24]
 8004b4a:	b913      	cbnz	r3, 8004b52 <__sfp+0x16>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f7ff ffbd 	bl	8004acc <__sinit>
 8004b52:	3648      	adds	r6, #72	; 0x48
 8004b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	d503      	bpl.n	8004b64 <__sfp+0x28>
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	b30b      	cbz	r3, 8004ba4 <__sfp+0x68>
 8004b60:	6836      	ldr	r6, [r6, #0]
 8004b62:	e7f7      	b.n	8004b54 <__sfp+0x18>
 8004b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b68:	b9d5      	cbnz	r5, 8004ba0 <__sfp+0x64>
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <__sfp+0x88>)
 8004b6c:	60e3      	str	r3, [r4, #12]
 8004b6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b72:	6665      	str	r5, [r4, #100]	; 0x64
 8004b74:	f000 f847 	bl	8004c06 <__retarget_lock_init_recursive>
 8004b78:	f7ff ff96 	bl	8004aa8 <__sfp_lock_release>
 8004b7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b84:	6025      	str	r5, [r4, #0]
 8004b86:	61a5      	str	r5, [r4, #24]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b90:	f7ff f96e 	bl	8003e70 <memset>
 8004b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba0:	3468      	adds	r4, #104	; 0x68
 8004ba2:	e7d9      	b.n	8004b58 <__sfp+0x1c>
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f7ff ff62 	bl	8004a70 <__sfmoreglue>
 8004bac:	4604      	mov	r4, r0
 8004bae:	6030      	str	r0, [r6, #0]
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d1d5      	bne.n	8004b60 <__sfp+0x24>
 8004bb4:	f7ff ff78 	bl	8004aa8 <__sfp_lock_release>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	e7ee      	b.n	8004b9c <__sfp+0x60>
 8004bbe:	bf00      	nop
 8004bc0:	080051b8 	.word	0x080051b8
 8004bc4:	ffff0001 	.word	0xffff0001

08004bc8 <_fwalk_reent>:
 8004bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bcc:	4606      	mov	r6, r0
 8004bce:	4688      	mov	r8, r1
 8004bd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bd4:	2700      	movs	r7, #0
 8004bd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bda:	f1b9 0901 	subs.w	r9, r9, #1
 8004bde:	d505      	bpl.n	8004bec <_fwalk_reent+0x24>
 8004be0:	6824      	ldr	r4, [r4, #0]
 8004be2:	2c00      	cmp	r4, #0
 8004be4:	d1f7      	bne.n	8004bd6 <_fwalk_reent+0xe>
 8004be6:	4638      	mov	r0, r7
 8004be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bec:	89ab      	ldrh	r3, [r5, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d907      	bls.n	8004c02 <_fwalk_reent+0x3a>
 8004bf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	d003      	beq.n	8004c02 <_fwalk_reent+0x3a>
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	47c0      	blx	r8
 8004c00:	4307      	orrs	r7, r0
 8004c02:	3568      	adds	r5, #104	; 0x68
 8004c04:	e7e9      	b.n	8004bda <_fwalk_reent+0x12>

08004c06 <__retarget_lock_init_recursive>:
 8004c06:	4770      	bx	lr

08004c08 <__retarget_lock_acquire_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <__retarget_lock_release_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <__swhatbuf_r>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	460e      	mov	r6, r1
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	2900      	cmp	r1, #0
 8004c16:	b096      	sub	sp, #88	; 0x58
 8004c18:	4614      	mov	r4, r2
 8004c1a:	461d      	mov	r5, r3
 8004c1c:	da07      	bge.n	8004c2e <__swhatbuf_r+0x22>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	89b3      	ldrh	r3, [r6, #12]
 8004c24:	061a      	lsls	r2, r3, #24
 8004c26:	d410      	bmi.n	8004c4a <__swhatbuf_r+0x3e>
 8004c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2c:	e00e      	b.n	8004c4c <__swhatbuf_r+0x40>
 8004c2e:	466a      	mov	r2, sp
 8004c30:	f000 f906 	bl	8004e40 <_fstat_r>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	dbf2      	blt.n	8004c1e <__swhatbuf_r+0x12>
 8004c38:	9a01      	ldr	r2, [sp, #4]
 8004c3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c42:	425a      	negs	r2, r3
 8004c44:	415a      	adcs	r2, r3
 8004c46:	602a      	str	r2, [r5, #0]
 8004c48:	e7ee      	b.n	8004c28 <__swhatbuf_r+0x1c>
 8004c4a:	2340      	movs	r3, #64	; 0x40
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	b016      	add	sp, #88	; 0x58
 8004c52:	bd70      	pop	{r4, r5, r6, pc}

08004c54 <__smakebuf_r>:
 8004c54:	898b      	ldrh	r3, [r1, #12]
 8004c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c58:	079d      	lsls	r5, r3, #30
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	d507      	bpl.n	8004c70 <__smakebuf_r+0x1c>
 8004c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	6123      	str	r3, [r4, #16]
 8004c68:	2301      	movs	r3, #1
 8004c6a:	6163      	str	r3, [r4, #20]
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	ab01      	add	r3, sp, #4
 8004c72:	466a      	mov	r2, sp
 8004c74:	f7ff ffca 	bl	8004c0c <__swhatbuf_r>
 8004c78:	9900      	ldr	r1, [sp, #0]
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f7ff f9eb 	bl	8004058 <_malloc_r>
 8004c82:	b948      	cbnz	r0, 8004c98 <__smakebuf_r+0x44>
 8004c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c88:	059a      	lsls	r2, r3, #22
 8004c8a:	d4ef      	bmi.n	8004c6c <__smakebuf_r+0x18>
 8004c8c:	f023 0303 	bic.w	r3, r3, #3
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	e7e3      	b.n	8004c60 <__smakebuf_r+0xc>
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <__smakebuf_r+0x7c>)
 8004c9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	6020      	str	r0, [r4, #0]
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	9b00      	ldr	r3, [sp, #0]
 8004ca8:	6163      	str	r3, [r4, #20]
 8004caa:	9b01      	ldr	r3, [sp, #4]
 8004cac:	6120      	str	r0, [r4, #16]
 8004cae:	b15b      	cbz	r3, 8004cc8 <__smakebuf_r+0x74>
 8004cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f000 f8d5 	bl	8004e64 <_isatty_r>
 8004cba:	b128      	cbz	r0, 8004cc8 <__smakebuf_r+0x74>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	81a3      	strh	r3, [r4, #12]
 8004cc8:	89a0      	ldrh	r0, [r4, #12]
 8004cca:	4305      	orrs	r5, r0
 8004ccc:	81a5      	strh	r5, [r4, #12]
 8004cce:	e7cd      	b.n	8004c6c <__smakebuf_r+0x18>
 8004cd0:	08004a65 	.word	0x08004a65

08004cd4 <__malloc_lock>:
 8004cd4:	4801      	ldr	r0, [pc, #4]	; (8004cdc <__malloc_lock+0x8>)
 8004cd6:	f7ff bf97 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004cda:	bf00      	nop
 8004cdc:	200002a0 	.word	0x200002a0

08004ce0 <__malloc_unlock>:
 8004ce0:	4801      	ldr	r0, [pc, #4]	; (8004ce8 <__malloc_unlock+0x8>)
 8004ce2:	f7ff bf92 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004ce6:	bf00      	nop
 8004ce8:	200002a0 	.word	0x200002a0

08004cec <_raise_r>:
 8004cec:	291f      	cmp	r1, #31
 8004cee:	b538      	push	{r3, r4, r5, lr}
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	460d      	mov	r5, r1
 8004cf4:	d904      	bls.n	8004d00 <_raise_r+0x14>
 8004cf6:	2316      	movs	r3, #22
 8004cf8:	6003      	str	r3, [r0, #0]
 8004cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d02:	b112      	cbz	r2, 8004d0a <_raise_r+0x1e>
 8004d04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d08:	b94b      	cbnz	r3, 8004d1e <_raise_r+0x32>
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f000 f830 	bl	8004d70 <_getpid_r>
 8004d10:	462a      	mov	r2, r5
 8004d12:	4601      	mov	r1, r0
 8004d14:	4620      	mov	r0, r4
 8004d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d1a:	f000 b817 	b.w	8004d4c <_kill_r>
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d00a      	beq.n	8004d38 <_raise_r+0x4c>
 8004d22:	1c59      	adds	r1, r3, #1
 8004d24:	d103      	bne.n	8004d2e <_raise_r+0x42>
 8004d26:	2316      	movs	r3, #22
 8004d28:	6003      	str	r3, [r0, #0]
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	e7e7      	b.n	8004cfe <_raise_r+0x12>
 8004d2e:	2400      	movs	r4, #0
 8004d30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d34:	4628      	mov	r0, r5
 8004d36:	4798      	blx	r3
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e7e0      	b.n	8004cfe <_raise_r+0x12>

08004d3c <raise>:
 8004d3c:	4b02      	ldr	r3, [pc, #8]	; (8004d48 <raise+0xc>)
 8004d3e:	4601      	mov	r1, r0
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	f7ff bfd3 	b.w	8004cec <_raise_r>
 8004d46:	bf00      	nop
 8004d48:	2000000c 	.word	0x2000000c

08004d4c <_kill_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d07      	ldr	r5, [pc, #28]	; (8004d6c <_kill_r+0x20>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	602b      	str	r3, [r5, #0]
 8004d5a:	f7fc f917 	bl	8000f8c <_kill>
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	d102      	bne.n	8004d68 <_kill_r+0x1c>
 8004d62:	682b      	ldr	r3, [r5, #0]
 8004d64:	b103      	cbz	r3, 8004d68 <_kill_r+0x1c>
 8004d66:	6023      	str	r3, [r4, #0]
 8004d68:	bd38      	pop	{r3, r4, r5, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200002a8 	.word	0x200002a8

08004d70 <_getpid_r>:
 8004d70:	f7fc b904 	b.w	8000f7c <_getpid>

08004d74 <__sread>:
 8004d74:	b510      	push	{r4, lr}
 8004d76:	460c      	mov	r4, r1
 8004d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7c:	f000 f894 	bl	8004ea8 <_read_r>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	bfab      	itete	ge
 8004d84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d86:	89a3      	ldrhlt	r3, [r4, #12]
 8004d88:	181b      	addge	r3, r3, r0
 8004d8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d8e:	bfac      	ite	ge
 8004d90:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d92:	81a3      	strhlt	r3, [r4, #12]
 8004d94:	bd10      	pop	{r4, pc}

08004d96 <__swrite>:
 8004d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9a:	461f      	mov	r7, r3
 8004d9c:	898b      	ldrh	r3, [r1, #12]
 8004d9e:	05db      	lsls	r3, r3, #23
 8004da0:	4605      	mov	r5, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	4616      	mov	r6, r2
 8004da6:	d505      	bpl.n	8004db4 <__swrite+0x1e>
 8004da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dac:	2302      	movs	r3, #2
 8004dae:	2200      	movs	r2, #0
 8004db0:	f000 f868 	bl	8004e84 <_lseek_r>
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dca:	f000 b817 	b.w	8004dfc <_write_r>

08004dce <__sseek>:
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd6:	f000 f855 	bl	8004e84 <_lseek_r>
 8004dda:	1c43      	adds	r3, r0, #1
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	bf15      	itete	ne
 8004de0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dea:	81a3      	strheq	r3, [r4, #12]
 8004dec:	bf18      	it	ne
 8004dee:	81a3      	strhne	r3, [r4, #12]
 8004df0:	bd10      	pop	{r4, pc}

08004df2 <__sclose>:
 8004df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df6:	f000 b813 	b.w	8004e20 <_close_r>
	...

08004dfc <_write_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4d07      	ldr	r5, [pc, #28]	; (8004e1c <_write_r+0x20>)
 8004e00:	4604      	mov	r4, r0
 8004e02:	4608      	mov	r0, r1
 8004e04:	4611      	mov	r1, r2
 8004e06:	2200      	movs	r2, #0
 8004e08:	602a      	str	r2, [r5, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f7fc f8f5 	bl	8000ffa <_write>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_write_r+0x1e>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_write_r+0x1e>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	200002a8 	.word	0x200002a8

08004e20 <_close_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d06      	ldr	r5, [pc, #24]	; (8004e3c <_close_r+0x1c>)
 8004e24:	2300      	movs	r3, #0
 8004e26:	4604      	mov	r4, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	f7fc f901 	bl	8001032 <_close>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d102      	bne.n	8004e3a <_close_r+0x1a>
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	b103      	cbz	r3, 8004e3a <_close_r+0x1a>
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	200002a8 	.word	0x200002a8

08004e40 <_fstat_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d07      	ldr	r5, [pc, #28]	; (8004e60 <_fstat_r+0x20>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	f7fc f8fc 	bl	800104a <_fstat>
 8004e52:	1c43      	adds	r3, r0, #1
 8004e54:	d102      	bne.n	8004e5c <_fstat_r+0x1c>
 8004e56:	682b      	ldr	r3, [r5, #0]
 8004e58:	b103      	cbz	r3, 8004e5c <_fstat_r+0x1c>
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	bd38      	pop	{r3, r4, r5, pc}
 8004e5e:	bf00      	nop
 8004e60:	200002a8 	.word	0x200002a8

08004e64 <_isatty_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4d06      	ldr	r5, [pc, #24]	; (8004e80 <_isatty_r+0x1c>)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	602b      	str	r3, [r5, #0]
 8004e70:	f7fc f8fb 	bl	800106a <_isatty>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	d102      	bne.n	8004e7e <_isatty_r+0x1a>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	b103      	cbz	r3, 8004e7e <_isatty_r+0x1a>
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	200002a8 	.word	0x200002a8

08004e84 <_lseek_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d07      	ldr	r5, [pc, #28]	; (8004ea4 <_lseek_r+0x20>)
 8004e88:	4604      	mov	r4, r0
 8004e8a:	4608      	mov	r0, r1
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	2200      	movs	r2, #0
 8004e90:	602a      	str	r2, [r5, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f7fc f8f4 	bl	8001080 <_lseek>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d102      	bne.n	8004ea2 <_lseek_r+0x1e>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	b103      	cbz	r3, 8004ea2 <_lseek_r+0x1e>
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
 8004ea4:	200002a8 	.word	0x200002a8

08004ea8 <_read_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	4d07      	ldr	r5, [pc, #28]	; (8004ec8 <_read_r+0x20>)
 8004eac:	4604      	mov	r4, r0
 8004eae:	4608      	mov	r0, r1
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	602a      	str	r2, [r5, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f7fc f882 	bl	8000fc0 <_read>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_read_r+0x1e>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_read_r+0x1e>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	200002a8 	.word	0x200002a8

08004ecc <_init>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr

08004ed8 <_fini>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	bf00      	nop
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr
